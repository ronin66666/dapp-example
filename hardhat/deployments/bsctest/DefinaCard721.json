{
  "address": "0x6e1A0E41914066225913aCc001A8311996cbA802",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cardId_",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cardId_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "MintMulti",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cardId_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "camp_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rarity_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxAmount_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "cardURI_",
          "type": "string"
        }
      ],
      "name": "NewCard",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receivedAddress_",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "PullNFTs",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_new",
          "type": "address"
        }
      ],
      "name": "SetAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_new",
          "type": "address"
        }
      ],
      "name": "SetBlindBox",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_new",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cardId_",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "SetMinter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_new",
          "type": "address"
        }
      ],
      "name": "SetSuperMinter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blindBox",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds_",
          "type": "uint256[]"
        }
      ],
      "name": "burnMulti",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cardIdMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cardInfoes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cardId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "camp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rarity",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "currentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "cardURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "getTokenIDsByAddress",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "blindBox_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseTokenURI_",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cardId_",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cardId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "mintMulti",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "myBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "cardId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "camp_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rarity_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "cardURI_",
          "type": "string"
        }
      ],
      "name": "newCard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receivedAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pullNFTs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin_",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "blindBox_",
          "type": "address"
        }
      ],
      "name": "setBlindBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMinter_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cardId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setMyBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newSuperMinter_",
          "type": "address"
        }
      ],
      "name": "setSuperMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "superMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "cardId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "camp_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rarity_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "cardURI_",
          "type": "string"
        }
      ],
      "name": "updateCard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d0b10ff5189306353edee0629b3b0e0b987bda750ad95a6d1153b1b2dc60403",
  "receipt": {
    "to": null,
    "from": "0x609cf913Fc7CD719AfcF24DD48bD0F3AD0eB0C6F",
    "contractAddress": "0x6e1A0E41914066225913aCc001A8311996cbA802",
    "transactionIndex": 6,
    "gasUsed": "2877543",
    "logsBloom": "0x
    "blockHash": "0x177ccbb67b07b0429e1dc88b8689f1232845fc42d084f70e2caaae155f75c46b",
    "transactionHash": "0x8d0b10ff5189306353edee0629b3b0e0b987bda750ad95a6d1153b1b2dc60403",
    "logs": [],
    "blockNumber": 18752098,
    "cumulativeGasUsed": "4517148",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0e81e0d05204f3293078f523345abdb3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MintMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"camp_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rarity_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cardURI_\",\"type\":\"string\"}],\"name\":\"NewCard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivedAddress_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"PullNFTs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"SetBlindBox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"SetMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"SetSuperMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blindBox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"burnMulti\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardIdMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardInfoes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"camp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cardURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenIDsByAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blindBox_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mintMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"camp_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cardURI_\",\"type\":\"string\"}],\"name\":\"newCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blindBox_\",\"type\":\"address\"}],\"name\":\"setBlindBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setMyBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSuperMinter_\",\"type\":\"address\"}],\"name\":\"setSuperMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"camp_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cardURI_\",\"type\":\"string\"}],\"name\":\"updateCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DefinaCard721.sol\":\"DefinaCard721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4823752b07b8ea4ca971b217e39457930e7cb103c2c91e2a29729e5ca907e4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/DefinaCard721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\n\\r\\ncontract DefinaCard721 is ERC721Enumerable, ERC721URIStorage, Initializable {\\r\\n    // for inherit\\r\\n    function _burn (uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\r\\n        ERC721URIStorage._burn(tokenId);\\r\\n    }\\r\\n    function _beforeTokenTransfer (address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) {\\r\\n        ERC721Enumerable._beforeTokenTransfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, ERC721Enumerable) returns (bool) {\\r\\n        return interfaceId == type(IERC721).interfaceId\\r\\n        || interfaceId == type(IERC721Enumerable).interfaceId\\r\\n        || interfaceId == type(IERC721Metadata).interfaceId\\r\\n        || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n\\r\\n    using SafeMath for uint;\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    address public Admin;\\r\\n    mapping(address => mapping(uint => uint)) public minters;\\r\\n    address public superMinter;\\r\\n\\r\\n    event SetAdmin(address _new);\\r\\n    event SetSuperMinter(address _new);\\r\\n    event SetMinter(address _new, uint cardId_, uint amount_);\\r\\n    event SetBlindBox(address _new);\\r\\n    event Mint(uint cardId_);\\r\\n    event MintMulti(uint cardId_, uint _amount);\\r\\n    event NewCard(string name_, uint cardId_, uint camp_, uint rarity_,\\r\\n        uint maxAmount_, string cardURI_);\\r\\n    event Burn(uint indexed tokenId_);\\r\\n    event PullNFTs(address tokenAddress_, address receivedAddress_, uint amount_);\\r\\n\\r\\n\\r\\n    modifier onlyAdmin () {\\r\\n        require(_msgSender() == Admin, \\\"not Admin's calling\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setAdmin(address newAdmin_) external onlyAdmin {\\r\\n        require(newAdmin_ != address(0), \\\"The address is null\\\");\\r\\n        Admin = newAdmin_;\\r\\n        emit SetAdmin(newAdmin_);\\r\\n    }\\r\\n\\r\\n    function setSuperMinter(address newSuperMinter_) external onlyAdmin {\\r\\n        require(newSuperMinter_ != address(0), \\\"The address is null\\\");\\r\\n        superMinter = newSuperMinter_;\\r\\n        emit SetSuperMinter(newSuperMinter_);\\r\\n    }\\r\\n\\r\\n    function setMinter(address newMinter_, uint cardId_, uint amount_) external onlyAdmin {\\r\\n        require(newMinter_ != address(0), \\\"The address is null\\\");\\r\\n        require(cardId_ != 0, \\\"The cardId_ is null\\\");\\r\\n        require(amount_ != 0, \\\"The amount_ is null\\\");\\r\\n        minters[newMinter_][cardId_] = amount_;\\r\\n        emit SetMinter(newMinter_, cardId_, amount_);\\r\\n    }\\r\\n\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private _tokenIds;\\r\\n\\r\\n    struct CardInfo {\\r\\n        uint cardId;\\r\\n        uint camp;\\r\\n        uint rarity;\\r\\n        string name;\\r\\n        uint currentAmount;\\r\\n        uint maxAmount;\\r\\n        string cardURI;\\r\\n    }\\r\\n\\r\\n    // cardId => cardInfo\\r\\n    mapping(uint => CardInfo) public cardInfoes;\\r\\n    EnumerableSet.UintSet private cardIds;\\r\\n\\r\\n    // token => cardId\\r\\n    mapping(uint => uint) public cardIdMap;\\r\\n    string public myBaseURI;\\r\\n    address public blindBox;\\r\\n\\r\\n    constructor() ERC721(\\\"Defina Card\\\", \\\"DEFINACARD\\\") {\\r\\n        Admin = _msgSender();\\r\\n    }\\r\\n\\r\\n    function initialize(address blindBox_, string memory baseTokenURI_) onlyAdmin external initializer {\\r\\n        setBlindBox(blindBox_);\\r\\n        myBaseURI = baseTokenURI_;\\r\\n    }\\r\\n\\r\\n    function setBlindBox(address blindBox_) onlyAdmin public {\\r\\n        require(blindBox_ != address(0), \\\"The address of Blind Box token is null\\\");\\r\\n        blindBox = blindBox_;\\r\\n        emit SetBlindBox(blindBox_);\\r\\n    }\\r\\n\\r\\n    function setMyBaseURI(string memory uri_) external onlyAdmin {\\r\\n        myBaseURI = uri_;\\r\\n    }\\r\\n\\r\\n    function newCard(string memory name_, uint cardId_, uint camp_, uint rarity_,\\r\\n        uint maxAmount_, string memory cardURI_) external onlyAdmin {\\r\\n\\r\\n        require(cardId_ != 0 && cardInfoes[cardId_].cardId == 0, \\\"ERC721: wrong cardId\\\");\\r\\n        cardIds.add(cardId_);\\r\\n        cardInfoes[cardId_] = CardInfo({\\r\\n        cardId : cardId_,\\r\\n        name : name_,\\r\\n        camp: camp_,\\r\\n        rarity: rarity_,\\r\\n        currentAmount : 0,\\r\\n        maxAmount : maxAmount_,\\r\\n        cardURI : cardURI_\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function updateCard(string memory name_, uint cardId_, uint camp_, uint rarity_,\\r\\n        uint maxAmount_, string memory cardURI_) external onlyAdmin {\\r\\n        require(cardId_ != 0 && cardInfoes[cardId_].cardId != 0, \\\"ERC721: wrong cardId\\\");\\r\\n        require(maxAmount_ > cardInfoes[cardId_].currentAmount, \\\"ERC721: maxAmount less than current amount\\\");\\r\\n\\r\\n        cardInfoes[cardId_].name = name_;\\r\\n        cardInfoes[cardId_].camp = camp_;\\r\\n        cardInfoes[cardId_].rarity = rarity_;\\r\\n        cardInfoes[cardId_].maxAmount = maxAmount_;\\r\\n        cardInfoes[cardId_].cardURI = cardURI_;\\r\\n    }\\r\\n\\r\\n    function mint(uint cardId_) public returns (uint256) {\\r\\n        require(cardId_ != 0 && cardInfoes[cardId_].cardId != 0, \\\"ERC721: wrong cardId\\\");\\r\\n\\r\\n        if (superMinter != _msgSender()) {\\r\\n            require(minters[_msgSender()][cardId_] > 0, \\\"ERC721: not minter's calling\\\");\\r\\n            minters[_msgSender()][cardId_] -= 1;\\r\\n        }\\r\\n\\r\\n        require(cardInfoes[cardId_].currentAmount < cardInfoes[cardId_].maxAmount, \\\"ERC721: Token amount is out of limit\\\");\\r\\n        cardInfoes[cardId_].currentAmount += 1;\\r\\n\\r\\n        _tokenIds.increment();\\r\\n        uint tokenId = _tokenIds.current();\\r\\n        emit Mint(cardId_);\\r\\n\\r\\n        cardIdMap[tokenId] = cardId_;\\r\\n        _mint(blindBox, tokenId);\\r\\n\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    function mintMulti(uint cardId_, uint amount_) public returns (uint256) {\\r\\n        require(amount_ > 0, \\\"ERC721: missing amount\\\");\\r\\n        require(cardId_ != 0 && cardInfoes[cardId_].cardId != 0, \\\"ERC721: wrong cardId\\\");\\r\\n\\r\\n        if (superMinter != _msgSender()) {\\r\\n            require(minters[_msgSender()][cardId_] >= amount_, \\\"ERC721: not minter's calling\\\");\\r\\n            minters[_msgSender()][cardId_] -= amount_;\\r\\n        }\\r\\n\\r\\n        require(cardInfoes[cardId_].maxAmount.sub(cardInfoes[cardId_].currentAmount) >= amount_, \\\"ERC721: Token amount is out of limit\\\");\\r\\n        cardInfoes[cardId_].currentAmount += amount_;\\r\\n\\r\\n        uint tokenId;\\r\\n        for (uint i = 0; i < amount_; ++i) {\\r\\n            _tokenIds.increment();\\r\\n            tokenId = _tokenIds.current();\\r\\n\\r\\n            cardIdMap[tokenId] = cardId_;\\r\\n            _mint(blindBox, tokenId);\\r\\n\\r\\n        }\\r\\n        emit MintMulti(cardId_, amount_);\\r\\n        return tokenId;\\r\\n\\r\\n    }\\r\\n\\r\\n    function burn(uint tokenId_) public returns (bool){\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId_), \\\"ERC721: burn caller is not owner nor approved\\\");\\r\\n\\r\\n        delete cardIdMap[tokenId_];\\r\\n        _burn(tokenId_);\\r\\n        emit Burn(tokenId_);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function burnMulti(uint[] calldata tokenIds_) public returns (bool){\\r\\n        for (uint i = 0; i < tokenIds_.length; ++i) {\\r\\n            uint tokenId_ = tokenIds_[i];\\r\\n            require(_isApprovedOrOwner(_msgSender(), tokenId_), \\\"ERC721: burn caller is not owner nor approved\\\");\\r\\n\\r\\n            delete cardIdMap[tokenId_];\\r\\n            _burn(tokenId_);\\r\\n            emit Burn(tokenId_);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId_) override(ERC721URIStorage, ERC721) public view returns (string memory) {\\r\\n        require(_exists(tokenId_), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory URI = cardInfoes[cardIdMap[tokenId_]].cardURI;\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0\\r\\n        ? string(abi.encodePacked(baseURI, URI))\\r\\n        : URI;\\r\\n    }\\r\\n\\r\\n    function getTokenIDsByAddress(address who) view external returns(uint[] memory) {\\r\\n        require(who != address(0));\\r\\n        uint length = balanceOf(who);\\r\\n        uint[] memory tmp = new uint[](length);\\r\\n        for (uint i = 0; i < length; i++) {\\r\\n            tmp[i] = tokenOfOwnerByIndex(who, length-i-1);\\r\\n        }\\r\\n        return tmp;\\r\\n    }\\r\\n\\r\\n    function _baseURI() internal view override returns (string memory) {\\r\\n        return myBaseURI;\\r\\n    }\\r\\n\\r\\n    function pullNFTs(address tokenAddress, address receivedAddress, uint amount) onlyAdmin public {\\r\\n        require(receivedAddress != address(0));\\r\\n        require(tokenAddress != address(0));\\r\\n        uint balance = IERC721(tokenAddress).balanceOf(address(this));\\r\\n        if (balance < amount) {\\r\\n            amount = balance;\\r\\n        }\\r\\n        for (uint i = 0; i < amount; i++) {\\r\\n            uint tokenId = IERC721Enumerable(tokenAddress).tokenOfOwnerByIndex(address(this), 0);\\r\\n            IERC721(tokenAddress).safeTransferFrom(address(this), receivedAddress, tokenId);\\r\\n        }\\r\\n        emit PullNFTs(tokenAddress, receivedAddress, amount);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x985b7c1b07267104a82e4ab4957ad9cad7244a4cd798abddc72a387fdfbbeb09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604080518082018252600b81526a1119599a5b984810d85c9960aa1b60208083019182528351808501909452600a84526911115192539050d0549160b21b9084015281519192916200006791600091620000b5565b5080516200007d906001906020840190620000b5565b50620000899150503390565b600b60026101000a8154816001600160a01b0302191690836001600160a01b0316021790555062000198565b828054620000c3906200015b565b90600052602060002090601f016020900481019282620000e7576000855562000132565b82601f106200010257805160ff191683800117855562000132565b8280016001018555821562000132579182015b828111156200013257825182559160200191906001019062000115565b506200014092915062000144565b5090565b5b8082111562000140576000815560010162000145565b600181811c908216806200017057607f821691505b602082108114156200019257634e487b7160e01b600052602260045260246000fd5b50919050565b6131d580620001a86000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80636a4aeeb811610130578063b41d74d8116100b8578063e985e9c51161007c578063e985e9c5146104dc578063f399e22e14610518578063f9b3dd081461052b578063fbfe5e0d1461053e578063ff1b636d1461056457600080fd5b8063b41d74d81461047d578063b88d4fde14610490578063bb2fa28c146104a3578063c87b56dd146104b6578063ce954370146104c957600080fd5b80639239eb27116100ff5780639239eb271461041c57806395d89b411461043c578063995e5e7814610444578063a0712d6814610457578063a22cb4651461046a57600080fd5b80636a4aeeb8146103b8578063704b6c02146103cb57806370a08231146103de57806378746d0d146103f157600080fd5b8063372a3b82116101b35780635258495711610182578063525849571461034c5780635dcce2341461036c5780635f7c85431461037f57806362e42cb0146103925780636352211e146103a557600080fd5b8063372a3b821461030b57806342842e0e1461031357806342966c68146103265780634f6ccce71461033957600080fd5b806309ab0442116101fa57806309ab0442146102a957806317c0825e146102bc57806318160ddd146102dd57806323b872dd146102e55780632f745c59146102f857600080fd5b806301ffc9a71461022c57806306fdde0314610254578063081812fc14610269578063095ea7b314610294575b600080fd5b61023f61023a36600461293a565b61057d565b60405190151581526020015b60405180910390f35b61025c6105de565b60405161024b91906129af565b61027c6102773660046129c2565b610670565b6040516001600160a01b03909116815260200161024b565b6102a76102a23660046129f7565b61070a565b005b61023f6102b7366004612a21565b610820565b6102cf6102ca366004612a96565b6108d3565b60405190815260200161024b565b6008546102cf565b6102a76102f3366004612ab8565b610b03565b6102cf6103063660046129f7565b610b33565b61025c610bc9565b6102a7610321366004612ab8565b610c57565b61023f6103343660046129c2565b610c72565b6102cf6103473660046129c2565b610ce6565b61035f61035a366004612af4565b610d79565b60405161024b9190612b0f565b6102a761037a366004612bff565b610e3e565b6102a761038d366004612af4565b610e8e565b600d5461027c906001600160a01b031681565b61027c6103b33660046129c2565b610f81565b60145461027c906001600160a01b031681565b6102a76103d9366004612af4565b610ff8565b6102cf6103ec366004612af4565b6110af565b6102cf6103ff3660046129f7565b600c60209081526000928352604080842090915290825290205481565b6102cf61042a3660046129c2565b60126020526000908152604090205481565b61025c611136565b6102a7610452366004612c34565b611145565b6102cf6104653660046129c2565b611268565b6102a7610478366004612cbd565b61141f565b6102a761048b366004612af4565b61142a565b6102a761049e366004612cf9565b6114d7565b6102a76104b1366004612d75565b61150e565b61025c6104c43660046129c2565b61165b565b6102a76104d7366004612c34565b6117c9565b61023f6104ea366004612da8565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102a7610526366004612ddb565b611916565b6102a7610539366004612ab8565b611a26565b61055161054c3660046129c2565b611c6b565b60405161024b9796959493929190612e29565b600b5461027c906201000090046001600160a01b031681565b60006001600160e01b031982166380ac58cd60e01b14806105ae57506001600160e01b0319821663780e9d6360e01b145b806105c957506001600160e01b03198216635b5e139f60e01b145b806105d857506105d882611db8565b92915050565b6060600080546105ed90612e7a565b80601f016020809104026020016040519081016040528092919081815260200182805461061990612e7a565b80156106665780601f1061063b57610100808354040283529160200191610666565b820191906000526020600020905b81548152906001019060200180831161064957829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106ee5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061071582610f81565b9050806001600160a01b0316836001600160a01b031614156107835760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106e5565b336001600160a01b038216148061079f575061079f81336104ea565b6108115760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106e5565b61081b8383611ddd565b505050565b6000805b828110156108c957600084848381811061084057610840612eb5565b9050602002013590506108596108533390565b82611e4b565b6108755760405162461bcd60e51b81526004016106e590612ecb565b60008181526012602052604081205561088d81611f3e565b60405181907fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb90600090a2506108c281612f2e565b9050610824565b5060019392505050565b600080821161091d5760405162461bcd60e51b8152602060048201526016602482015275115490cdcc8c4e881b5a5cdcda5b99c8185b5bdd5b9d60521b60448201526064016106e5565b821580159061093957506000838152600f602052604090205415155b6109555760405162461bcd60e51b81526004016106e590612f49565b600d546001600160a01b03163314610a0157336000908152600c602090815260408083208684529091529020548211156109d15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a206e6f74206d696e74657227732063616c6c696e670000000060448201526064016106e5565b336000908152600c60209081526040808320868452909152812080548492906109fb908490612f77565b90915550505b6000838152600f6020526040902060048101546005909101548391610a269190611f4a565b1015610a445760405162461bcd60e51b81526004016106e590612f8e565b6000838152600f602052604081206004018054849290610a65908490612fd2565b9091555060009050805b83811015610ac257610a85600e80546001019055565b600e546000818152601260205260409020869055601454909250610ab2906001600160a01b031683611f5d565b610abb81612f2e565b9050610a6f565b5060408051858152602081018590527f20b9ec4cf5d5efbd4a139af041f94cea204bba8485660cff6a37cc30735a5fe9910160405180910390a19392505050565b610b0c33610853565b610b285760405162461bcd60e51b81526004016106e590612fea565b61081b8383836120ab565b6000610b3e836110af565b8210610ba05760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016106e5565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b60138054610bd690612e7a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0290612e7a565b8015610c4f5780601f10610c2457610100808354040283529160200191610c4f565b820191906000526020600020905b815481529060010190602001808311610c3257829003601f168201915b505050505081565b61081b838383604051806020016040528060008152506114d7565b6000610c7f335b83611e4b565b610c9b5760405162461bcd60e51b81526004016106e590612ecb565b600082815260126020526040812055610cb382611f3e565b60405182907fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb90600090a2506001919050565b6000610cf160085490565b8210610d545760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016106e5565b60088281548110610d6757610d67612eb5565b90600052602060002001549050919050565b60606001600160a01b038216610d8e57600080fd5b6000610d99836110af565b905060008167ffffffffffffffff811115610db657610db6612b53565b604051908082528060200260200182016040528015610ddf578160200160208202803683370190505b50905060005b82811015610e3657610e07856001610dfd8487612f77565b6103069190612f77565b828281518110610e1957610e19612eb5565b602090810291909101015280610e2e81612f2e565b915050610de5565b509392505050565b600b546201000090046001600160a01b0316336001600160a01b031614610e775760405162461bcd60e51b81526004016106e59061303b565b8051610e8a906013906020840190612855565b5050565b600b546201000090046001600160a01b0316336001600160a01b031614610ec75760405162461bcd60e51b81526004016106e59061303b565b6001600160a01b038116610f2c5760405162461bcd60e51b815260206004820152602660248201527f5468652061646472657373206f6620426c696e6420426f7820746f6b656e20696044820152651cc81b9d5b1b60d21b60648201526084016106e5565b601480546001600160a01b0319166001600160a01b0383169081179091556040519081527fc2d6e5aa65a6a82749a98248a03c62d85dceda00a7bdd681867e8783cf0f8362906020015b60405180910390a150565b6000818152600260205260408120546001600160a01b0316806105d85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106e5565b600b546201000090046001600160a01b0316336001600160a01b0316146110315760405162461bcd60e51b81526004016106e59061303b565b6001600160a01b0381166110575760405162461bcd60e51b81526004016106e590613068565b600b805462010000600160b01b031916620100006001600160a01b038416908102919091179091556040519081527f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190602001610f76565b60006001600160a01b03821661111a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106e5565b506001600160a01b031660009081526003602052604090205490565b6060600180546105ed90612e7a565b600b546201000090046001600160a01b0316336001600160a01b03161461117e5760405162461bcd60e51b81526004016106e59061303b565b841580159061119957506000858152600f6020526040902054155b6111b55760405162461bcd60e51b81526004016106e590612f49565b6111c0601086612252565b506040805160e0810182528681526020808201878152828401878152606084018b815260006080860181905260a0860189905260c086018890528b8152600f85529590952084518155915160018301555160028201559251805192939261122d9260038501920190612855565b506080820151600482015560a0820151600582015560c0820151805161125d916006840191602090910190612855565b505050505050505050565b6000811580159061128657506000828152600f602052604090205415155b6112a25760405162461bcd60e51b81526004016106e590612f49565b600d546001600160a01b0316331461134c57336000908152600c6020908152604080832085845290915290205461131b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a206e6f74206d696e74657227732063616c6c696e670000000060448201526064016106e5565b336000908152600c602090815260408083208584529091528120805460019290611346908490612f77565b90915550505b6000828152600f602052604090206005810154600490910154106113825760405162461bcd60e51b81526004016106e590612f8e565b6000828152600f602052604081206004018054600192906113a4908490612fd2565b9091555050600e8054600101905560006113bd600e5490565b90507f07883703ed0e86588a40d76551c92f8a4b329e3bf19765e0e6749473c1a84665836040516113f091815260200190565b60405180910390a160008181526012602052604090208390556014546105d8906001600160a01b031682611f5d565b610e8a33838361225e565b600b546201000090046001600160a01b0316336001600160a01b0316146114635760405162461bcd60e51b81526004016106e59061303b565b6001600160a01b0381166114895760405162461bcd60e51b81526004016106e590613068565b600d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fd4f3adbf0b736e108a3a5cd8d42edef56c28856b9806e8eda50a0acc1097e9fb90602001610f76565b6114e033610c79565b6114fc5760405162461bcd60e51b81526004016106e590612fea565b6115088484848461232d565b50505050565b600b546201000090046001600160a01b0316336001600160a01b0316146115475760405162461bcd60e51b81526004016106e59061303b565b6001600160a01b03831661156d5760405162461bcd60e51b81526004016106e590613068565b816115b05760405162461bcd60e51b8152602060048201526013602482015272151a194818d85c99125917c81a5cc81b9d5b1b606a1b60448201526064016106e5565b806115f35760405162461bcd60e51b8152602060048201526013602482015272151a1948185b5bdd5b9d17c81a5cc81b9d5b1b606a1b60448201526064016106e5565b6001600160a01b0383166000818152600c602090815260408083208684528252918290208490558151928352820184905281018290527f0561e3bc0e85ba2a46eebd611c60cd166c9080d8b53ba0ce668aad6c54df6ec59060600160405180910390a1505050565b6000818152600260205260409020546060906001600160a01b03166116da5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106e5565b6000828152601260209081526040808320548352600f9091528120600601805461170390612e7a565b80601f016020809104026020016040519081016040528092919081815260200182805461172f90612e7a565b801561177c5780601f106117515761010080835404028352916020019161177c565b820191906000526020600020905b81548152906001019060200180831161175f57829003601f168201915b50505050509050600061178d612360565b9050600081511161179e57816117c1565b80826040516020016117b1929190613095565b6040516020818303038152906040525b949350505050565b600b546201000090046001600160a01b0316336001600160a01b0316146118025760405162461bcd60e51b81526004016106e59061303b565b841580159061181e57506000858152600f602052604090205415155b61183a5760405162461bcd60e51b81526004016106e590612f49565b6000858152600f602052604090206004015482116118ad5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a206d6178416d6f756e74206c657373207468616e2063757272604482015269195b9d08185b5bdd5b9d60b21b60648201526084016106e5565b6000858152600f6020908152604090912087516118d292600390920191890190612855565b506000858152600f60209081526040909120600181018690556002810185905560058101849055825161190d92600690920191840190612855565b50505050505050565b600b546201000090046001600160a01b0316336001600160a01b03161461194f5760405162461bcd60e51b81526004016106e59061303b565b600b54610100900460ff1661196a57600b5460ff161561196e565b303b155b6119d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106e5565b600b54610100900460ff161580156119f357600b805461ffff19166101011790555b6119fc83610e8e565b8151611a0f906013906020850190612855565b50801561081b57600b805461ff0019169055505050565b600b546201000090046001600160a01b0316336001600160a01b031614611a5f5760405162461bcd60e51b81526004016106e59061303b565b6001600160a01b038216611a7257600080fd5b6001600160a01b038316611a8557600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b158015611ac757600080fd5b505afa158015611adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aff91906130c4565b905081811015611b0d578091505b60005b82811015611c1957604051632f745c5960e01b8152306004820152600060248201819052906001600160a01b03871690632f745c599060440160206040518083038186803b158015611b6157600080fd5b505afa158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9991906130c4565b604051632142170760e11b81523060048201526001600160a01b03878116602483015260448201839052919250908716906342842e0e90606401600060405180830381600087803b158015611bed57600080fd5b505af1158015611c01573d6000803e3d6000fd5b50505050508080611c1190612f2e565b915050611b10565b50604080516001600160a01b038087168252851660208201529081018390527f4353fd48ccf9fce9a5e548dea48c94142c8ca07352c78a006e0aca2ac650dc129060600160405180910390a150505050565b600f60205260009081526040902080546001820154600283015460038401805493949293919291611c9b90612e7a565b80601f0160208091040260200160405190810160405280929190818152602001828054611cc790612e7a565b8015611d145780601f10611ce957610100808354040283529160200191611d14565b820191906000526020600020905b815481529060010190602001808311611cf757829003601f168201915b505050505090806004015490806005015490806006018054611d3590612e7a565b80601f0160208091040260200160405190810160405280929190818152602001828054611d6190612e7a565b8015611dae5780601f10611d8357610100808354040283529160200191611dae565b820191906000526020600020905b815481529060010190602001808311611d9157829003601f168201915b5050505050905087565b60006001600160e01b0319821663780e9d6360e01b14806105d857506105d88261236f565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611e1282610f81565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611ec45760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106e5565b6000611ecf83610f81565b9050806001600160a01b0316846001600160a01b03161480611f0a5750836001600160a01b0316611eff84610670565b6001600160a01b0316145b806117c157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff166117c1565b611f47816123bf565b50565b6000611f568284612f77565b9392505050565b6001600160a01b038216611fb35760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106e5565b6000818152600260205260409020546001600160a01b0316156120185760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106e5565b612024600083836123ff565b6001600160a01b038216600090815260036020526040812080546001929061204d908490612fd2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b826001600160a01b03166120be82610f81565b6001600160a01b0316146121225760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016106e5565b6001600160a01b0382166121845760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106e5565b61218f8383836123ff565b61219a600082611ddd565b6001600160a01b03831660009081526003602052604081208054600192906121c3908490612f77565b90915550506001600160a01b03821660009081526003602052604081208054600192906121f1908490612fd2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000611f56838361240a565b816001600160a01b0316836001600160a01b031614156122c05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106e5565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6123388484846120ab565b61234484848484612459565b6115085760405162461bcd60e51b81526004016106e5906130dd565b6060601380546105ed90612e7a565b60006001600160e01b031982166380ac58cd60e01b14806123a057506001600160e01b03198216635b5e139f60e01b145b806105d857506301ffc9a760e01b6001600160e01b03198316146105d8565b6123c881612566565b6000818152600a6020526040902080546123e190612e7a565b159050611f47576000818152600a60205260408120611f47916128d9565b61081b83838361260d565b6000818152600183016020526040812054612451575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105d8565b5060006105d8565b60006001600160a01b0384163b1561255b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061249d90339089908890889060040161312f565b602060405180830381600087803b1580156124b757600080fd5b505af19250505080156124e7575060408051601f3d908101601f191682019092526124e49181019061316c565b60015b612541573d808015612515576040519150601f19603f3d011682016040523d82523d6000602084013e61251a565b606091505b5080516125395760405162461bcd60e51b81526004016106e5906130dd565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506117c1565b506001949350505050565b600061257182610f81565b905061257f816000846123ff565b61258a600083611ddd565b6001600160a01b03811660009081526003602052604081208054600192906125b3908490612f77565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383166126685761266381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61268b565b816001600160a01b0316836001600160a01b03161461268b5761268b83826126c5565b6001600160a01b0382166126a25761081b81612762565b826001600160a01b0316826001600160a01b03161461081b5761081b8282612811565b600060016126d2846110af565b6126dc9190612f77565b60008381526007602052604090205490915080821461272f576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061277490600190612f77565b6000838152600960205260408120546008805493945090928490811061279c5761279c612eb5565b9060005260206000200154905080600883815481106127bd576127bd612eb5565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806127f5576127f5613189565b6001900381819060005260206000200160009055905550505050565b600061281c836110af565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b82805461286190612e7a565b90600052602060002090601f01602090048101928261288357600085556128c9565b82601f1061289c57805160ff19168380011785556128c9565b828001600101855582156128c9579182015b828111156128c95782518255916020019190600101906128ae565b506128d592915061290f565b5090565b5080546128e590612e7a565b6000825580601f106128f5575050565b601f016020900490600052602060002090810190611f4791905b5b808211156128d55760008155600101612910565b6001600160e01b031981168114611f4757600080fd5b60006020828403121561294c57600080fd5b8135611f5681612924565b60005b8381101561297257818101518382015260200161295a565b838111156115085750506000910152565b6000815180845261299b816020860160208601612957565b601f01601f19169290920160200192915050565b602081526000611f566020830184612983565b6000602082840312156129d457600080fd5b5035919050565b80356001600160a01b03811681146129f257600080fd5b919050565b60008060408385031215612a0a57600080fd5b612a13836129db565b946020939093013593505050565b60008060208385031215612a3457600080fd5b823567ffffffffffffffff80821115612a4c57600080fd5b818501915085601f830112612a6057600080fd5b813581811115612a6f57600080fd5b8660208260051b8501011115612a8457600080fd5b60209290920196919550909350505050565b60008060408385031215612aa957600080fd5b50508035926020909101359150565b600080600060608486031215612acd57600080fd5b612ad6846129db565b9250612ae4602085016129db565b9150604084013590509250925092565b600060208284031215612b0657600080fd5b611f56826129db565b6020808252825182820181905260009190848201906040850190845b81811015612b4757835183529284019291840191600101612b2b565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612b8457612b84612b53565b604051601f8501601f19908116603f01168101908282118183101715612bac57612bac612b53565b81604052809350858152868686011115612bc557600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112612bf057600080fd5b611f5683833560208501612b69565b600060208284031215612c1157600080fd5b813567ffffffffffffffff811115612c2857600080fd5b6117c184828501612bdf565b60008060008060008060c08789031215612c4d57600080fd5b863567ffffffffffffffff80821115612c6557600080fd5b612c718a838b01612bdf565b97506020890135965060408901359550606089013594506080890135935060a0890135915080821115612ca357600080fd5b50612cb089828a01612bdf565b9150509295509295509295565b60008060408385031215612cd057600080fd5b612cd9836129db565b915060208301358015158114612cee57600080fd5b809150509250929050565b60008060008060808587031215612d0f57600080fd5b612d18856129db565b9350612d26602086016129db565b925060408501359150606085013567ffffffffffffffff811115612d4957600080fd5b8501601f81018713612d5a57600080fd5b612d6987823560208401612b69565b91505092959194509250565b600080600060608486031215612d8a57600080fd5b612d93846129db565b95602085013595506040909401359392505050565b60008060408385031215612dbb57600080fd5b612dc4836129db565b9150612dd2602084016129db565b90509250929050565b60008060408385031215612dee57600080fd5b612df7836129db565b9150602083013567ffffffffffffffff811115612e1357600080fd5b612e1f85828601612bdf565b9150509250929050565b87815286602082015285604082015260e060608201526000612e4e60e0830187612983565b8560808401528460a084015282810360c0840152612e6c8185612983565b9a9950505050505050505050565b600181811c90821680612e8e57607f821691505b60208210811415612eaf57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6020808252602d908201527f4552433732313a206275726e2063616c6c6572206973206e6f74206f776e657260408201526c081b9bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612f4257612f42612f18565b5060010190565b602080825260149082015273115490cdcc8c4e881ddc9bdb99c818d85c99125960621b604082015260600190565b600082821015612f8957612f89612f18565b500390565b60208082526024908201527f4552433732313a20546f6b656e20616d6f756e74206973206f7574206f66206c6040820152631a5b5a5d60e21b606082015260800190565b60008219821115612fe557612fe5612f18565b500190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601390820152726e6f742041646d696e27732063616c6c696e6760681b604082015260600190565b602080825260139082015272151a19481859191c995cdcc81a5cc81b9d5b1b606a1b604082015260600190565b600083516130a7818460208801612957565b8351908301906130bb818360208801612957565b01949350505050565b6000602082840312156130d657600080fd5b5051919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061316290830184612983565b9695505050505050565b60006020828403121561317e57600080fd5b8151611f5681612924565b634e487b7160e01b600052603160045260246000fdfea264697066735822122038fc2e6cdfaa68067147b95c3ee15dd32757150f8f1fdd3f7fe06ca7ecb47ef564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c80636a4aeeb811610130578063b41d74d8116100b8578063e985e9c51161007c578063e985e9c5146104dc578063f399e22e14610518578063f9b3dd081461052b578063fbfe5e0d1461053e578063ff1b636d1461056457600080fd5b8063b41d74d81461047d578063b88d4fde14610490578063bb2fa28c146104a3578063c87b56dd146104b6578063ce954370146104c957600080fd5b80639239eb27116100ff5780639239eb271461041c57806395d89b411461043c578063995e5e7814610444578063a0712d6814610457578063a22cb4651461046a57600080fd5b80636a4aeeb8146103b8578063704b6c02146103cb57806370a08231146103de57806378746d0d146103f157600080fd5b8063372a3b82116101b35780635258495711610182578063525849571461034c5780635dcce2341461036c5780635f7c85431461037f57806362e42cb0146103925780636352211e146103a557600080fd5b8063372a3b821461030b57806342842e0e1461031357806342966c68146103265780634f6ccce71461033957600080fd5b806309ab0442116101fa57806309ab0442146102a957806317c0825e146102bc57806318160ddd146102dd57806323b872dd146102e55780632f745c59146102f857600080fd5b806301ffc9a71461022c57806306fdde0314610254578063081812fc14610269578063095ea7b314610294575b600080fd5b61023f61023a36600461293a565b61057d565b60405190151581526020015b60405180910390f35b61025c6105de565b60405161024b91906129af565b61027c6102773660046129c2565b610670565b6040516001600160a01b03909116815260200161024b565b6102a76102a23660046129f7565b61070a565b005b61023f6102b7366004612a21565b610820565b6102cf6102ca366004612a96565b6108d3565b60405190815260200161024b565b6008546102cf565b6102a76102f3366004612ab8565b610b03565b6102cf6103063660046129f7565b610b33565b61025c610bc9565b6102a7610321366004612ab8565b610c57565b61023f6103343660046129c2565b610c72565b6102cf6103473660046129c2565b610ce6565b61035f61035a366004612af4565b610d79565b60405161024b9190612b0f565b6102a761037a366004612bff565b610e3e565b6102a761038d366004612af4565b610e8e565b600d5461027c906001600160a01b031681565b61027c6103b33660046129c2565b610f81565b60145461027c906001600160a01b031681565b6102a76103d9366004612af4565b610ff8565b6102cf6103ec366004612af4565b6110af565b6102cf6103ff3660046129f7565b600c60209081526000928352604080842090915290825290205481565b6102cf61042a3660046129c2565b60126020526000908152604090205481565b61025c611136565b6102a7610452366004612c34565b611145565b6102cf6104653660046129c2565b611268565b6102a7610478366004612cbd565b61141f565b6102a761048b366004612af4565b61142a565b6102a761049e366004612cf9565b6114d7565b6102a76104b1366004612d75565b61150e565b61025c6104c43660046129c2565b61165b565b6102a76104d7366004612c34565b6117c9565b61023f6104ea366004612da8565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102a7610526366004612ddb565b611916565b6102a7610539366004612ab8565b611a26565b61055161054c3660046129c2565b611c6b565b60405161024b9796959493929190612e29565b600b5461027c906201000090046001600160a01b031681565b60006001600160e01b031982166380ac58cd60e01b14806105ae57506001600160e01b0319821663780e9d6360e01b145b806105c957506001600160e01b03198216635b5e139f60e01b145b806105d857506105d882611db8565b92915050565b6060600080546105ed90612e7a565b80601f016020809104026020016040519081016040528092919081815260200182805461061990612e7a565b80156106665780601f1061063b57610100808354040283529160200191610666565b820191906000526020600020905b81548152906001019060200180831161064957829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106ee5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061071582610f81565b9050806001600160a01b0316836001600160a01b031614156107835760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106e5565b336001600160a01b038216148061079f575061079f81336104ea565b6108115760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106e5565b61081b8383611ddd565b505050565b6000805b828110156108c957600084848381811061084057610840612eb5565b9050602002013590506108596108533390565b82611e4b565b6108755760405162461bcd60e51b81526004016106e590612ecb565b60008181526012602052604081205561088d81611f3e565b60405181907fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb90600090a2506108c281612f2e565b9050610824565b5060019392505050565b600080821161091d5760405162461bcd60e51b8152602060048201526016602482015275115490cdcc8c4e881b5a5cdcda5b99c8185b5bdd5b9d60521b60448201526064016106e5565b821580159061093957506000838152600f602052604090205415155b6109555760405162461bcd60e51b81526004016106e590612f49565b600d546001600160a01b03163314610a0157336000908152600c602090815260408083208684529091529020548211156109d15760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a206e6f74206d696e74657227732063616c6c696e670000000060448201526064016106e5565b336000908152600c60209081526040808320868452909152812080548492906109fb908490612f77565b90915550505b6000838152600f6020526040902060048101546005909101548391610a269190611f4a565b1015610a445760405162461bcd60e51b81526004016106e590612f8e565b6000838152600f602052604081206004018054849290610a65908490612fd2565b9091555060009050805b83811015610ac257610a85600e80546001019055565b600e546000818152601260205260409020869055601454909250610ab2906001600160a01b031683611f5d565b610abb81612f2e565b9050610a6f565b5060408051858152602081018590527f20b9ec4cf5d5efbd4a139af041f94cea204bba8485660cff6a37cc30735a5fe9910160405180910390a19392505050565b610b0c33610853565b610b285760405162461bcd60e51b81526004016106e590612fea565b61081b8383836120ab565b6000610b3e836110af565b8210610ba05760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016106e5565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b60138054610bd690612e7a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0290612e7a565b8015610c4f5780601f10610c2457610100808354040283529160200191610c4f565b820191906000526020600020905b815481529060010190602001808311610c3257829003601f168201915b505050505081565b61081b838383604051806020016040528060008152506114d7565b6000610c7f335b83611e4b565b610c9b5760405162461bcd60e51b81526004016106e590612ecb565b600082815260126020526040812055610cb382611f3e565b60405182907fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb90600090a2506001919050565b6000610cf160085490565b8210610d545760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016106e5565b60088281548110610d6757610d67612eb5565b90600052602060002001549050919050565b60606001600160a01b038216610d8e57600080fd5b6000610d99836110af565b905060008167ffffffffffffffff811115610db657610db6612b53565b604051908082528060200260200182016040528015610ddf578160200160208202803683370190505b50905060005b82811015610e3657610e07856001610dfd8487612f77565b6103069190612f77565b828281518110610e1957610e19612eb5565b602090810291909101015280610e2e81612f2e565b915050610de5565b509392505050565b600b546201000090046001600160a01b0316336001600160a01b031614610e775760405162461bcd60e51b81526004016106e59061303b565b8051610e8a906013906020840190612855565b5050565b600b546201000090046001600160a01b0316336001600160a01b031614610ec75760405162461bcd60e51b81526004016106e59061303b565b6001600160a01b038116610f2c5760405162461bcd60e51b815260206004820152602660248201527f5468652061646472657373206f6620426c696e6420426f7820746f6b656e20696044820152651cc81b9d5b1b60d21b60648201526084016106e5565b601480546001600160a01b0319166001600160a01b0383169081179091556040519081527fc2d6e5aa65a6a82749a98248a03c62d85dceda00a7bdd681867e8783cf0f8362906020015b60405180910390a150565b6000818152600260205260408120546001600160a01b0316806105d85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106e5565b600b546201000090046001600160a01b0316336001600160a01b0316146110315760405162461bcd60e51b81526004016106e59061303b565b6001600160a01b0381166110575760405162461bcd60e51b81526004016106e590613068565b600b805462010000600160b01b031916620100006001600160a01b038416908102919091179091556040519081527f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190602001610f76565b60006001600160a01b03821661111a5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106e5565b506001600160a01b031660009081526003602052604090205490565b6060600180546105ed90612e7a565b600b546201000090046001600160a01b0316336001600160a01b03161461117e5760405162461bcd60e51b81526004016106e59061303b565b841580159061119957506000858152600f6020526040902054155b6111b55760405162461bcd60e51b81526004016106e590612f49565b6111c0601086612252565b506040805160e0810182528681526020808201878152828401878152606084018b815260006080860181905260a0860189905260c086018890528b8152600f85529590952084518155915160018301555160028201559251805192939261122d9260038501920190612855565b506080820151600482015560a0820151600582015560c0820151805161125d916006840191602090910190612855565b505050505050505050565b6000811580159061128657506000828152600f602052604090205415155b6112a25760405162461bcd60e51b81526004016106e590612f49565b600d546001600160a01b0316331461134c57336000908152600c6020908152604080832085845290915290205461131b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a206e6f74206d696e74657227732063616c6c696e670000000060448201526064016106e5565b336000908152600c602090815260408083208584529091528120805460019290611346908490612f77565b90915550505b6000828152600f602052604090206005810154600490910154106113825760405162461bcd60e51b81526004016106e590612f8e565b6000828152600f602052604081206004018054600192906113a4908490612fd2565b9091555050600e8054600101905560006113bd600e5490565b90507f07883703ed0e86588a40d76551c92f8a4b329e3bf19765e0e6749473c1a84665836040516113f091815260200190565b60405180910390a160008181526012602052604090208390556014546105d8906001600160a01b031682611f5d565b610e8a33838361225e565b600b546201000090046001600160a01b0316336001600160a01b0316146114635760405162461bcd60e51b81526004016106e59061303b565b6001600160a01b0381166114895760405162461bcd60e51b81526004016106e590613068565b600d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fd4f3adbf0b736e108a3a5cd8d42edef56c28856b9806e8eda50a0acc1097e9fb90602001610f76565b6114e033610c79565b6114fc5760405162461bcd60e51b81526004016106e590612fea565b6115088484848461232d565b50505050565b600b546201000090046001600160a01b0316336001600160a01b0316146115475760405162461bcd60e51b81526004016106e59061303b565b6001600160a01b03831661156d5760405162461bcd60e51b81526004016106e590613068565b816115b05760405162461bcd60e51b8152602060048201526013602482015272151a194818d85c99125917c81a5cc81b9d5b1b606a1b60448201526064016106e5565b806115f35760405162461bcd60e51b8152602060048201526013602482015272151a1948185b5bdd5b9d17c81a5cc81b9d5b1b606a1b60448201526064016106e5565b6001600160a01b0383166000818152600c602090815260408083208684528252918290208490558151928352820184905281018290527f0561e3bc0e85ba2a46eebd611c60cd166c9080d8b53ba0ce668aad6c54df6ec59060600160405180910390a1505050565b6000818152600260205260409020546060906001600160a01b03166116da5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106e5565b6000828152601260209081526040808320548352600f9091528120600601805461170390612e7a565b80601f016020809104026020016040519081016040528092919081815260200182805461172f90612e7a565b801561177c5780601f106117515761010080835404028352916020019161177c565b820191906000526020600020905b81548152906001019060200180831161175f57829003601f168201915b50505050509050600061178d612360565b9050600081511161179e57816117c1565b80826040516020016117b1929190613095565b6040516020818303038152906040525b949350505050565b600b546201000090046001600160a01b0316336001600160a01b0316146118025760405162461bcd60e51b81526004016106e59061303b565b841580159061181e57506000858152600f602052604090205415155b61183a5760405162461bcd60e51b81526004016106e590612f49565b6000858152600f602052604090206004015482116118ad5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a206d6178416d6f756e74206c657373207468616e2063757272604482015269195b9d08185b5bdd5b9d60b21b60648201526084016106e5565b6000858152600f6020908152604090912087516118d292600390920191890190612855565b506000858152600f60209081526040909120600181018690556002810185905560058101849055825161190d92600690920191840190612855565b50505050505050565b600b546201000090046001600160a01b0316336001600160a01b03161461194f5760405162461bcd60e51b81526004016106e59061303b565b600b54610100900460ff1661196a57600b5460ff161561196e565b303b155b6119d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106e5565b600b54610100900460ff161580156119f357600b805461ffff19166101011790555b6119fc83610e8e565b8151611a0f906013906020850190612855565b50801561081b57600b805461ff0019169055505050565b600b546201000090046001600160a01b0316336001600160a01b031614611a5f5760405162461bcd60e51b81526004016106e59061303b565b6001600160a01b038216611a7257600080fd5b6001600160a01b038316611a8557600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b158015611ac757600080fd5b505afa158015611adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aff91906130c4565b905081811015611b0d578091505b60005b82811015611c1957604051632f745c5960e01b8152306004820152600060248201819052906001600160a01b03871690632f745c599060440160206040518083038186803b158015611b6157600080fd5b505afa158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9991906130c4565b604051632142170760e11b81523060048201526001600160a01b03878116602483015260448201839052919250908716906342842e0e90606401600060405180830381600087803b158015611bed57600080fd5b505af1158015611c01573d6000803e3d6000fd5b50505050508080611c1190612f2e565b915050611b10565b50604080516001600160a01b038087168252851660208201529081018390527f4353fd48ccf9fce9a5e548dea48c94142c8ca07352c78a006e0aca2ac650dc129060600160405180910390a150505050565b600f60205260009081526040902080546001820154600283015460038401805493949293919291611c9b90612e7a565b80601f0160208091040260200160405190810160405280929190818152602001828054611cc790612e7a565b8015611d145780601f10611ce957610100808354040283529160200191611d14565b820191906000526020600020905b815481529060010190602001808311611cf757829003601f168201915b505050505090806004015490806005015490806006018054611d3590612e7a565b80601f0160208091040260200160405190810160405280929190818152602001828054611d6190612e7a565b8015611dae5780601f10611d8357610100808354040283529160200191611dae565b820191906000526020600020905b815481529060010190602001808311611d9157829003601f168201915b5050505050905087565b60006001600160e01b0319821663780e9d6360e01b14806105d857506105d88261236f565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611e1282610f81565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611ec45760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106e5565b6000611ecf83610f81565b9050806001600160a01b0316846001600160a01b03161480611f0a5750836001600160a01b0316611eff84610670565b6001600160a01b0316145b806117c157506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff166117c1565b611f47816123bf565b50565b6000611f568284612f77565b9392505050565b6001600160a01b038216611fb35760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106e5565b6000818152600260205260409020546001600160a01b0316156120185760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106e5565b612024600083836123ff565b6001600160a01b038216600090815260036020526040812080546001929061204d908490612fd2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b826001600160a01b03166120be82610f81565b6001600160a01b0316146121225760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016106e5565b6001600160a01b0382166121845760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106e5565b61218f8383836123ff565b61219a600082611ddd565b6001600160a01b03831660009081526003602052604081208054600192906121c3908490612f77565b90915550506001600160a01b03821660009081526003602052604081208054600192906121f1908490612fd2565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000611f56838361240a565b816001600160a01b0316836001600160a01b031614156122c05760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106e5565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6123388484846120ab565b61234484848484612459565b6115085760405162461bcd60e51b81526004016106e5906130dd565b6060601380546105ed90612e7a565b60006001600160e01b031982166380ac58cd60e01b14806123a057506001600160e01b03198216635b5e139f60e01b145b806105d857506301ffc9a760e01b6001600160e01b03198316146105d8565b6123c881612566565b6000818152600a6020526040902080546123e190612e7a565b159050611f47576000818152600a60205260408120611f47916128d9565b61081b83838361260d565b6000818152600183016020526040812054612451575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105d8565b5060006105d8565b60006001600160a01b0384163b1561255b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061249d90339089908890889060040161312f565b602060405180830381600087803b1580156124b757600080fd5b505af19250505080156124e7575060408051601f3d908101601f191682019092526124e49181019061316c565b60015b612541573d808015612515576040519150601f19603f3d011682016040523d82523d6000602084013e61251a565b606091505b5080516125395760405162461bcd60e51b81526004016106e5906130dd565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506117c1565b506001949350505050565b600061257182610f81565b905061257f816000846123ff565b61258a600083611ddd565b6001600160a01b03811660009081526003602052604081208054600192906125b3908490612f77565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383166126685761266381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61268b565b816001600160a01b0316836001600160a01b03161461268b5761268b83826126c5565b6001600160a01b0382166126a25761081b81612762565b826001600160a01b0316826001600160a01b03161461081b5761081b8282612811565b600060016126d2846110af565b6126dc9190612f77565b60008381526007602052604090205490915080821461272f576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061277490600190612f77565b6000838152600960205260408120546008805493945090928490811061279c5761279c612eb5565b9060005260206000200154905080600883815481106127bd576127bd612eb5565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806127f5576127f5613189565b6001900381819060005260206000200160009055905550505050565b600061281c836110af565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b82805461286190612e7a565b90600052602060002090601f01602090048101928261288357600085556128c9565b82601f1061289c57805160ff19168380011785556128c9565b828001600101855582156128c9579182015b828111156128c95782518255916020019190600101906128ae565b506128d592915061290f565b5090565b5080546128e590612e7a565b6000825580601f106128f5575050565b601f016020900490600052602060002090810190611f4791905b5b808211156128d55760008155600101612910565b6001600160e01b031981168114611f4757600080fd5b60006020828403121561294c57600080fd5b8135611f5681612924565b60005b8381101561297257818101518382015260200161295a565b838111156115085750506000910152565b6000815180845261299b816020860160208601612957565b601f01601f19169290920160200192915050565b602081526000611f566020830184612983565b6000602082840312156129d457600080fd5b5035919050565b80356001600160a01b03811681146129f257600080fd5b919050565b60008060408385031215612a0a57600080fd5b612a13836129db565b946020939093013593505050565b60008060208385031215612a3457600080fd5b823567ffffffffffffffff80821115612a4c57600080fd5b818501915085601f830112612a6057600080fd5b813581811115612a6f57600080fd5b8660208260051b8501011115612a8457600080fd5b60209290920196919550909350505050565b60008060408385031215612aa957600080fd5b50508035926020909101359150565b600080600060608486031215612acd57600080fd5b612ad6846129db565b9250612ae4602085016129db565b9150604084013590509250925092565b600060208284031215612b0657600080fd5b611f56826129db565b6020808252825182820181905260009190848201906040850190845b81811015612b4757835183529284019291840191600101612b2b565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612b8457612b84612b53565b604051601f8501601f19908116603f01168101908282118183101715612bac57612bac612b53565b81604052809350858152868686011115612bc557600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112612bf057600080fd5b611f5683833560208501612b69565b600060208284031215612c1157600080fd5b813567ffffffffffffffff811115612c2857600080fd5b6117c184828501612bdf565b60008060008060008060c08789031215612c4d57600080fd5b863567ffffffffffffffff80821115612c6557600080fd5b612c718a838b01612bdf565b97506020890135965060408901359550606089013594506080890135935060a0890135915080821115612ca357600080fd5b50612cb089828a01612bdf565b9150509295509295509295565b60008060408385031215612cd057600080fd5b612cd9836129db565b915060208301358015158114612cee57600080fd5b809150509250929050565b60008060008060808587031215612d0f57600080fd5b612d18856129db565b9350612d26602086016129db565b925060408501359150606085013567ffffffffffffffff811115612d4957600080fd5b8501601f81018713612d5a57600080fd5b612d6987823560208401612b69565b91505092959194509250565b600080600060608486031215612d8a57600080fd5b612d93846129db565b95602085013595506040909401359392505050565b60008060408385031215612dbb57600080fd5b612dc4836129db565b9150612dd2602084016129db565b90509250929050565b60008060408385031215612dee57600080fd5b612df7836129db565b9150602083013567ffffffffffffffff811115612e1357600080fd5b612e1f85828601612bdf565b9150509250929050565b87815286602082015285604082015260e060608201526000612e4e60e0830187612983565b8560808401528460a084015282810360c0840152612e6c8185612983565b9a9950505050505050505050565b600181811c90821680612e8e57607f821691505b60208210811415612eaf57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6020808252602d908201527f4552433732313a206275726e2063616c6c6572206973206e6f74206f776e657260408201526c081b9bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612f4257612f42612f18565b5060010190565b602080825260149082015273115490cdcc8c4e881ddc9bdb99c818d85c99125960621b604082015260600190565b600082821015612f8957612f89612f18565b500390565b60208082526024908201527f4552433732313a20546f6b656e20616d6f756e74206973206f7574206f66206c6040820152631a5b5a5d60e21b606082015260800190565b60008219821115612fe557612fe5612f18565b500190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601390820152726e6f742041646d696e27732063616c6c696e6760681b604082015260600190565b602080825260139082015272151a19481859191c995cdcc81a5cc81b9d5b1b606a1b604082015260600190565b600083516130a7818460208801612957565b8351908301906130bb818360208801612957565b01949350505050565b6000602082840312156130d657600080fd5b5051919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061316290830184612983565b9695505050505050565b60006020828403121561317e57600080fd5b8151611f5681612924565b634e487b7160e01b600052603160045260246000fdfea264697066735822122038fc2e6cdfaa68067147b95c3ee15dd32757150f8f1fdd3f7fe06ca7ecb47ef564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2905,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2907,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2911,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2915,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2919,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2925,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3924,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3928,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3931,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3935,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4297,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 882,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_initialized",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 885,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_initializing",
        "offset": 1,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 7183,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "Admin",
        "offset": 2,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 7189,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "minters",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 7191,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "superMinter",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 7368,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(Counter)4820_storage"
      },
      {
        "astId": 7388,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "cardInfoes",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(CardInfo)7383_storage)"
      },
      {
        "astId": 7391,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "cardIds",
        "offset": 0,
        "slot": "16",
        "type": "t_struct(UintSet)6950_storage"
      },
      {
        "astId": 7395,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "cardIdMap",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7397,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "myBaseURI",
        "offset": 0,
        "slot": "19",
        "type": "t_string_storage"
      },
      {
        "astId": 7399,
        "contract": "contracts/DefinaCard721.sol:DefinaCard721",
        "label": "blindBox",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(CardInfo)7383_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DefinaCard721.CardInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CardInfo)7383_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CardInfo)7383_storage": {
        "encoding": "inplace",
        "label": "struct DefinaCard721.CardInfo",
        "members": [
          {
            "astId": 7370,
            "contract": "contracts/DefinaCard721.sol:DefinaCard721",
            "label": "cardId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7372,
            "contract": "contracts/DefinaCard721.sol:DefinaCard721",
            "label": "camp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7374,
            "contract": "contracts/DefinaCard721.sol:DefinaCard721",
            "label": "rarity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7376,
            "contract": "contracts/DefinaCard721.sol:DefinaCard721",
            "label": "name",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 7378,
            "contract": "contracts/DefinaCard721.sol:DefinaCard721",
            "label": "currentAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7380,
            "contract": "contracts/DefinaCard721.sol:DefinaCard721",
            "label": "maxAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7382,
            "contract": "contracts/DefinaCard721.sol:DefinaCard721",
            "label": "cardURI",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Counter)4820_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4819,
            "contract": "contracts/DefinaCard721.sol:DefinaCard721",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)6492_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 6487,
            "contract": "contracts/DefinaCard721.sol:DefinaCard721",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 6491,
            "contract": "contracts/DefinaCard721.sol:DefinaCard721",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)6950_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 6949,
            "contract": "contracts/DefinaCard721.sol:DefinaCard721",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)6492_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}