// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: msg.proto

package msg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
//10代表登录模块
//00代表请求类型
//01代表具体协议
type MsgId int32

const (
	MsgId_MSGID_BEGIN                          MsgId = 0
	MsgId_MESSAGE_CODE                         MsgId = 1
	MsgId_GM_MSG_C                             MsgId = 9901 //gm请求
	MsgId_LOGIN_C                              MsgId = 1001 //登录请求
	MsgId_LOGIN_S                              MsgId = 1002 //登录返回
	MsgId_PLAYER_DATA_C                        MsgId = 1101 //玩家信息请求
	MsgId_PLAYER_DATA_S                        MsgId = 1102 //玩家信息返回
	MsgId_UPDATE_PLAYER_NAME_C                 MsgId = 1111 //更新玩家名称请求
	MsgId_UPDATE_PLAYER_NAME_S                 MsgId = 1112 //更新玩家名称返回
	MsgId_UPDATE_PLAYER_TITLE_C                MsgId = 1121 //更新玩家称号请求
	MsgId_UPDATE_PLAYER_TITLE_S                MsgId = 1122 //更新玩家称号返回
	MsgId_UPDATE_PLAYER_IMAGE_C                MsgId = 1131 //更新玩家头像请求
	MsgId_UPDATE_PLAYER_IMAGE_S                MsgId = 1132 //更新玩家头像返回
	MsgId_UPDATE_PLAYER_IMAGE_FRAME_C          MsgId = 1141 //更新玩家头像框请求
	MsgId_UPDATE_PLAYER_IMAGE_FRAME_S          MsgId = 1142 //更新玩家头像框返回
	MsgId_HERO_LIST_C                          MsgId = 1201 //英雄列表请求
	MsgId_HERO_LIST_S                          MsgId = 1202 //英雄列表返回
	MsgId_HERO_INFO_C                          MsgId = 1211 //英雄信息请求
	MsgId_HERO_INFO_S                          MsgId = 1212 //英雄信息返回
	MsgId_UPDATE_HERO_LEVEL_C                  MsgId = 1221 //更新英雄升级请求
	MsgId_UPDATE_HERO_LEVEL_S                  MsgId = 1222 //更新英雄升级请求
	MsgId_UPDATE_HERO_SKINID_C                 MsgId = 1231 //更新英雄皮肤请求
	MsgId_UPDATE_HERO_SKINID_S                 MsgId = 1232 //更新英雄皮肤请求
	MsgId_SHOP_LIST_C                          MsgId = 1301 //商城列表请求
	MsgId_SHOP_LIST_S                          MsgId = 1302 //商城列表返回
	MsgId_SHOP_RESET_C                         MsgId = 1311 //商城列表刷新请求
	MsgId_SHOP_RESET_S                         MsgId = 1312 //商城列表刷新返回
	MsgId_SHOP_BUY_C                           MsgId = 1321 //商城购买请求
	MsgId_SHOP_BUY_S                           MsgId = 1322 //商城购买返回
	MsgId_LINEUP_LIST_C                        MsgId = 1401 //阵容列表请求
	MsgId_LINEUP_LIST_S                        MsgId = 1402 //阵容列表返回
	MsgId_UPDATE_LINEUP_LIST_C                 MsgId = 1411 //更新阵容列表请求
	MsgId_UPDATE_LINEUP_LIST_S                 MsgId = 1412 //更新阵容列表返回
	MsgId_UPDATE_LINEUP_NAME_C                 MsgId = 1421 //更新阵容名称请求
	MsgId_UPDATE_LINEUP_NAME_S                 MsgId = 1422 //更新阵容名称返回
	MsgId_TASK_LIST_C                          MsgId = 1501 //任务列表请求
	MsgId_TASK_LIST_S                          MsgId = 1502 //任务列表返回
	MsgId_TASK_FINISH_C                        MsgId = 1511 //领取任务奖励请求
	MsgId_TASK_FINISH_S                        MsgId = 1512 //领取任务奖励返回
	MsgId_TASK_TEST_C                          MsgId = 1521 //任务进度测试接口
	MsgId_TASK_TEST_S                          MsgId = 1522 //任务进度测试接口
	MsgId_UPDATE_TASK_S                        MsgId = 1532 //任务完成通知 下发
	MsgId_CARD_SCORE_C                         MsgId = 1601 //特权卡积分获取
	MsgId_CARD_SCORE_S                         MsgId = 1602 //特权卡积分返回
	MsgId_CARD_GET_REWARD_C                    MsgId = 1611 //特权卡奖励获取请求
	MsgId_CARD_GET_REWARD_S                    MsgId = 1612 //特权卡奖励获取返回
	MsgId_CARD_TEST_C                          MsgId = 1621 //特权卡进度测试接口
	MsgId_CARD_TEST_S                          MsgId = 1622 //特权卡进度测试接口
	MsgId_MAIL_LIST_C                          MsgId = 1701 //邮件列表请求
	MsgId_MAIL_LIST_S                          MsgId = 1702 //邮件列表返回
	MsgId_MAIL_READ_C                          MsgId = 1711 //邮件已读请求
	MsgId_MAIL_READ_S                          MsgId = 1712 //邮件已读返回
	MsgId_MAIL_RECEIVE_C                       MsgId = 1721 //邮件领取请求
	MsgId_MAIL_RECEIVE_S                       MsgId = 1722 //邮件领取返回
	MsgId_MAIL_S                               MsgId = 1732 //邮件下发
	MsgId_COOPERATION_CHEST_OPEN_C             MsgId = 1801 //合作宝箱打开请求
	MsgId_COOPERATION_CHEST_OPEN_S             MsgId = 1802 //合作宝箱打开返回
	MsgId_COOPERATION_CHEST_TEST_C             MsgId = 1811 //合作宝箱钥匙数量测试
	MsgId_COOPERATION_CHEST_TEST_S             MsgId = 1812 //合作宝箱钥匙数量测试
	MsgId_BATTLE_MATCH_C                       MsgId = 1901 //匹配请求
	MsgId_BATTLE_MATCH_S                       MsgId = 1902 //匹配返回
	MsgId_BATTLE_SETTLE_C                      MsgId = 1911 //战斗结算请求
	MsgId_BATTLE_SETTLE_S                      MsgId = 1912 //战斗结算返回
	MsgId_BATTLE_MATCH_CANCEL_C                MsgId = 1921 //取消匹配请求
	MsgId_BATTLE_MATCH_CANCEL_S                MsgId = 1922 //取消匹配返回
	MsgId_RANK_NORMAL_LIST_C                   MsgId = 2001 //普通对战排行请求
	MsgId_RANK_NORMAL_LIST_S                   MsgId = 2002 //普通对战排行返回
	MsgId_RANK_COOPERATION_LIST_C              MsgId = 2011 //合作模式排行请求
	MsgId_RANK_COOPERATION_LIST_S              MsgId = 2012 //合作模式排行返回
	MsgId_BATTLE_CHALLENGE_MATCH_C             MsgId = 2101 //挑战模式匹配请求
	MsgId_BATTLE_CHALLENGE_MATCH_S             MsgId = 2102 //挑战模式匹配返回
	MsgId_BATTLE_CHALLENGE_MATCH_SETTLE_C      MsgId = 2111 //挑战模式结算请求
	MsgId_BATTLE_CHALLENGE_MATCH_SETTLE_S      MsgId = 2112 //挑战模式结算返回
	MsgId_BATTLE_CHALLENGE_STATUS_C            MsgId = 2121 //挑战模式状态请求
	MsgId_BATTLE_CHALLENGE_STATUS_S            MsgId = 2122 //挑战模式状态返回
	MsgId_BATTLE_CHALLENGE_RAND_REWARD_C       MsgId = 2131 //随机竞技场奖励领取请求
	MsgId_BATTLE_CHALLENGE_RAND_REWARD_S       MsgId = 2132 //随机竞技场奖励领取返回
	MsgId_BATTLE_CHALLENGE_UNLOCK_REWARD_C     MsgId = 2141 //挑战模式解锁奖励请求
	MsgId_BATTLE_CHALLENGE_UNLOCK_REWARD_S     MsgId = 2142 //挑战模式解锁奖励返回
	MsgId_BATTLE_CHALLENGE_RAND_HERO_SELECT_C  MsgId = 2151 //随机竞技场英雄选择请求
	MsgId_BATTLE_CHALLENGE_RAND_HERO_SELECT_S  MsgId = 2152 //随机竞技场英雄选择返回
	MsgId_BATTLE_CHALLENGE_RAND_HERO_REFRESH_C MsgId = 2161 //随机竞技场英雄选择刷新请求
	MsgId_BATTLE_CHALLENGE_RAND_HERO_REFRESH_S MsgId = 2162 //随机竞技场英雄选择刷新返回
	MsgId_BATTLE_CHALLENGE_RAND_HERO_C         MsgId = 2171 //随机竞技场英雄选择状态查询请求
	MsgId_BATTLE_CHALLENGE_RAND_HERO_S         MsgId = 2172 //随机竞技场英雄选择状态查询返回
	MsgId_BATTLE_CHALLENGE_ADMISSION_C         MsgId = 2181 //挑战模式入场请求
	MsgId_BATTLE_CHALLENGE_ADMISSION_S         MsgId = 2182 //挑战模式入场返回
	MsgId_CHAT_C                               MsgId = 2201 //聊天消息请求
	MsgId_CHAT_S                               MsgId = 2202 //聊天消息返回
	MsgId_CHAT_RECORD_C                        MsgId = 2211 //聊天记录请求
	MsgId_CHAT_RECORD_S                        MsgId = 2212 //聊天记录返回
	MsgId_BATTLE_FRAME_SYNC_C                  MsgId = 2301 //帧同步请求
	MsgId_BATTLE_FRAME_SYNC_S                  MsgId = 2302 //帧同步请求返回
	MsgId_BATTLE_FRAME_SYNC_UPDATE_S           MsgId = 2312 //帧同步推送
	MsgId_BATTLE_FRAME_SYNC_READY_C            MsgId = 2321 //帧同步准备完成请求
	MsgId_BATTLE_FRAME_SYNC_READY_S            MsgId = 2322 //帧同步准备完成推送
	MsgId_BATTLE_FRAME_SYNC_DATA_SYNC_C        MsgId = 2331 //帧同步数据同步请求
	MsgId_BATTLE_FRAME_SYNC_DATA_SYNC_S        MsgId = 2332 //帧同步数据同步返回
	MsgId_FRIEND_LIST_C                        MsgId = 2401 //好友列表请求
	MsgId_FRIEND_LIST_S                        MsgId = 2402 //好友列表返回
	MsgId_FRIEND_FIND_C                        MsgId = 2411 //好友查找请求
	MsgId_FRIEND_FIND_S                        MsgId = 2412 //好友查找返回
	MsgId_FRIEND_ADD_C                         MsgId = 2421 //好友添加请求
	MsgId_FRIEND_BLACK_LIST_C                  MsgId = 2431 //好友添加黑名单请求
	MsgId_FRIEND_AGREE_C                       MsgId = 2441 //好友同意请求
	MsgId_FRIEND_REFUSE_C                      MsgId = 2451 //好友拒绝请求
	MsgId_FRIEND_DELETE_C                      MsgId = 2461 //好友删除请求
	MsgId_FRIEND_ALL_AGREE_C                   MsgId = 2471 //同意所有好友请求
	MsgId_FRIEND_ALL_REFUSE_C                  MsgId = 2481 //同意所有好友请求
	MsgId_FRIEND_LIST_UPDATE_S                 MsgId = 2492 //好友列表更新返回
	MsgId_FRIEND_BATTLE_C                      MsgId = 2501 //好友对战邀请请求
	MsgId_FRIEND_BATTLE_S                      MsgId = 2502 //好友对战邀请返回
	MsgId_FRIEND_BATTLE_AGREE_C                MsgId = 2511 //好友对战同意请求
	MsgId_FRIEND_BATTLE_AGREE_S                MsgId = 2512 //好友对战同意返回
	MsgId_FRIEND_BATTLE_CANCEL_C               MsgId = 2521 //好友对战取消请求
	MsgId_FRIEND_BATTLE_CANCEL_S               MsgId = 2522 //好友对战取消返回
	MsgId_NOTICE_C                             MsgId = 2601 //公告获取请求
	MsgId_NOTICE_S                             MsgId = 2602 //公告返回
	MsgId_UPDATE_MONEY_S                       MsgId = 6002 //更新货币返回
)

// Enum value maps for MsgId.
var (
	MsgId_name = map[int32]string{
		0:    "MSGID_BEGIN",
		1:    "MESSAGE_CODE",
		9901: "GM_MSG_C",
		1001: "LOGIN_C",
		1002: "LOGIN_S",
		1101: "PLAYER_DATA_C",
		1102: "PLAYER_DATA_S",
		1111: "UPDATE_PLAYER_NAME_C",
		1112: "UPDATE_PLAYER_NAME_S",
		1121: "UPDATE_PLAYER_TITLE_C",
		1122: "UPDATE_PLAYER_TITLE_S",
		1131: "UPDATE_PLAYER_IMAGE_C",
		1132: "UPDATE_PLAYER_IMAGE_S",
		1141: "UPDATE_PLAYER_IMAGE_FRAME_C",
		1142: "UPDATE_PLAYER_IMAGE_FRAME_S",
		1201: "HERO_LIST_C",
		1202: "HERO_LIST_S",
		1211: "HERO_INFO_C",
		1212: "HERO_INFO_S",
		1221: "UPDATE_HERO_LEVEL_C",
		1222: "UPDATE_HERO_LEVEL_S",
		1231: "UPDATE_HERO_SKINID_C",
		1232: "UPDATE_HERO_SKINID_S",
		1301: "SHOP_LIST_C",
		1302: "SHOP_LIST_S",
		1311: "SHOP_RESET_C",
		1312: "SHOP_RESET_S",
		1321: "SHOP_BUY_C",
		1322: "SHOP_BUY_S",
		1401: "LINEUP_LIST_C",
		1402: "LINEUP_LIST_S",
		1411: "UPDATE_LINEUP_LIST_C",
		1412: "UPDATE_LINEUP_LIST_S",
		1421: "UPDATE_LINEUP_NAME_C",
		1422: "UPDATE_LINEUP_NAME_S",
		1501: "TASK_LIST_C",
		1502: "TASK_LIST_S",
		1511: "TASK_FINISH_C",
		1512: "TASK_FINISH_S",
		1521: "TASK_TEST_C",
		1522: "TASK_TEST_S",
		1532: "UPDATE_TASK_S",
		1601: "CARD_SCORE_C",
		1602: "CARD_SCORE_S",
		1611: "CARD_GET_REWARD_C",
		1612: "CARD_GET_REWARD_S",
		1621: "CARD_TEST_C",
		1622: "CARD_TEST_S",
		1701: "MAIL_LIST_C",
		1702: "MAIL_LIST_S",
		1711: "MAIL_READ_C",
		1712: "MAIL_READ_S",
		1721: "MAIL_RECEIVE_C",
		1722: "MAIL_RECEIVE_S",
		1732: "MAIL_S",
		1801: "COOPERATION_CHEST_OPEN_C",
		1802: "COOPERATION_CHEST_OPEN_S",
		1811: "COOPERATION_CHEST_TEST_C",
		1812: "COOPERATION_CHEST_TEST_S",
		1901: "BATTLE_MATCH_C",
		1902: "BATTLE_MATCH_S",
		1911: "BATTLE_SETTLE_C",
		1912: "BATTLE_SETTLE_S",
		1921: "BATTLE_MATCH_CANCEL_C",
		1922: "BATTLE_MATCH_CANCEL_S",
		2001: "RANK_NORMAL_LIST_C",
		2002: "RANK_NORMAL_LIST_S",
		2011: "RANK_COOPERATION_LIST_C",
		2012: "RANK_COOPERATION_LIST_S",
		2101: "BATTLE_CHALLENGE_MATCH_C",
		2102: "BATTLE_CHALLENGE_MATCH_S",
		2111: "BATTLE_CHALLENGE_MATCH_SETTLE_C",
		2112: "BATTLE_CHALLENGE_MATCH_SETTLE_S",
		2121: "BATTLE_CHALLENGE_STATUS_C",
		2122: "BATTLE_CHALLENGE_STATUS_S",
		2131: "BATTLE_CHALLENGE_RAND_REWARD_C",
		2132: "BATTLE_CHALLENGE_RAND_REWARD_S",
		2141: "BATTLE_CHALLENGE_UNLOCK_REWARD_C",
		2142: "BATTLE_CHALLENGE_UNLOCK_REWARD_S",
		2151: "BATTLE_CHALLENGE_RAND_HERO_SELECT_C",
		2152: "BATTLE_CHALLENGE_RAND_HERO_SELECT_S",
		2161: "BATTLE_CHALLENGE_RAND_HERO_REFRESH_C",
		2162: "BATTLE_CHALLENGE_RAND_HERO_REFRESH_S",
		2171: "BATTLE_CHALLENGE_RAND_HERO_C",
		2172: "BATTLE_CHALLENGE_RAND_HERO_S",
		2181: "BATTLE_CHALLENGE_ADMISSION_C",
		2182: "BATTLE_CHALLENGE_ADMISSION_S",
		2201: "CHAT_C",
		2202: "CHAT_S",
		2211: "CHAT_RECORD_C",
		2212: "CHAT_RECORD_S",
		2301: "BATTLE_FRAME_SYNC_C",
		2302: "BATTLE_FRAME_SYNC_S",
		2312: "BATTLE_FRAME_SYNC_UPDATE_S",
		2321: "BATTLE_FRAME_SYNC_READY_C",
		2322: "BATTLE_FRAME_SYNC_READY_S",
		2331: "BATTLE_FRAME_SYNC_DATA_SYNC_C",
		2332: "BATTLE_FRAME_SYNC_DATA_SYNC_S",
		2401: "FRIEND_LIST_C",
		2402: "FRIEND_LIST_S",
		2411: "FRIEND_FIND_C",
		2412: "FRIEND_FIND_S",
		2421: "FRIEND_ADD_C",
		2431: "FRIEND_BLACK_LIST_C",
		2441: "FRIEND_AGREE_C",
		2451: "FRIEND_REFUSE_C",
		2461: "FRIEND_DELETE_C",
		2471: "FRIEND_ALL_AGREE_C",
		2481: "FRIEND_ALL_REFUSE_C",
		2492: "FRIEND_LIST_UPDATE_S",
		2501: "FRIEND_BATTLE_C",
		2502: "FRIEND_BATTLE_S",
		2511: "FRIEND_BATTLE_AGREE_C",
		2512: "FRIEND_BATTLE_AGREE_S",
		2521: "FRIEND_BATTLE_CANCEL_C",
		2522: "FRIEND_BATTLE_CANCEL_S",
		2601: "NOTICE_C",
		2602: "NOTICE_S",
		6002: "UPDATE_MONEY_S",
	}
	MsgId_value = map[string]int32{
		"MSGID_BEGIN":                          0,
		"MESSAGE_CODE":                         1,
		"GM_MSG_C":                             9901,
		"LOGIN_C":                              1001,
		"LOGIN_S":                              1002,
		"PLAYER_DATA_C":                        1101,
		"PLAYER_DATA_S":                        1102,
		"UPDATE_PLAYER_NAME_C":                 1111,
		"UPDATE_PLAYER_NAME_S":                 1112,
		"UPDATE_PLAYER_TITLE_C":                1121,
		"UPDATE_PLAYER_TITLE_S":                1122,
		"UPDATE_PLAYER_IMAGE_C":                1131,
		"UPDATE_PLAYER_IMAGE_S":                1132,
		"UPDATE_PLAYER_IMAGE_FRAME_C":          1141,
		"UPDATE_PLAYER_IMAGE_FRAME_S":          1142,
		"HERO_LIST_C":                          1201,
		"HERO_LIST_S":                          1202,
		"HERO_INFO_C":                          1211,
		"HERO_INFO_S":                          1212,
		"UPDATE_HERO_LEVEL_C":                  1221,
		"UPDATE_HERO_LEVEL_S":                  1222,
		"UPDATE_HERO_SKINID_C":                 1231,
		"UPDATE_HERO_SKINID_S":                 1232,
		"SHOP_LIST_C":                          1301,
		"SHOP_LIST_S":                          1302,
		"SHOP_RESET_C":                         1311,
		"SHOP_RESET_S":                         1312,
		"SHOP_BUY_C":                           1321,
		"SHOP_BUY_S":                           1322,
		"LINEUP_LIST_C":                        1401,
		"LINEUP_LIST_S":                        1402,
		"UPDATE_LINEUP_LIST_C":                 1411,
		"UPDATE_LINEUP_LIST_S":                 1412,
		"UPDATE_LINEUP_NAME_C":                 1421,
		"UPDATE_LINEUP_NAME_S":                 1422,
		"TASK_LIST_C":                          1501,
		"TASK_LIST_S":                          1502,
		"TASK_FINISH_C":                        1511,
		"TASK_FINISH_S":                        1512,
		"TASK_TEST_C":                          1521,
		"TASK_TEST_S":                          1522,
		"UPDATE_TASK_S":                        1532,
		"CARD_SCORE_C":                         1601,
		"CARD_SCORE_S":                         1602,
		"CARD_GET_REWARD_C":                    1611,
		"CARD_GET_REWARD_S":                    1612,
		"CARD_TEST_C":                          1621,
		"CARD_TEST_S":                          1622,
		"MAIL_LIST_C":                          1701,
		"MAIL_LIST_S":                          1702,
		"MAIL_READ_C":                          1711,
		"MAIL_READ_S":                          1712,
		"MAIL_RECEIVE_C":                       1721,
		"MAIL_RECEIVE_S":                       1722,
		"MAIL_S":                               1732,
		"COOPERATION_CHEST_OPEN_C":             1801,
		"COOPERATION_CHEST_OPEN_S":             1802,
		"COOPERATION_CHEST_TEST_C":             1811,
		"COOPERATION_CHEST_TEST_S":             1812,
		"BATTLE_MATCH_C":                       1901,
		"BATTLE_MATCH_S":                       1902,
		"BATTLE_SETTLE_C":                      1911,
		"BATTLE_SETTLE_S":                      1912,
		"BATTLE_MATCH_CANCEL_C":                1921,
		"BATTLE_MATCH_CANCEL_S":                1922,
		"RANK_NORMAL_LIST_C":                   2001,
		"RANK_NORMAL_LIST_S":                   2002,
		"RANK_COOPERATION_LIST_C":              2011,
		"RANK_COOPERATION_LIST_S":              2012,
		"BATTLE_CHALLENGE_MATCH_C":             2101,
		"BATTLE_CHALLENGE_MATCH_S":             2102,
		"BATTLE_CHALLENGE_MATCH_SETTLE_C":      2111,
		"BATTLE_CHALLENGE_MATCH_SETTLE_S":      2112,
		"BATTLE_CHALLENGE_STATUS_C":            2121,
		"BATTLE_CHALLENGE_STATUS_S":            2122,
		"BATTLE_CHALLENGE_RAND_REWARD_C":       2131,
		"BATTLE_CHALLENGE_RAND_REWARD_S":       2132,
		"BATTLE_CHALLENGE_UNLOCK_REWARD_C":     2141,
		"BATTLE_CHALLENGE_UNLOCK_REWARD_S":     2142,
		"BATTLE_CHALLENGE_RAND_HERO_SELECT_C":  2151,
		"BATTLE_CHALLENGE_RAND_HERO_SELECT_S":  2152,
		"BATTLE_CHALLENGE_RAND_HERO_REFRESH_C": 2161,
		"BATTLE_CHALLENGE_RAND_HERO_REFRESH_S": 2162,
		"BATTLE_CHALLENGE_RAND_HERO_C":         2171,
		"BATTLE_CHALLENGE_RAND_HERO_S":         2172,
		"BATTLE_CHALLENGE_ADMISSION_C":         2181,
		"BATTLE_CHALLENGE_ADMISSION_S":         2182,
		"CHAT_C":                               2201,
		"CHAT_S":                               2202,
		"CHAT_RECORD_C":                        2211,
		"CHAT_RECORD_S":                        2212,
		"BATTLE_FRAME_SYNC_C":                  2301,
		"BATTLE_FRAME_SYNC_S":                  2302,
		"BATTLE_FRAME_SYNC_UPDATE_S":           2312,
		"BATTLE_FRAME_SYNC_READY_C":            2321,
		"BATTLE_FRAME_SYNC_READY_S":            2322,
		"BATTLE_FRAME_SYNC_DATA_SYNC_C":        2331,
		"BATTLE_FRAME_SYNC_DATA_SYNC_S":        2332,
		"FRIEND_LIST_C":                        2401,
		"FRIEND_LIST_S":                        2402,
		"FRIEND_FIND_C":                        2411,
		"FRIEND_FIND_S":                        2412,
		"FRIEND_ADD_C":                         2421,
		"FRIEND_BLACK_LIST_C":                  2431,
		"FRIEND_AGREE_C":                       2441,
		"FRIEND_REFUSE_C":                      2451,
		"FRIEND_DELETE_C":                      2461,
		"FRIEND_ALL_AGREE_C":                   2471,
		"FRIEND_ALL_REFUSE_C":                  2481,
		"FRIEND_LIST_UPDATE_S":                 2492,
		"FRIEND_BATTLE_C":                      2501,
		"FRIEND_BATTLE_S":                      2502,
		"FRIEND_BATTLE_AGREE_C":                2511,
		"FRIEND_BATTLE_AGREE_S":                2512,
		"FRIEND_BATTLE_CANCEL_C":               2521,
		"FRIEND_BATTLE_CANCEL_S":               2522,
		"NOTICE_C":                             2601,
		"NOTICE_S":                             2602,
		"UPDATE_MONEY_S":                       6002,
	}
)

func (x MsgId) Enum() *MsgId {
	p := new(MsgId)
	*p = x
	return p
}

func (x MsgId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgId) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[0].Descriptor()
}

func (MsgId) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[0]
}

func (x MsgId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgId.Descriptor instead.
func (MsgId) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

type Prop_Type int32

const (
	Prop_Type_Box  Prop_Type = 0
	Prop_Type_Hero Prop_Type = 1
	Prop_Type_Role Prop_Type = 2
)

// Enum value maps for Prop_Type.
var (
	Prop_Type_name = map[int32]string{
		0: "Box",
		1: "Hero",
		2: "Role",
	}
	Prop_Type_value = map[string]int32{
		"Box":  0,
		"Hero": 1,
		"Role": 2,
	}
)

func (x Prop_Type) Enum() *Prop_Type {
	p := new(Prop_Type)
	*p = x
	return p
}

func (x Prop_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Prop_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[1].Descriptor()
}

func (Prop_Type) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[1]
}

func (x Prop_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Prop_Type.Descriptor instead.
func (Prop_Type) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1}
}

type BattleType int32

const (
	BattleType_Normal           BattleType = 0 //普通模式
	BattleType_Cooperation      BattleType = 1 //合作模式
	BattleType_Mirror           BattleType = 2 //镜像模式
	BattleType_Random           BattleType = 3 //随机竞技场
	BattleType_Transmigration   BattleType = 4 //轮回杀场
	BattleType_NormalFried      BattleType = 5 //普通模式 与好友一起玩
	BattleType_CooperationFried BattleType = 6 //合作模式 与好友一起玩
)

// Enum value maps for BattleType.
var (
	BattleType_name = map[int32]string{
		0: "Normal",
		1: "Cooperation",
		2: "Mirror",
		3: "Random",
		4: "Transmigration",
		5: "NormalFried",
		6: "CooperationFried",
	}
	BattleType_value = map[string]int32{
		"Normal":           0,
		"Cooperation":      1,
		"Mirror":           2,
		"Random":           3,
		"Transmigration":   4,
		"NormalFried":      5,
		"CooperationFried": 6,
	}
)

func (x BattleType) Enum() *BattleType {
	p := new(BattleType)
	*p = x
	return p
}

func (x BattleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BattleType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[2].Descriptor()
}

func (BattleType) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[2]
}

func (x BattleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BattleType.Descriptor instead.
func (BattleType) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{2}
}

type RANKING_TYPE int32

const (
	RANKING_TYPE_Level     RANKING_TYPE = 0 //同段位
	RANKING_TYPE_Region    RANKING_TYPE = 1 //同服
	RANKING_TYPE_AllRegion RANKING_TYPE = 2 //全服
)

// Enum value maps for RANKING_TYPE.
var (
	RANKING_TYPE_name = map[int32]string{
		0: "Level",
		1: "Region",
		2: "AllRegion",
	}
	RANKING_TYPE_value = map[string]int32{
		"Level":     0,
		"Region":    1,
		"AllRegion": 2,
	}
)

func (x RANKING_TYPE) Enum() *RANKING_TYPE {
	p := new(RANKING_TYPE)
	*p = x
	return p
}

func (x RANKING_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RANKING_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[3].Descriptor()
}

func (RANKING_TYPE) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[3]
}

func (x RANKING_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RANKING_TYPE.Descriptor instead.
func (RANKING_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{3}
}

//消息请求结构
type MESSAGE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId MsgId  `protobuf:"varint,1,opt,name=msgId,proto3,enum=msg.MsgId" json:"msgId,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *MESSAGE_REQ) Reset() {
	*x = MESSAGE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MESSAGE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MESSAGE_REQ) ProtoMessage() {}

func (x *MESSAGE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MESSAGE_REQ.ProtoReflect.Descriptor instead.
func (*MESSAGE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

func (x *MESSAGE_REQ) GetMsgId() MsgId {
	if x != nil {
		return x.MsgId
	}
	return MsgId_MSGID_BEGIN
}

func (x *MESSAGE_REQ) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MESSAGE_REQ) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

//消息返回结构
type MESSAGE_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId   MsgId  `protobuf:"varint,1,opt,name=msgId,proto3,enum=msg.MsgId" json:"msgId,omitempty"`
	Code    int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Uid     string `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	Data    []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MESSAGE_RSP) Reset() {
	*x = MESSAGE_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MESSAGE_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MESSAGE_RSP) ProtoMessage() {}

func (x *MESSAGE_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MESSAGE_RSP.ProtoReflect.Descriptor instead.
func (*MESSAGE_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1}
}

func (x *MESSAGE_RSP) GetMsgId() MsgId {
	if x != nil {
		return x.MsgId
	}
	return MsgId_MSGID_BEGIN
}

func (x *MESSAGE_RSP) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MESSAGE_RSP) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MESSAGE_RSP) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *MESSAGE_RSP) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

//GM请求结构
type GM_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GmMsg string `protobuf:"bytes,2,opt,name=gmMsg,proto3" json:"gmMsg,omitempty"`
}

func (x *GM_REQ) Reset() {
	*x = GM_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GM_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GM_REQ) ProtoMessage() {}

func (x *GM_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GM_REQ.ProtoReflect.Descriptor instead.
func (*GM_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{2}
}

func (x *GM_REQ) GetGmMsg() string {
	if x != nil {
		return x.GmMsg
	}
	return ""
}

//登录请求结构
type LOGIN_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`   //账号
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` //密码
}

func (x *LOGIN_REQ) Reset() {
	*x = LOGIN_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LOGIN_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LOGIN_REQ) ProtoMessage() {}

func (x *LOGIN_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LOGIN_REQ.ProtoReflect.Descriptor instead.
func (*LOGIN_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{3}
}

func (x *LOGIN_REQ) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *LOGIN_REQ) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

//登录返回结构
type LOGIN_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginResult int32  `protobuf:"varint,1,opt,name=loginResult,proto3" json:"loginResult,omitempty"` //[状态码]
	CurTime     int64  `protobuf:"varint,2,opt,name=curTime,proto3" json:"curTime,omitempty"`         //[当前时间]
	Token       string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`              //[验证token]
}

func (x *LOGIN_RSP) Reset() {
	*x = LOGIN_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LOGIN_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LOGIN_RSP) ProtoMessage() {}

func (x *LOGIN_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LOGIN_RSP.ProtoReflect.Descriptor instead.
func (*LOGIN_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{4}
}

func (x *LOGIN_RSP) GetLoginResult() int32 {
	if x != nil {
		return x.LoginResult
	}
	return 0
}

func (x *LOGIN_RSP) GetCurTime() int64 {
	if x != nil {
		return x.CurTime
	}
	return 0
}

func (x *LOGIN_RSP) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

//实名认证请求结构
type IDCARD_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`     //真实姓名
	IdCard string `protobuf:"bytes,2,opt,name=idCard,proto3" json:"idCard,omitempty"` //身份证
}

func (x *IDCARD_REQ) Reset() {
	*x = IDCARD_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDCARD_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDCARD_REQ) ProtoMessage() {}

func (x *IDCARD_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDCARD_REQ.ProtoReflect.Descriptor instead.
func (*IDCARD_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{5}
}

func (x *IDCARD_REQ) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IDCARD_REQ) GetIdCard() string {
	if x != nil {
		return x.IdCard
	}
	return ""
}

//实名认证返回结构
type IDCARD_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`             //[状态码]
	NameVerified int32 `protobuf:"varint,2,opt,name=nameVerified,proto3" json:"nameVerified,omitempty"` //是否实名认证 1.未提交,2已提交,3已认证
}

func (x *IDCARD_RSP) Reset() {
	*x = IDCARD_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDCARD_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDCARD_RSP) ProtoMessage() {}

func (x *IDCARD_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDCARD_RSP.ProtoReflect.Descriptor instead.
func (*IDCARD_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{6}
}

func (x *IDCARD_RSP) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *IDCARD_RSP) GetNameVerified() int32 {
	if x != nil {
		return x.NameVerified
	}
	return 0
}

//重连请求结构
type RE_CONNECT_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId int32  `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"` //账号id
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`          //重连验证token
}

func (x *RE_CONNECT_REQ) Reset() {
	*x = RE_CONNECT_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RE_CONNECT_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RE_CONNECT_REQ) ProtoMessage() {}

func (x *RE_CONNECT_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RE_CONNECT_REQ.ProtoReflect.Descriptor instead.
func (*RE_CONNECT_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{7}
}

func (x *RE_CONNECT_REQ) GetAccountId() int32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *RE_CONNECT_REQ) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

//重连返回结构
type RE_CONNECT_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReconnectResult int32  `protobuf:"varint,1,opt,name=reconnectResult,proto3" json:"reconnectResult,omitempty"` //[状态码  LoginResult]
	CurTime         int64  `protobuf:"varint,2,opt,name=curTime,proto3" json:"curTime,omitempty"`                 //[当前时间]
	Token           string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`                      //[验证token]
}

func (x *RE_CONNECT_RSP) Reset() {
	*x = RE_CONNECT_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RE_CONNECT_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RE_CONNECT_RSP) ProtoMessage() {}

func (x *RE_CONNECT_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RE_CONNECT_RSP.ProtoReflect.Descriptor instead.
func (*RE_CONNECT_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{8}
}

func (x *RE_CONNECT_RSP) GetReconnectResult() int32 {
	if x != nil {
		return x.ReconnectResult
	}
	return 0
}

func (x *RE_CONNECT_RSP) GetCurTime() int64 {
	if x != nil {
		return x.CurTime
	}
	return 0
}

func (x *RE_CONNECT_RSP) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

//玩家数据请求结构
type PLAYER_DATA_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PLAYER_DATA_REQ) Reset() {
	*x = PLAYER_DATA_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PLAYER_DATA_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PLAYER_DATA_REQ) ProtoMessage() {}

func (x *PLAYER_DATA_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PLAYER_DATA_REQ.ProtoReflect.Descriptor instead.
func (*PLAYER_DATA_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{9}
}

//玩家数据返回结构
type PLAYER_DATA_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                    string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`                                         //[玩家id]
	Name                   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                       //[玩家名字]
	Gold                   int64  `protobuf:"varint,3,opt,name=gold,proto3" json:"gold,omitempty"`                                      //[金币]
	Diamond                int64  `protobuf:"varint,4,opt,name=diamond,proto3" json:"diamond,omitempty"`                                //[钻石或者元宝]
	Level                  int32  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`                                    //[等级]
	Title                  string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`                                     //[称号]
	Exp                    int32  `protobuf:"varint,7,opt,name=exp,proto3" json:"exp,omitempty"`                                        //[经验值]
	Image                  int32  `protobuf:"varint,8,opt,name=image,proto3" json:"image,omitempty"`                                    //[头像]
	ImageFrame             int32  `protobuf:"varint,9,opt,name=imageFrame,proto3" json:"imageFrame,omitempty"`                          //[头像框]
	PvpNum                 int32  `protobuf:"varint,10,opt,name=pvpNum,proto3" json:"pvpNum,omitempty"`                                 //[对战次数]
	PvpWinOdds             int32  `protobuf:"varint,11,opt,name=pvpWinOdds,proto3" json:"pvpWinOdds,omitempty"`                         //[对战胜率]
	MaxRound               int32  `protobuf:"varint,12,opt,name=maxRound,proto3" json:"maxRound,omitempty"`                             //[合作模式最大回合数]
	MaxTrophy              int32  `protobuf:"varint,13,opt,name=maxTrophy,proto3" json:"maxTrophy,omitempty"`                           //[最高段位积分]
	MirrorTypeTicket       int32  `protobuf:"varint,14,opt,name=mirrorTypeTicket,proto3" json:"mirrorTypeTicket,omitempty"`             //[镜像模式门票]
	RandomPvpTicket        int32  `protobuf:"varint,15,opt,name=randomPvpTicket,proto3" json:"randomPvpTicket,omitempty"`               //[随机竞技场门票]
	FirstCharge            int32  `protobuf:"varint,16,opt,name=firstCharge,proto3" json:"firstCharge,omitempty"`                       //是否已首充 0:否 1:是
	SeasonCard             int32  `protobuf:"varint,17,opt,name=seasonCard,proto3" json:"seasonCard,omitempty"`                         //是否购买至尊卡 0:否 1:是
	MonthCard              int32  `protobuf:"varint,18,opt,name=monthCard,proto3" json:"monthCard,omitempty"`                           //是否购买月卡 0:否 1:是
	SeasonScore            int32  `protobuf:"varint,19,opt,name=seasonScore,proto3" json:"seasonScore,omitempty"`                       //赛季积分
	MonthScore             int32  `protobuf:"varint,20,opt,name=monthScore,proto3" json:"monthScore,omitempty"`                         //月卡积分
	CooperationKey         int32  `protobuf:"varint,21,opt,name=cooperationKey,proto3" json:"cooperationKey,omitempty"`                 //合作宝箱钥匙
	CooperationRemainCount int32  `protobuf:"varint,22,opt,name=cooperationRemainCount,proto3" json:"cooperationRemainCount,omitempty"` //合作模式剩余次数
	RegionId               int32  `protobuf:"varint,23,opt,name=regionId,proto3" json:"regionId,omitempty"`                             //区服id
	RegionName             int32  `protobuf:"varint,24,opt,name=regionName,proto3" json:"regionName,omitempty"`                         //区服名称
}

func (x *PLAYER_DATA_RSP) Reset() {
	*x = PLAYER_DATA_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PLAYER_DATA_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PLAYER_DATA_RSP) ProtoMessage() {}

func (x *PLAYER_DATA_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PLAYER_DATA_RSP.ProtoReflect.Descriptor instead.
func (*PLAYER_DATA_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{10}
}

func (x *PLAYER_DATA_RSP) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PLAYER_DATA_RSP) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PLAYER_DATA_RSP) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetDiamond() int64 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PLAYER_DATA_RSP) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetImage() int32 {
	if x != nil {
		return x.Image
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetImageFrame() int32 {
	if x != nil {
		return x.ImageFrame
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetPvpNum() int32 {
	if x != nil {
		return x.PvpNum
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetPvpWinOdds() int32 {
	if x != nil {
		return x.PvpWinOdds
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetMaxRound() int32 {
	if x != nil {
		return x.MaxRound
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetMaxTrophy() int32 {
	if x != nil {
		return x.MaxTrophy
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetMirrorTypeTicket() int32 {
	if x != nil {
		return x.MirrorTypeTicket
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetRandomPvpTicket() int32 {
	if x != nil {
		return x.RandomPvpTicket
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetFirstCharge() int32 {
	if x != nil {
		return x.FirstCharge
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetSeasonCard() int32 {
	if x != nil {
		return x.SeasonCard
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetMonthCard() int32 {
	if x != nil {
		return x.MonthCard
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetSeasonScore() int32 {
	if x != nil {
		return x.SeasonScore
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetMonthScore() int32 {
	if x != nil {
		return x.MonthScore
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetCooperationKey() int32 {
	if x != nil {
		return x.CooperationKey
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetCooperationRemainCount() int32 {
	if x != nil {
		return x.CooperationRemainCount
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetRegionId() int32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *PLAYER_DATA_RSP) GetRegionName() int32 {
	if x != nil {
		return x.RegionName
	}
	return 0
}

//更新玩家名称请求结构
type UPDATE_PLAYER_NAME_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UPDATE_PLAYER_NAME_REQ) Reset() {
	*x = UPDATE_PLAYER_NAME_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_PLAYER_NAME_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_PLAYER_NAME_REQ) ProtoMessage() {}

func (x *UPDATE_PLAYER_NAME_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_PLAYER_NAME_REQ.ProtoReflect.Descriptor instead.
func (*UPDATE_PLAYER_NAME_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{11}
}

func (x *UPDATE_PLAYER_NAME_REQ) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//更新玩家名称返回结构
type UPDATE_PLAYER_NAME_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UPDATE_PLAYER_NAME_RSP) Reset() {
	*x = UPDATE_PLAYER_NAME_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_PLAYER_NAME_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_PLAYER_NAME_RSP) ProtoMessage() {}

func (x *UPDATE_PLAYER_NAME_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_PLAYER_NAME_RSP.ProtoReflect.Descriptor instead.
func (*UPDATE_PLAYER_NAME_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{12}
}

func (x *UPDATE_PLAYER_NAME_RSP) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//更新玩家称号请求结构
type UPDATE_PLAYER_TITLE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *UPDATE_PLAYER_TITLE_REQ) Reset() {
	*x = UPDATE_PLAYER_TITLE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_PLAYER_TITLE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_PLAYER_TITLE_REQ) ProtoMessage() {}

func (x *UPDATE_PLAYER_TITLE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_PLAYER_TITLE_REQ.ProtoReflect.Descriptor instead.
func (*UPDATE_PLAYER_TITLE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{13}
}

func (x *UPDATE_PLAYER_TITLE_REQ) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

//更新玩家称号返回结构
type UPDATE_PLAYER_TITLE_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *UPDATE_PLAYER_TITLE_RSP) Reset() {
	*x = UPDATE_PLAYER_TITLE_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_PLAYER_TITLE_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_PLAYER_TITLE_RSP) ProtoMessage() {}

func (x *UPDATE_PLAYER_TITLE_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_PLAYER_TITLE_RSP.ProtoReflect.Descriptor instead.
func (*UPDATE_PLAYER_TITLE_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{14}
}

func (x *UPDATE_PLAYER_TITLE_RSP) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

//更新玩家头像请求结构
type UPDATE_PLAYER_IMAGE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image int32 `protobuf:"varint,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *UPDATE_PLAYER_IMAGE_REQ) Reset() {
	*x = UPDATE_PLAYER_IMAGE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_PLAYER_IMAGE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_PLAYER_IMAGE_REQ) ProtoMessage() {}

func (x *UPDATE_PLAYER_IMAGE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_PLAYER_IMAGE_REQ.ProtoReflect.Descriptor instead.
func (*UPDATE_PLAYER_IMAGE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{15}
}

func (x *UPDATE_PLAYER_IMAGE_REQ) GetImage() int32 {
	if x != nil {
		return x.Image
	}
	return 0
}

//更新玩家头像返回结构
type UPDATE_PLAYER_IMAGE_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image int32 `protobuf:"varint,2,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *UPDATE_PLAYER_IMAGE_RSP) Reset() {
	*x = UPDATE_PLAYER_IMAGE_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_PLAYER_IMAGE_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_PLAYER_IMAGE_RSP) ProtoMessage() {}

func (x *UPDATE_PLAYER_IMAGE_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_PLAYER_IMAGE_RSP.ProtoReflect.Descriptor instead.
func (*UPDATE_PLAYER_IMAGE_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{16}
}

func (x *UPDATE_PLAYER_IMAGE_RSP) GetImage() int32 {
	if x != nil {
		return x.Image
	}
	return 0
}

//更新玩家头像框请求结构
type UPDATE_PLAYER_IMAGE_FRAME_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageFrame int32 `protobuf:"varint,1,opt,name=imageFrame,proto3" json:"imageFrame,omitempty"`
}

func (x *UPDATE_PLAYER_IMAGE_FRAME_REQ) Reset() {
	*x = UPDATE_PLAYER_IMAGE_FRAME_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_PLAYER_IMAGE_FRAME_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_PLAYER_IMAGE_FRAME_REQ) ProtoMessage() {}

func (x *UPDATE_PLAYER_IMAGE_FRAME_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_PLAYER_IMAGE_FRAME_REQ.ProtoReflect.Descriptor instead.
func (*UPDATE_PLAYER_IMAGE_FRAME_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{17}
}

func (x *UPDATE_PLAYER_IMAGE_FRAME_REQ) GetImageFrame() int32 {
	if x != nil {
		return x.ImageFrame
	}
	return 0
}

//更新玩家头像框返回结构
type UPDATE_PLAYER_IMAGE_FRAME_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImageFrame int32 `protobuf:"varint,2,opt,name=imageFrame,proto3" json:"imageFrame,omitempty"`
}

func (x *UPDATE_PLAYER_IMAGE_FRAME_RSP) Reset() {
	*x = UPDATE_PLAYER_IMAGE_FRAME_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_PLAYER_IMAGE_FRAME_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_PLAYER_IMAGE_FRAME_RSP) ProtoMessage() {}

func (x *UPDATE_PLAYER_IMAGE_FRAME_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_PLAYER_IMAGE_FRAME_RSP.ProtoReflect.Descriptor instead.
func (*UPDATE_PLAYER_IMAGE_FRAME_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{18}
}

func (x *UPDATE_PLAYER_IMAGE_FRAME_RSP) GetImageFrame() int32 {
	if x != nil {
		return x.ImageFrame
	}
	return 0
}

//英雄信息
type HERO_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId    int32 `protobuf:"varint,1,opt,name=heroId,proto3" json:"heroId,omitempty"`       //[英雄id]
	HeroLevel int32 `protobuf:"varint,2,opt,name=heroLevel,proto3" json:"heroLevel,omitempty"` //[英雄等级]
	HeroNum   int32 `protobuf:"varint,3,opt,name=heroNum,proto3" json:"heroNum,omitempty"`     //[英雄数量]
	SkinId    int32 `protobuf:"varint,4,opt,name=skinId,proto3" json:"skinId,omitempty"`       //[皮肤id]
	Status    int32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`       //[英雄状态 0:空闲 1:上阵]
}

func (x *HERO_DATA) Reset() {
	*x = HERO_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HERO_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HERO_DATA) ProtoMessage() {}

func (x *HERO_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HERO_DATA.ProtoReflect.Descriptor instead.
func (*HERO_DATA) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{19}
}

func (x *HERO_DATA) GetHeroId() int32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

func (x *HERO_DATA) GetHeroLevel() int32 {
	if x != nil {
		return x.HeroLevel
	}
	return 0
}

func (x *HERO_DATA) GetHeroNum() int32 {
	if x != nil {
		return x.HeroNum
	}
	return 0
}

func (x *HERO_DATA) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

func (x *HERO_DATA) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

//英雄列表
type HERO_LIST struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []int32 `protobuf:"varint,1,rep,packed,name=list,proto3" json:"list,omitempty"`
}

func (x *HERO_LIST) Reset() {
	*x = HERO_LIST{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HERO_LIST) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HERO_LIST) ProtoMessage() {}

func (x *HERO_LIST) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HERO_LIST.ProtoReflect.Descriptor instead.
func (*HERO_LIST) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{20}
}

func (x *HERO_LIST) GetList() []int32 {
	if x != nil {
		return x.List
	}
	return nil
}

//英雄列表请求
type HERO_LIST_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HERO_LIST_REQ) Reset() {
	*x = HERO_LIST_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HERO_LIST_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HERO_LIST_REQ) ProtoMessage() {}

func (x *HERO_LIST_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HERO_LIST_REQ.ProtoReflect.Descriptor instead.
func (*HERO_LIST_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{21}
}

//英雄列表返回
type HERO_LIST_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*HERO_DATA `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *HERO_LIST_RSP) Reset() {
	*x = HERO_LIST_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HERO_LIST_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HERO_LIST_RSP) ProtoMessage() {}

func (x *HERO_LIST_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HERO_LIST_RSP.ProtoReflect.Descriptor instead.
func (*HERO_LIST_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{22}
}

func (x *HERO_LIST_RSP) GetData() []*HERO_DATA {
	if x != nil {
		return x.Data
	}
	return nil
}

//英雄升级请求结构
type UPDATE_HERO_LEVEL_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId int32 `protobuf:"varint,1,opt,name=heroId,proto3" json:"heroId,omitempty"` //[英雄id]
}

func (x *UPDATE_HERO_LEVEL_REQ) Reset() {
	*x = UPDATE_HERO_LEVEL_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_HERO_LEVEL_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_HERO_LEVEL_REQ) ProtoMessage() {}

func (x *UPDATE_HERO_LEVEL_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_HERO_LEVEL_REQ.ProtoReflect.Descriptor instead.
func (*UPDATE_HERO_LEVEL_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{23}
}

func (x *UPDATE_HERO_LEVEL_REQ) GetHeroId() int32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

//英雄升级返回结构
type UPDATE_HERO_LEVEL_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gold int64      `protobuf:"varint,1,opt,name=gold,proto3" json:"gold,omitempty"` //金币
	Data *HERO_DATA `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`  //英雄数据
}

func (x *UPDATE_HERO_LEVEL_RSP) Reset() {
	*x = UPDATE_HERO_LEVEL_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_HERO_LEVEL_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_HERO_LEVEL_RSP) ProtoMessage() {}

func (x *UPDATE_HERO_LEVEL_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_HERO_LEVEL_RSP.ProtoReflect.Descriptor instead.
func (*UPDATE_HERO_LEVEL_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{24}
}

func (x *UPDATE_HERO_LEVEL_RSP) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *UPDATE_HERO_LEVEL_RSP) GetData() *HERO_DATA {
	if x != nil {
		return x.Data
	}
	return nil
}

//更新英雄皮肤请求结构
type UPDATE_HERO_SKINID_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId int32 `protobuf:"varint,1,opt,name=heroId,proto3" json:"heroId,omitempty"` //[英雄id]
	SkinId int32 `protobuf:"varint,2,opt,name=skinId,proto3" json:"skinId,omitempty"` //[皮肤id]
}

func (x *UPDATE_HERO_SKINID_REQ) Reset() {
	*x = UPDATE_HERO_SKINID_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_HERO_SKINID_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_HERO_SKINID_REQ) ProtoMessage() {}

func (x *UPDATE_HERO_SKINID_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_HERO_SKINID_REQ.ProtoReflect.Descriptor instead.
func (*UPDATE_HERO_SKINID_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{25}
}

func (x *UPDATE_HERO_SKINID_REQ) GetHeroId() int32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

func (x *UPDATE_HERO_SKINID_REQ) GetSkinId() int32 {
	if x != nil {
		return x.SkinId
	}
	return 0
}

//更新英雄皮肤返回结构
type UPDATE_HERO_SKINID_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *HERO_DATA `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //英雄数据
}

func (x *UPDATE_HERO_SKINID_RSP) Reset() {
	*x = UPDATE_HERO_SKINID_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_HERO_SKINID_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_HERO_SKINID_RSP) ProtoMessage() {}

func (x *UPDATE_HERO_SKINID_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_HERO_SKINID_RSP.ProtoReflect.Descriptor instead.
func (*UPDATE_HERO_SKINID_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{26}
}

func (x *UPDATE_HERO_SKINID_RSP) GetData() *HERO_DATA {
	if x != nil {
		return x.Data
	}
	return nil
}

//英雄信息请求结构
type HERO_INFO_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId int32 `protobuf:"varint,1,opt,name=heroId,proto3" json:"heroId,omitempty"` //[英雄id]
}

func (x *HERO_INFO_REQ) Reset() {
	*x = HERO_INFO_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HERO_INFO_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HERO_INFO_REQ) ProtoMessage() {}

func (x *HERO_INFO_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HERO_INFO_REQ.ProtoReflect.Descriptor instead.
func (*HERO_INFO_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{27}
}

func (x *HERO_INFO_REQ) GetHeroId() int32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

//英雄信息返回结构
type HERO_INFO_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *HERO_DATA `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` //英雄数据
}

func (x *HERO_INFO_RSP) Reset() {
	*x = HERO_INFO_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HERO_INFO_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HERO_INFO_RSP) ProtoMessage() {}

func (x *HERO_INFO_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HERO_INFO_RSP.ProtoReflect.Descriptor instead.
func (*HERO_INFO_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{28}
}

func (x *HERO_INFO_RSP) GetData() *HERO_DATA {
	if x != nil {
		return x.Data
	}
	return nil
}

//阵容数据
type LINEUP_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     int32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                //阵容索引
	Name      string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                   //阵容名
	Formation []int32 `protobuf:"varint,3,rep,packed,name=formation,proto3" json:"formation,omitempty"` //阵容列表
}

func (x *LINEUP_DATA) Reset() {
	*x = LINEUP_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LINEUP_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LINEUP_DATA) ProtoMessage() {}

func (x *LINEUP_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LINEUP_DATA.ProtoReflect.Descriptor instead.
func (*LINEUP_DATA) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{29}
}

func (x *LINEUP_DATA) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LINEUP_DATA) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LINEUP_DATA) GetFormation() []int32 {
	if x != nil {
		return x.Formation
	}
	return nil
}

//阵容列表请求结构
type LINEUP_LIST_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LINEUP_LIST_REQ) Reset() {
	*x = LINEUP_LIST_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LINEUP_LIST_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LINEUP_LIST_REQ) ProtoMessage() {}

func (x *LINEUP_LIST_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LINEUP_LIST_REQ.ProtoReflect.Descriptor instead.
func (*LINEUP_LIST_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{30}
}

//阵容列表返回结构
type LINEUP_LIST_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*LINEUP_DATA `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` //阵容数据列表
}

func (x *LINEUP_LIST_RSP) Reset() {
	*x = LINEUP_LIST_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LINEUP_LIST_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LINEUP_LIST_RSP) ProtoMessage() {}

func (x *LINEUP_LIST_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LINEUP_LIST_RSP.ProtoReflect.Descriptor instead.
func (*LINEUP_LIST_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{31}
}

func (x *LINEUP_LIST_RSP) GetData() []*LINEUP_DATA {
	if x != nil {
		return x.Data
	}
	return nil
}

//修改阵容请求结构
type UPDATE_LINEUP_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     int32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                //阵容索引
	Formation []int32 `protobuf:"varint,2,rep,packed,name=formation,proto3" json:"formation,omitempty"` //阵容列表
}

func (x *UPDATE_LINEUP_REQ) Reset() {
	*x = UPDATE_LINEUP_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_LINEUP_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_LINEUP_REQ) ProtoMessage() {}

func (x *UPDATE_LINEUP_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_LINEUP_REQ.ProtoReflect.Descriptor instead.
func (*UPDATE_LINEUP_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{32}
}

func (x *UPDATE_LINEUP_REQ) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *UPDATE_LINEUP_REQ) GetFormation() []int32 {
	if x != nil {
		return x.Formation
	}
	return nil
}

//修改阵容返回结构
type UPDATE_LINEUP_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *LINEUP_DATA `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` //阵容数据
}

func (x *UPDATE_LINEUP_RSP) Reset() {
	*x = UPDATE_LINEUP_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_LINEUP_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_LINEUP_RSP) ProtoMessage() {}

func (x *UPDATE_LINEUP_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_LINEUP_RSP.ProtoReflect.Descriptor instead.
func (*UPDATE_LINEUP_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{33}
}

func (x *UPDATE_LINEUP_RSP) GetData() *LINEUP_DATA {
	if x != nil {
		return x.Data
	}
	return nil
}

//修改阵容名称请求结构
type UPDATE_LINEUP_NAME_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` //阵容索引
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`    //阵容名称
}

func (x *UPDATE_LINEUP_NAME_REQ) Reset() {
	*x = UPDATE_LINEUP_NAME_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_LINEUP_NAME_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_LINEUP_NAME_REQ) ProtoMessage() {}

func (x *UPDATE_LINEUP_NAME_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_LINEUP_NAME_REQ.ProtoReflect.Descriptor instead.
func (*UPDATE_LINEUP_NAME_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{34}
}

func (x *UPDATE_LINEUP_NAME_REQ) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *UPDATE_LINEUP_NAME_REQ) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//修改阵容名称返回结构
type UPDATE_LINEUP_NAME_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"` //阵容索引
	Name  string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`    //阵容名称
}

func (x *UPDATE_LINEUP_NAME_RSP) Reset() {
	*x = UPDATE_LINEUP_NAME_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_LINEUP_NAME_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_LINEUP_NAME_RSP) ProtoMessage() {}

func (x *UPDATE_LINEUP_NAME_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_LINEUP_NAME_RSP.ProtoReflect.Descriptor instead.
func (*UPDATE_LINEUP_NAME_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{35}
}

func (x *UPDATE_LINEUP_NAME_RSP) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *UPDATE_LINEUP_NAME_RSP) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SHOP_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                   //商品ID
	ShopType    int32        `protobuf:"varint,2,opt,name=shopType,proto3" json:"shopType,omitempty"`       //商品类型
	MoneyType   int32        `protobuf:"varint,3,opt,name=moneyType,proto3" json:"moneyType,omitempty"`     //货币类型
	OldPrice    int32        `protobuf:"varint,4,opt,name=oldPrice,proto3" json:"oldPrice,omitempty"`       //原价
	NewPrice    int32        `protobuf:"varint,5,opt,name=newPrice,proto3" json:"newPrice,omitempty"`       //现价
	SuperValue  int32        `protobuf:"varint,6,opt,name=superValue,proto3" json:"superValue,omitempty"`   //超值
	DropId      int32        `protobuf:"varint,7,opt,name=dropId,proto3" json:"dropId,omitempty"`           //掉落id
	RefreshTime int32        `protobuf:"varint,8,opt,name=refreshTime,proto3" json:"refreshTime,omitempty"` //重置时间
	Stack       int32        `protobuf:"varint,9,opt,name=stack,proto3" json:"stack,omitempty"`             //叠组
	Icon        string       `protobuf:"bytes,10,opt,name=icon,proto3" json:"icon,omitempty"`               //图标
	Name        string       `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`               //名字
	Dec         string       `protobuf:"bytes,12,opt,name=dec,proto3" json:"dec,omitempty"`                 //描述
	Gold        int64        `protobuf:"varint,13,opt,name=gold,proto3" json:"gold,omitempty"`              //金币
	Diamond     int64        `protobuf:"varint,14,opt,name=diamond,proto3" json:"diamond,omitempty"`        //钻石
	HeroList    []*SHOP_HERO `protobuf:"bytes,15,rep,name=heroList,proto3" json:"heroList,omitempty"`       //英雄id列表
	ShopBox     *SHOP_BOX    `protobuf:"bytes,16,opt,name=shopBox,proto3" json:"shopBox,omitempty"`         //宝箱商店返回宝箱内容
	Prop        string       `protobuf:"bytes,17,opt,name=prop,proto3" json:"prop,omitempty"`               //道具？待定
	Bought      int32        `protobuf:"varint,18,opt,name=bought,proto3" json:"bought,omitempty"`          //是否能购买  0 可以购买  1 不可以购买
	FirstExtra  int32        `protobuf:"varint,19,opt,name=firstExtra,proto3" json:"firstExtra,omitempty"`  //货币商店是否有首次购买奖励或是否有折扣 0 默认 没有 1 有
	ResetTime   int64        `protobuf:"varint,20,opt,name=resetTime,proto3" json:"resetTime,omitempty"`    //商品下次实际刷新时间戳
}

func (x *SHOP_DATA) Reset() {
	*x = SHOP_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SHOP_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SHOP_DATA) ProtoMessage() {}

func (x *SHOP_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SHOP_DATA.ProtoReflect.Descriptor instead.
func (*SHOP_DATA) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{36}
}

func (x *SHOP_DATA) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SHOP_DATA) GetShopType() int32 {
	if x != nil {
		return x.ShopType
	}
	return 0
}

func (x *SHOP_DATA) GetMoneyType() int32 {
	if x != nil {
		return x.MoneyType
	}
	return 0
}

func (x *SHOP_DATA) GetOldPrice() int32 {
	if x != nil {
		return x.OldPrice
	}
	return 0
}

func (x *SHOP_DATA) GetNewPrice() int32 {
	if x != nil {
		return x.NewPrice
	}
	return 0
}

func (x *SHOP_DATA) GetSuperValue() int32 {
	if x != nil {
		return x.SuperValue
	}
	return 0
}

func (x *SHOP_DATA) GetDropId() int32 {
	if x != nil {
		return x.DropId
	}
	return 0
}

func (x *SHOP_DATA) GetRefreshTime() int32 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

func (x *SHOP_DATA) GetStack() int32 {
	if x != nil {
		return x.Stack
	}
	return 0
}

func (x *SHOP_DATA) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *SHOP_DATA) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SHOP_DATA) GetDec() string {
	if x != nil {
		return x.Dec
	}
	return ""
}

func (x *SHOP_DATA) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *SHOP_DATA) GetDiamond() int64 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *SHOP_DATA) GetHeroList() []*SHOP_HERO {
	if x != nil {
		return x.HeroList
	}
	return nil
}

func (x *SHOP_DATA) GetShopBox() *SHOP_BOX {
	if x != nil {
		return x.ShopBox
	}
	return nil
}

func (x *SHOP_DATA) GetProp() string {
	if x != nil {
		return x.Prop
	}
	return ""
}

func (x *SHOP_DATA) GetBought() int32 {
	if x != nil {
		return x.Bought
	}
	return 0
}

func (x *SHOP_DATA) GetFirstExtra() int32 {
	if x != nil {
		return x.FirstExtra
	}
	return 0
}

func (x *SHOP_DATA) GetResetTime() int64 {
	if x != nil {
		return x.ResetTime
	}
	return 0
}

type SHOP_BOX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gold    []int64     `protobuf:"varint,1,rep,packed,name=gold,proto3" json:"gold,omitempty"`       //金币
	Diamond []int64     `protobuf:"varint,2,rep,packed,name=diamond,proto3" json:"diamond,omitempty"` //钻石
	BoxRole []*BOX_ROLE `protobuf:"bytes,3,rep,name=boxRole,proto3" json:"boxRole,omitempty"`         //角色列表
}

func (x *SHOP_BOX) Reset() {
	*x = SHOP_BOX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SHOP_BOX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SHOP_BOX) ProtoMessage() {}

func (x *SHOP_BOX) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SHOP_BOX.ProtoReflect.Descriptor instead.
func (*SHOP_BOX) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{37}
}

func (x *SHOP_BOX) GetGold() []int64 {
	if x != nil {
		return x.Gold
	}
	return nil
}

func (x *SHOP_BOX) GetDiamond() []int64 {
	if x != nil {
		return x.Diamond
	}
	return nil
}

func (x *SHOP_BOX) GetBoxRole() []*BOX_ROLE {
	if x != nil {
		return x.BoxRole
	}
	return nil
}

type BOX_ROLE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleType int32 `protobuf:"varint,1,opt,name=roleType,proto3" json:"roleType,omitempty"` //角色类型
	RoleNum  int32 `protobuf:"varint,2,opt,name=roleNum,proto3" json:"roleNum,omitempty"`   //角色数量
}

func (x *BOX_ROLE) Reset() {
	*x = BOX_ROLE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BOX_ROLE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BOX_ROLE) ProtoMessage() {}

func (x *BOX_ROLE) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BOX_ROLE.ProtoReflect.Descriptor instead.
func (*BOX_ROLE) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{38}
}

func (x *BOX_ROLE) GetRoleType() int32 {
	if x != nil {
		return x.RoleType
	}
	return 0
}

func (x *BOX_ROLE) GetRoleNum() int32 {
	if x != nil {
		return x.RoleNum
	}
	return 0
}

type SHOP_HERO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId  int32 `protobuf:"varint,1,opt,name=heroId,proto3" json:"heroId,omitempty"`   //英雄ID
	HeroNum int64 `protobuf:"varint,2,opt,name=heroNum,proto3" json:"heroNum,omitempty"` //英雄数量
}

func (x *SHOP_HERO) Reset() {
	*x = SHOP_HERO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SHOP_HERO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SHOP_HERO) ProtoMessage() {}

func (x *SHOP_HERO) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SHOP_HERO.ProtoReflect.Descriptor instead.
func (*SHOP_HERO) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{39}
}

func (x *SHOP_HERO) GetHeroId() int32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

func (x *SHOP_HERO) GetHeroNum() int64 {
	if x != nil {
		return x.HeroNum
	}
	return 0
}

//商品列表请求结构
type SHOP_LIST_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopIndex int32 `protobuf:"varint,1,opt,name=shopIndex,proto3" json:"shopIndex,omitempty"` //商城类型索引
	PageNum   int32 `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`     //页数
	PageSize  int32 `protobuf:"varint,3,opt,name=pageSize,proto3" json:"pageSize,omitempty"`   //当前页数物品数量大小
}

func (x *SHOP_LIST_REQ) Reset() {
	*x = SHOP_LIST_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SHOP_LIST_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SHOP_LIST_REQ) ProtoMessage() {}

func (x *SHOP_LIST_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SHOP_LIST_REQ.ProtoReflect.Descriptor instead.
func (*SHOP_LIST_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{40}
}

func (x *SHOP_LIST_REQ) GetShopIndex() int32 {
	if x != nil {
		return x.ShopIndex
	}
	return 0
}

func (x *SHOP_LIST_REQ) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *SHOP_LIST_REQ) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

//商品列表返回结构
type SHOP_LIST_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopType        int32        `protobuf:"varint,1,opt,name=shopType,proto3" json:"shopType,omitempty"`               //商店类型
	ResetTime       int64        `protobuf:"varint,2,opt,name=resetTime,proto3" json:"resetTime,omitempty"`             //刷新时间
	ResetFrequency  int32        `protobuf:"varint,3,opt,name=resetFrequency,proto3" json:"resetFrequency,omitempty"`   //刷新次数
	RemainFrequency int32        `protobuf:"varint,4,opt,name=remainFrequency,proto3" json:"remainFrequency,omitempty"` //剩余次数
	ShopList        []*SHOP_DATA `protobuf:"bytes,5,rep,name=shopList,proto3" json:"shopList,omitempty"`                //商品数据列表
	CardList        []*SHOP_CARD `protobuf:"bytes,6,rep,name=cardList,proto3" json:"cardList,omitempty"`                //特权商店列表
}

func (x *SHOP_LIST_RSP) Reset() {
	*x = SHOP_LIST_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SHOP_LIST_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SHOP_LIST_RSP) ProtoMessage() {}

func (x *SHOP_LIST_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SHOP_LIST_RSP.ProtoReflect.Descriptor instead.
func (*SHOP_LIST_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{41}
}

func (x *SHOP_LIST_RSP) GetShopType() int32 {
	if x != nil {
		return x.ShopType
	}
	return 0
}

func (x *SHOP_LIST_RSP) GetResetTime() int64 {
	if x != nil {
		return x.ResetTime
	}
	return 0
}

func (x *SHOP_LIST_RSP) GetResetFrequency() int32 {
	if x != nil {
		return x.ResetFrequency
	}
	return 0
}

func (x *SHOP_LIST_RSP) GetRemainFrequency() int32 {
	if x != nil {
		return x.RemainFrequency
	}
	return 0
}

func (x *SHOP_LIST_RSP) GetShopList() []*SHOP_DATA {
	if x != nil {
		return x.ShopList
	}
	return nil
}

func (x *SHOP_LIST_RSP) GetCardList() []*SHOP_CARD {
	if x != nil {
		return x.CardList
	}
	return nil
}

//商店刷新请求结构
type SHOP_RESET_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopType int32 `protobuf:"varint,1,opt,name=shopType,proto3" json:"shopType,omitempty"`
}

func (x *SHOP_RESET_REQ) Reset() {
	*x = SHOP_RESET_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SHOP_RESET_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SHOP_RESET_REQ) ProtoMessage() {}

func (x *SHOP_RESET_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SHOP_RESET_REQ.ProtoReflect.Descriptor instead.
func (*SHOP_RESET_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{42}
}

func (x *SHOP_RESET_REQ) GetShopType() int32 {
	if x != nil {
		return x.ShopType
	}
	return 0
}

//商品购买请求结构
type SHOP_BUY_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopId   int32 `protobuf:"varint,1,opt,name=shopId,proto3" json:"shopId,omitempty"`     //商品id
	ShopType int32 `protobuf:"varint,2,opt,name=shopType,proto3" json:"shopType,omitempty"` //商品类型
}

func (x *SHOP_BUY_REQ) Reset() {
	*x = SHOP_BUY_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SHOP_BUY_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SHOP_BUY_REQ) ProtoMessage() {}

func (x *SHOP_BUY_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SHOP_BUY_REQ.ProtoReflect.Descriptor instead.
func (*SHOP_BUY_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{43}
}

func (x *SHOP_BUY_REQ) GetShopId() int32 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *SHOP_BUY_REQ) GetShopType() int32 {
	if x != nil {
		return x.ShopType
	}
	return 0
}

//商品购买返回结构
type SHOP_BUY_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    int32        `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`     //购买结果 [1成功，2货币不足]
	ShopType  int32        `protobuf:"varint,2,opt,name=shopType,proto3" json:"shopType,omitempty"` //商店类型
	ShopId    int32        `protobuf:"varint,3,opt,name=shopId,proto3" json:"shopId,omitempty"`
	Gold      int64        `protobuf:"varint,4,opt,name=gold,proto3" json:"gold,omitempty"`           //金币
	Diamond   int64        `protobuf:"varint,5,opt,name=diamond,proto3" json:"diamond,omitempty"`     //钻石或者元宝
	HeroList  []*SHOP_HERO `protobuf:"bytes,6,rep,name=heroList,proto3" json:"heroList,omitempty"`    //英雄id和数量
	ResetTime int64        `protobuf:"varint,7,opt,name=resetTime,proto3" json:"resetTime,omitempty"` //商品实际刷新时间戳
	Prop      string       `protobuf:"bytes,8,opt,name=prop,proto3" json:"prop,omitempty"`            //道具？待定
}

func (x *SHOP_BUY_RSP) Reset() {
	*x = SHOP_BUY_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SHOP_BUY_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SHOP_BUY_RSP) ProtoMessage() {}

func (x *SHOP_BUY_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SHOP_BUY_RSP.ProtoReflect.Descriptor instead.
func (*SHOP_BUY_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{44}
}

func (x *SHOP_BUY_RSP) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *SHOP_BUY_RSP) GetShopType() int32 {
	if x != nil {
		return x.ShopType
	}
	return 0
}

func (x *SHOP_BUY_RSP) GetShopId() int32 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *SHOP_BUY_RSP) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *SHOP_BUY_RSP) GetDiamond() int64 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *SHOP_BUY_RSP) GetHeroList() []*SHOP_HERO {
	if x != nil {
		return x.HeroList
	}
	return nil
}

func (x *SHOP_BUY_RSP) GetResetTime() int64 {
	if x != nil {
		return x.ResetTime
	}
	return 0
}

func (x *SHOP_BUY_RSP) GetProp() string {
	if x != nil {
		return x.Prop
	}
	return ""
}

//商城卡结构
type SHOP_CARD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type   int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`   //卡类型
	Price  int32  `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"` //价格
	Icon   string `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Name   string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Desc   string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`      //描述
	Active int32  `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"` //是否已激活 0：未激活 1：激活
}

func (x *SHOP_CARD) Reset() {
	*x = SHOP_CARD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SHOP_CARD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SHOP_CARD) ProtoMessage() {}

func (x *SHOP_CARD) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SHOP_CARD.ProtoReflect.Descriptor instead.
func (*SHOP_CARD) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{45}
}

func (x *SHOP_CARD) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SHOP_CARD) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SHOP_CARD) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SHOP_CARD) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *SHOP_CARD) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SHOP_CARD) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SHOP_CARD) GetActive() int32 {
	if x != nil {
		return x.Active
	}
	return 0
}

//货币返回结构
type UPDATE_MONEY_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gold    int64 `protobuf:"varint,1,opt,name=gold,proto3" json:"gold,omitempty"`       //金币
	Diamond int64 `protobuf:"varint,2,opt,name=diamond,proto3" json:"diamond,omitempty"` //钻石或者元宝
}

func (x *UPDATE_MONEY_RSP) Reset() {
	*x = UPDATE_MONEY_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_MONEY_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_MONEY_RSP) ProtoMessage() {}

func (x *UPDATE_MONEY_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_MONEY_RSP.ProtoReflect.Descriptor instead.
func (*UPDATE_MONEY_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{46}
}

func (x *UPDATE_MONEY_RSP) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *UPDATE_MONEY_RSP) GetDiamond() int64 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

//道具
type PROP_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DropId  int32  `protobuf:"varint,3,opt,name=dropId,proto3" json:"dropId,omitempty"`
	Quality int32  `protobuf:"varint,4,opt,name=quality,proto3" json:"quality,omitempty"`
	Channel string `protobuf:"bytes,5,opt,name=channel,proto3" json:"channel,omitempty"`
	Desc    string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *PROP_DATA) Reset() {
	*x = PROP_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PROP_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PROP_DATA) ProtoMessage() {}

func (x *PROP_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PROP_DATA.ProtoReflect.Descriptor instead.
func (*PROP_DATA) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{47}
}

func (x *PROP_DATA) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PROP_DATA) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PROP_DATA) GetDropId() int32 {
	if x != nil {
		return x.DropId
	}
	return 0
}

func (x *PROP_DATA) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *PROP_DATA) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *PROP_DATA) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type TASK_LIST_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TASK_LIST_REQ) Reset() {
	*x = TASK_LIST_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TASK_LIST_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TASK_LIST_REQ) ProtoMessage() {}

func (x *TASK_LIST_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TASK_LIST_REQ.ProtoReflect.Descriptor instead.
func (*TASK_LIST_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{48}
}

type TASK_LIST_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskList []*TASK_DATA `protobuf:"bytes,1,rep,name=taskList,proto3" json:"taskList,omitempty"`
}

func (x *TASK_LIST_RES) Reset() {
	*x = TASK_LIST_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TASK_LIST_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TASK_LIST_RES) ProtoMessage() {}

func (x *TASK_LIST_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TASK_LIST_RES.ProtoReflect.Descriptor instead.
func (*TASK_LIST_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{49}
}

func (x *TASK_LIST_RES) GetTaskList() []*TASK_DATA {
	if x != nil {
		return x.TaskList
	}
	return nil
}

//任务数据
type TASK_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type          int32     `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`   //任务类型 0：每日任务 1：活跃任务 2：成长任务 3：活动任务
	Stack         int32     `protobuf:"varint,3,opt,name=stack,proto3" json:"stack,omitempty"` //任务模式类型  对应不同描述的任务
	StartTime     int32     `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       int32     `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Desc          string    `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	OpenCondition int32     `protobuf:"varint,7,opt,name=openCondition,proto3" json:"openCondition,omitempty"`
	BeforeTask    int32     `protobuf:"varint,8,opt,name=before_task,json=beforeTask,proto3" json:"before_task,omitempty"`
	Status        int32     `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`              //任务状态  0：未开启 1：已完成 2：未完成 3：已领取奖励
	Count         int32     `protobuf:"varint,10,opt,name=count,proto3" json:"count,omitempty"`               //总次数
	CurrentCount  int32     `protobuf:"varint,11,opt,name=currentCount,proto3" json:"currentCount,omitempty"` //当前次数
	Quality       int32     `protobuf:"varint,12,opt,name=quality,proto3" json:"quality,omitempty"`
	Icon          string    `protobuf:"bytes,13,opt,name=icon,proto3" json:"icon,omitempty"`
	Box           *TASK_BOX `protobuf:"bytes,14,opt,name=box,proto3" json:"box,omitempty"`
}

func (x *TASK_DATA) Reset() {
	*x = TASK_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TASK_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TASK_DATA) ProtoMessage() {}

func (x *TASK_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TASK_DATA.ProtoReflect.Descriptor instead.
func (*TASK_DATA) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{50}
}

func (x *TASK_DATA) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TASK_DATA) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TASK_DATA) GetStack() int32 {
	if x != nil {
		return x.Stack
	}
	return 0
}

func (x *TASK_DATA) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TASK_DATA) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TASK_DATA) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *TASK_DATA) GetOpenCondition() int32 {
	if x != nil {
		return x.OpenCondition
	}
	return 0
}

func (x *TASK_DATA) GetBeforeTask() int32 {
	if x != nil {
		return x.BeforeTask
	}
	return 0
}

func (x *TASK_DATA) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TASK_DATA) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TASK_DATA) GetCurrentCount() int32 {
	if x != nil {
		return x.CurrentCount
	}
	return 0
}

func (x *TASK_DATA) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

func (x *TASK_DATA) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *TASK_DATA) GetBox() *TASK_BOX {
	if x != nil {
		return x.Box
	}
	return nil
}

type TASK_BOX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gold    []int64     `protobuf:"varint,1,rep,packed,name=gold,proto3" json:"gold,omitempty"`       //金币
	Diamond []int64     `protobuf:"varint,2,rep,packed,name=diamond,proto3" json:"diamond,omitempty"` //钻石
	BoxRole []*BOX_ROLE `protobuf:"bytes,3,rep,name=boxRole,proto3" json:"boxRole,omitempty"`         //角色列表
}

func (x *TASK_BOX) Reset() {
	*x = TASK_BOX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TASK_BOX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TASK_BOX) ProtoMessage() {}

func (x *TASK_BOX) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TASK_BOX.ProtoReflect.Descriptor instead.
func (*TASK_BOX) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{51}
}

func (x *TASK_BOX) GetGold() []int64 {
	if x != nil {
		return x.Gold
	}
	return nil
}

func (x *TASK_BOX) GetDiamond() []int64 {
	if x != nil {
		return x.Diamond
	}
	return nil
}

func (x *TASK_BOX) GetBoxRole() []*BOX_ROLE {
	if x != nil {
		return x.BoxRole
	}
	return nil
}

type FINISH_TASK_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId   int32 `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	TaskType int32 `protobuf:"varint,2,opt,name=taskType,proto3" json:"taskType,omitempty"`
	Stack    int32 `protobuf:"varint,3,opt,name=stack,proto3" json:"stack,omitempty"`
}

func (x *FINISH_TASK_REQ) Reset() {
	*x = FINISH_TASK_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FINISH_TASK_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FINISH_TASK_REQ) ProtoMessage() {}

func (x *FINISH_TASK_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FINISH_TASK_REQ.ProtoReflect.Descriptor instead.
func (*FINISH_TASK_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{52}
}

func (x *FINISH_TASK_REQ) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FINISH_TASK_REQ) GetTaskType() int32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *FINISH_TASK_REQ) GetStack() int32 {
	if x != nil {
		return x.Stack
	}
	return 0
}

type FINISH_TASK_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskType int32        `protobuf:"varint,1,opt,name=taskType,proto3" json:"taskType,omitempty"` //任务类型
	TaskId   int32        `protobuf:"varint,2,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Stack    int32        `protobuf:"varint,3,opt,name=stack,proto3" json:"stack,omitempty"`
	Gold     int64        `protobuf:"varint,4,opt,name=gold,proto3" json:"gold,omitempty"`        //金币
	Diamond  int64        `protobuf:"varint,5,opt,name=diamond,proto3" json:"diamond,omitempty"`  //钻石或者元宝
	HeroList []*SHOP_HERO `protobuf:"bytes,6,rep,name=heroList,proto3" json:"heroList,omitempty"` //英雄id和数量
	NextTask *TASK_DATA   `protobuf:"bytes,7,opt,name=nextTask,proto3" json:"nextTask,omitempty"` //下个任务
}

func (x *FINISH_TASK_RES) Reset() {
	*x = FINISH_TASK_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FINISH_TASK_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FINISH_TASK_RES) ProtoMessage() {}

func (x *FINISH_TASK_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FINISH_TASK_RES.ProtoReflect.Descriptor instead.
func (*FINISH_TASK_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{53}
}

func (x *FINISH_TASK_RES) GetTaskType() int32 {
	if x != nil {
		return x.TaskType
	}
	return 0
}

func (x *FINISH_TASK_RES) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *FINISH_TASK_RES) GetStack() int32 {
	if x != nil {
		return x.Stack
	}
	return 0
}

func (x *FINISH_TASK_RES) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *FINISH_TASK_RES) GetDiamond() int64 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *FINISH_TASK_RES) GetHeroList() []*SHOP_HERO {
	if x != nil {
		return x.HeroList
	}
	return nil
}

func (x *FINISH_TASK_RES) GetNextTask() *TASK_DATA {
	if x != nil {
		return x.NextTask
	}
	return nil
}

type UPDATE_TASK_STATUS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *TASK_DATA `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *UPDATE_TASK_STATUS) Reset() {
	*x = UPDATE_TASK_STATUS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPDATE_TASK_STATUS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPDATE_TASK_STATUS) ProtoMessage() {}

func (x *UPDATE_TASK_STATUS) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPDATE_TASK_STATUS.ProtoReflect.Descriptor instead.
func (*UPDATE_TASK_STATUS) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{54}
}

func (x *UPDATE_TASK_STATUS) GetTask() *TASK_DATA {
	if x != nil {
		return x.Task
	}
	return nil
}

//任务进度测试接口
type TASK_TEST_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stack int32 `protobuf:"varint,1,opt,name=stack,proto3" json:"stack,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *TASK_TEST_REQ) Reset() {
	*x = TASK_TEST_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TASK_TEST_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TASK_TEST_REQ) ProtoMessage() {}

func (x *TASK_TEST_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TASK_TEST_REQ.ProtoReflect.Descriptor instead.
func (*TASK_TEST_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{55}
}

func (x *TASK_TEST_REQ) GetStack() int32 {
	if x != nil {
		return x.Stack
	}
	return 0
}

func (x *TASK_TEST_REQ) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

//任务进度测试接口
type TASK_TEST_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *TASK_TEST_RES) Reset() {
	*x = TASK_TEST_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TASK_TEST_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TASK_TEST_RES) ProtoMessage() {}

func (x *TASK_TEST_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TASK_TEST_RES.ProtoReflect.Descriptor instead.
func (*TASK_TEST_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{56}
}

func (x *TASK_TEST_RES) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type CARD_SCORE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CARD_SCORE_REQ) Reset() {
	*x = CARD_SCORE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CARD_SCORE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CARD_SCORE_REQ) ProtoMessage() {}

func (x *CARD_SCORE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CARD_SCORE_REQ.ProtoReflect.Descriptor instead.
func (*CARD_SCORE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{57}
}

func (x *CARD_SCORE_REQ) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type CARD_SCORE_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     int32        `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // 1月卡 2至尊卡
	EndTime  int64        `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	CardList []*CARD_DATA `protobuf:"bytes,3,rep,name=cardList,proto3" json:"cardList,omitempty"`
}

func (x *CARD_SCORE_RES) Reset() {
	*x = CARD_SCORE_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CARD_SCORE_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CARD_SCORE_RES) ProtoMessage() {}

func (x *CARD_SCORE_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CARD_SCORE_RES.ProtoReflect.Descriptor instead.
func (*CARD_SCORE_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{58}
}

func (x *CARD_SCORE_RES) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CARD_SCORE_RES) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *CARD_SCORE_RES) GetCardList() []*CARD_DATA {
	if x != nil {
		return x.CardList
	}
	return nil
}

type CARD_GET_REWARD_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardType   int32 `protobuf:"varint,1,opt,name=cardType,proto3" json:"cardType,omitempty"`
	RewardId   int32 `protobuf:"varint,2,opt,name=rewardId,proto3" json:"rewardId,omitempty"`
	RewardType int32 `protobuf:"varint,3,opt,name=rewardType,proto3" json:"rewardType,omitempty"` //奖励类型 0:普通奖励  1:开通奖励
	ReceiveAll int32 `protobuf:"varint,4,opt,name=receiveAll,proto3" json:"receiveAll,omitempty"` // 是否一键领取 0:否 1:是
}

func (x *CARD_GET_REWARD_REQ) Reset() {
	*x = CARD_GET_REWARD_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CARD_GET_REWARD_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CARD_GET_REWARD_REQ) ProtoMessage() {}

func (x *CARD_GET_REWARD_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CARD_GET_REWARD_REQ.ProtoReflect.Descriptor instead.
func (*CARD_GET_REWARD_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{59}
}

func (x *CARD_GET_REWARD_REQ) GetCardType() int32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *CARD_GET_REWARD_REQ) GetRewardId() int32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *CARD_GET_REWARD_REQ) GetRewardType() int32 {
	if x != nil {
		return x.RewardType
	}
	return 0
}

func (x *CARD_GET_REWARD_REQ) GetReceiveAll() int32 {
	if x != nil {
		return x.ReceiveAll
	}
	return 0
}

type CARD_GET_REWARD_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardType   int32        `protobuf:"varint,1,opt,name=cardType,proto3" json:"cardType,omitempty"` //特权卡类型
	RewardId   int32        `protobuf:"varint,2,opt,name=rewardId,proto3" json:"rewardId,omitempty"`
	RewardType int32        `protobuf:"varint,3,opt,name=rewardType,proto3" json:"rewardType,omitempty"`
	ReceiveAll int32        `protobuf:"varint,4,opt,name=receiveAll,proto3" json:"receiveAll,omitempty"`
	Gold       int64        `protobuf:"varint,5,opt,name=gold,proto3" json:"gold,omitempty"`        //金币
	Diamond    int64        `protobuf:"varint,6,opt,name=diamond,proto3" json:"diamond,omitempty"`  //钻石或者元宝
	HeroList   []*SHOP_HERO `protobuf:"bytes,7,rep,name=heroList,proto3" json:"heroList,omitempty"` //英雄id和数量
}

func (x *CARD_GET_REWARD_RES) Reset() {
	*x = CARD_GET_REWARD_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CARD_GET_REWARD_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CARD_GET_REWARD_RES) ProtoMessage() {}

func (x *CARD_GET_REWARD_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CARD_GET_REWARD_RES.ProtoReflect.Descriptor instead.
func (*CARD_GET_REWARD_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{60}
}

func (x *CARD_GET_REWARD_RES) GetCardType() int32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *CARD_GET_REWARD_RES) GetRewardId() int32 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *CARD_GET_REWARD_RES) GetRewardType() int32 {
	if x != nil {
		return x.RewardType
	}
	return 0
}

func (x *CARD_GET_REWARD_RES) GetReceiveAll() int32 {
	if x != nil {
		return x.ReceiveAll
	}
	return 0
}

func (x *CARD_GET_REWARD_RES) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *CARD_GET_REWARD_RES) GetDiamond() int64 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *CARD_GET_REWARD_RES) GetHeroList() []*SHOP_HERO {
	if x != nil {
		return x.HeroList
	}
	return nil
}

type CARD_TEST_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardType  int32 `protobuf:"varint,1,opt,name=cardType,proto3" json:"cardType,omitempty"`
	Count     int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	CountType int32 `protobuf:"varint,3,opt,name=countType,proto3" json:"countType,omitempty"` //0:加 1:减
}

func (x *CARD_TEST_REQ) Reset() {
	*x = CARD_TEST_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CARD_TEST_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CARD_TEST_REQ) ProtoMessage() {}

func (x *CARD_TEST_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CARD_TEST_REQ.ProtoReflect.Descriptor instead.
func (*CARD_TEST_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{61}
}

func (x *CARD_TEST_REQ) GetCardType() int32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *CARD_TEST_REQ) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CARD_TEST_REQ) GetCountType() int32 {
	if x != nil {
		return x.CountType
	}
	return 0
}

type CARD_TEST_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CARD_TEST_RES) Reset() {
	*x = CARD_TEST_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CARD_TEST_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CARD_TEST_RES) ProtoMessage() {}

func (x *CARD_TEST_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CARD_TEST_RES.ProtoReflect.Descriptor instead.
func (*CARD_TEST_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{62}
}

func (x *CARD_TEST_RES) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type CARD_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NormalStatus int32 `protobuf:"varint,2,opt,name=normalStatus,proto3" json:"normalStatus,omitempty"`
	OpenStatus   int32 `protobuf:"varint,3,opt,name=openStatus,proto3" json:"openStatus,omitempty"`
}

func (x *CARD_DATA) Reset() {
	*x = CARD_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CARD_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CARD_DATA) ProtoMessage() {}

func (x *CARD_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CARD_DATA.ProtoReflect.Descriptor instead.
func (*CARD_DATA) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{63}
}

func (x *CARD_DATA) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CARD_DATA) GetNormalStatus() int32 {
	if x != nil {
		return x.NormalStatus
	}
	return 0
}

func (x *CARD_DATA) GetOpenStatus() int32 {
	if x != nil {
		return x.OpenStatus
	}
	return 0
}

type MAIL_LIST_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *MAIL_LIST_REQ) Reset() {
	*x = MAIL_LIST_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAIL_LIST_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAIL_LIST_REQ) ProtoMessage() {}

func (x *MAIL_LIST_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAIL_LIST_REQ.ProtoReflect.Descriptor instead.
func (*MAIL_LIST_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{64}
}

func (x *MAIL_LIST_REQ) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *MAIL_LIST_REQ) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type MAIL_LIST_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32        `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit    int32        `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	MailList []*MAIL_DATA `protobuf:"bytes,3,rep,name=mailList,proto3" json:"mailList,omitempty"`
}

func (x *MAIL_LIST_RES) Reset() {
	*x = MAIL_LIST_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAIL_LIST_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAIL_LIST_RES) ProtoMessage() {}

func (x *MAIL_LIST_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAIL_LIST_RES.ProtoReflect.Descriptor instead.
func (*MAIL_LIST_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{65}
}

func (x *MAIL_LIST_RES) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *MAIL_LIST_RES) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *MAIL_LIST_RES) GetMailList() []*MAIL_DATA {
	if x != nil {
		return x.MailList
	}
	return nil
}

type MAIL_READ_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailId int32 `protobuf:"varint,1,opt,name=mailId,proto3" json:"mailId,omitempty"`
}

func (x *MAIL_READ_REQ) Reset() {
	*x = MAIL_READ_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAIL_READ_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAIL_READ_REQ) ProtoMessage() {}

func (x *MAIL_READ_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAIL_READ_REQ.ProtoReflect.Descriptor instead.
func (*MAIL_READ_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{66}
}

func (x *MAIL_READ_REQ) GetMailId() int32 {
	if x != nil {
		return x.MailId
	}
	return 0
}

type MAIL_READ_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *MAIL_READ_RES) Reset() {
	*x = MAIL_READ_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAIL_READ_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAIL_READ_RES) ProtoMessage() {}

func (x *MAIL_READ_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAIL_READ_RES.ProtoReflect.Descriptor instead.
func (*MAIL_READ_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{67}
}

func (x *MAIL_READ_RES) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type MAIL_RECEIVE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailId int32 `protobuf:"varint,1,opt,name=mailId,proto3" json:"mailId,omitempty"`
}

func (x *MAIL_RECEIVE_REQ) Reset() {
	*x = MAIL_RECEIVE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAIL_RECEIVE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAIL_RECEIVE_REQ) ProtoMessage() {}

func (x *MAIL_RECEIVE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAIL_RECEIVE_REQ.ProtoReflect.Descriptor instead.
func (*MAIL_RECEIVE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{68}
}

func (x *MAIL_RECEIVE_REQ) GetMailId() int32 {
	if x != nil {
		return x.MailId
	}
	return 0
}

type MAIL_RECEIVE_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MailId int32      `protobuf:"varint,1,opt,name=mailId,proto3" json:"mailId,omitempty"`
	Reward *DROP_DATA `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *MAIL_RECEIVE_RES) Reset() {
	*x = MAIL_RECEIVE_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAIL_RECEIVE_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAIL_RECEIVE_RES) ProtoMessage() {}

func (x *MAIL_RECEIVE_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAIL_RECEIVE_RES.ProtoReflect.Descriptor instead.
func (*MAIL_RECEIVE_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{69}
}

func (x *MAIL_RECEIVE_RES) GetMailId() int32 {
	if x != nil {
		return x.MailId
	}
	return 0
}

func (x *MAIL_RECEIVE_RES) GetReward() *DROP_DATA {
	if x != nil {
		return x.Reward
	}
	return nil
}

type MAIL_UPDATE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *MAIL_DATA `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MAIL_UPDATE) Reset() {
	*x = MAIL_UPDATE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAIL_UPDATE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAIL_UPDATE) ProtoMessage() {}

func (x *MAIL_UPDATE) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAIL_UPDATE.ProtoReflect.Descriptor instead.
func (*MAIL_UPDATE) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{70}
}

func (x *MAIL_UPDATE) GetData() *MAIL_DATA {
	if x != nil {
		return x.Data
	}
	return nil
}

type MAIL_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status   int32        `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Read     int32        `protobuf:"varint,3,opt,name=read,proto3" json:"read,omitempty"`
	MailType int32        `protobuf:"varint,4,opt,name=mailType,proto3" json:"mailType,omitempty"`
	Title    string       `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Content  string       `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Reward   *MAIL_REWARD `protobuf:"bytes,7,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *MAIL_DATA) Reset() {
	*x = MAIL_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAIL_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAIL_DATA) ProtoMessage() {}

func (x *MAIL_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAIL_DATA.ProtoReflect.Descriptor instead.
func (*MAIL_DATA) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{71}
}

func (x *MAIL_DATA) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MAIL_DATA) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *MAIL_DATA) GetRead() int32 {
	if x != nil {
		return x.Read
	}
	return 0
}

func (x *MAIL_DATA) GetMailType() int32 {
	if x != nil {
		return x.MailType
	}
	return 0
}

func (x *MAIL_DATA) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MAIL_DATA) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MAIL_DATA) GetReward() *MAIL_REWARD {
	if x != nil {
		return x.Reward
	}
	return nil
}

type MAIL_REWARD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gold    int64        `protobuf:"varint,1,opt,name=gold,proto3" json:"gold,omitempty"`
	Diamond int64        `protobuf:"varint,2,opt,name=diamond,proto3" json:"diamond,omitempty"`
	List    []*MAIL_PROP `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MAIL_REWARD) Reset() {
	*x = MAIL_REWARD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAIL_REWARD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAIL_REWARD) ProtoMessage() {}

func (x *MAIL_REWARD) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAIL_REWARD.ProtoReflect.Descriptor instead.
func (*MAIL_REWARD) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{72}
}

func (x *MAIL_REWARD) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *MAIL_REWARD) GetDiamond() int64 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *MAIL_REWARD) GetList() []*MAIL_PROP {
	if x != nil {
		return x.List
	}
	return nil
}

type MAIL_PROP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Prop_Type `protobuf:"varint,1,opt,name=type,proto3,enum=msg.Prop_Type" json:"type,omitempty"`
	Id   int32     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Num  int32     `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *MAIL_PROP) Reset() {
	*x = MAIL_PROP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MAIL_PROP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MAIL_PROP) ProtoMessage() {}

func (x *MAIL_PROP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MAIL_PROP.ProtoReflect.Descriptor instead.
func (*MAIL_PROP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{73}
}

func (x *MAIL_PROP) GetType() Prop_Type {
	if x != nil {
		return x.Type
	}
	return Prop_Type_Box
}

func (x *MAIL_PROP) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MAIL_PROP) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

type DROP_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gold     int64        `protobuf:"varint,1,opt,name=gold,proto3" json:"gold,omitempty"`        //金币
	Diamond  int64        `protobuf:"varint,2,opt,name=diamond,proto3" json:"diamond,omitempty"`  //钻石或者元宝
	HeroList []*SHOP_HERO `protobuf:"bytes,3,rep,name=heroList,proto3" json:"heroList,omitempty"` //英雄id和数量
}

func (x *DROP_DATA) Reset() {
	*x = DROP_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DROP_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DROP_DATA) ProtoMessage() {}

func (x *DROP_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DROP_DATA.ProtoReflect.Descriptor instead.
func (*DROP_DATA) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{74}
}

func (x *DROP_DATA) GetGold() int64 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *DROP_DATA) GetDiamond() int64 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *DROP_DATA) GetHeroList() []*SHOP_HERO {
	if x != nil {
		return x.HeroList
	}
	return nil
}

type COOPERATION_CHEST_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *COOPERATION_CHEST_REQ) Reset() {
	*x = COOPERATION_CHEST_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *COOPERATION_CHEST_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*COOPERATION_CHEST_REQ) ProtoMessage() {}

func (x *COOPERATION_CHEST_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use COOPERATION_CHEST_REQ.ProtoReflect.Descriptor instead.
func (*COOPERATION_CHEST_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{75}
}

func (x *COOPERATION_CHEST_REQ) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type COOPERATION_CHEST_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward         *DROP_DATA `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
	KeyRemainCount int32      `protobuf:"varint,2,opt,name=keyRemainCount,proto3" json:"keyRemainCount,omitempty"` //剩余合作宝箱钥匙数
}

func (x *COOPERATION_CHEST_RES) Reset() {
	*x = COOPERATION_CHEST_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *COOPERATION_CHEST_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*COOPERATION_CHEST_RES) ProtoMessage() {}

func (x *COOPERATION_CHEST_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use COOPERATION_CHEST_RES.ProtoReflect.Descriptor instead.
func (*COOPERATION_CHEST_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{76}
}

func (x *COOPERATION_CHEST_RES) GetReward() *DROP_DATA {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *COOPERATION_CHEST_RES) GetKeyRemainCount() int32 {
	if x != nil {
		return x.KeyRemainCount
	}
	return 0
}

type COOPERATION_KEY_TEST_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *COOPERATION_KEY_TEST_REQ) Reset() {
	*x = COOPERATION_KEY_TEST_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *COOPERATION_KEY_TEST_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*COOPERATION_KEY_TEST_REQ) ProtoMessage() {}

func (x *COOPERATION_KEY_TEST_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use COOPERATION_KEY_TEST_REQ.ProtoReflect.Descriptor instead.
func (*COOPERATION_KEY_TEST_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{77}
}

func (x *COOPERATION_KEY_TEST_REQ) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type COOPERATION_KEY_TEST_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *COOPERATION_KEY_TEST_RES) Reset() {
	*x = COOPERATION_KEY_TEST_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *COOPERATION_KEY_TEST_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*COOPERATION_KEY_TEST_RES) ProtoMessage() {}

func (x *COOPERATION_KEY_TEST_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use COOPERATION_KEY_TEST_RES.ProtoReflect.Descriptor instead.
func (*COOPERATION_KEY_TEST_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{78}
}

func (x *COOPERATION_KEY_TEST_RES) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type BATTLE_MATCH_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType BattleType       `protobuf:"varint,1,opt,name=battleType,proto3,enum=msg.BattleType" json:"battleType,omitempty"`
	Lineup     []*BATTLE_LINEUP `protobuf:"bytes,2,rep,name=lineup,proto3" json:"lineup,omitempty"`
}

func (x *BATTLE_MATCH_REQ) Reset() {
	*x = BATTLE_MATCH_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BATTLE_MATCH_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BATTLE_MATCH_REQ) ProtoMessage() {}

func (x *BATTLE_MATCH_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BATTLE_MATCH_REQ.ProtoReflect.Descriptor instead.
func (*BATTLE_MATCH_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{79}
}

func (x *BATTLE_MATCH_REQ) GetBattleType() BattleType {
	if x != nil {
		return x.BattleType
	}
	return BattleType_Normal
}

func (x *BATTLE_MATCH_REQ) GetLineup() []*BATTLE_LINEUP {
	if x != nil {
		return x.Lineup
	}
	return nil
}

type BATTLE_MATCH_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType  BattleType    `protobuf:"varint,1,opt,name=battleType,proto3,enum=msg.BattleType" json:"battleType,omitempty"`
	MatchPlayer *MATCH_PLAYER `protobuf:"bytes,2,opt,name=matchPlayer,proto3" json:"matchPlayer,omitempty"`
	RoomId      string        `protobuf:"bytes,3,opt,name=roomId,proto3" json:"roomId,omitempty"` //房间号
}

func (x *BATTLE_MATCH_RES) Reset() {
	*x = BATTLE_MATCH_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BATTLE_MATCH_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BATTLE_MATCH_RES) ProtoMessage() {}

func (x *BATTLE_MATCH_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BATTLE_MATCH_RES.ProtoReflect.Descriptor instead.
func (*BATTLE_MATCH_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{80}
}

func (x *BATTLE_MATCH_RES) GetBattleType() BattleType {
	if x != nil {
		return x.BattleType
	}
	return BattleType_Normal
}

func (x *BATTLE_MATCH_RES) GetMatchPlayer() *MATCH_PLAYER {
	if x != nil {
		return x.MatchPlayer
	}
	return nil
}

func (x *BATTLE_MATCH_RES) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type BATTLE_MATCH_CANCEL_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType BattleType `protobuf:"varint,1,opt,name=battleType,proto3,enum=msg.BattleType" json:"battleType,omitempty"`
}

func (x *BATTLE_MATCH_CANCEL_REQ) Reset() {
	*x = BATTLE_MATCH_CANCEL_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BATTLE_MATCH_CANCEL_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BATTLE_MATCH_CANCEL_REQ) ProtoMessage() {}

func (x *BATTLE_MATCH_CANCEL_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BATTLE_MATCH_CANCEL_REQ.ProtoReflect.Descriptor instead.
func (*BATTLE_MATCH_CANCEL_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{81}
}

func (x *BATTLE_MATCH_CANCEL_REQ) GetBattleType() BattleType {
	if x != nil {
		return x.BattleType
	}
	return BattleType_Normal
}

type BATTLE_MATCH_CANCEL_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *BATTLE_MATCH_CANCEL_RES) Reset() {
	*x = BATTLE_MATCH_CANCEL_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BATTLE_MATCH_CANCEL_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BATTLE_MATCH_CANCEL_RES) ProtoMessage() {}

func (x *BATTLE_MATCH_CANCEL_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BATTLE_MATCH_CANCEL_RES.ProtoReflect.Descriptor instead.
func (*BATTLE_MATCH_CANCEL_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{82}
}

func (x *BATTLE_MATCH_CANCEL_RES) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type BATTLE_SETTLE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type            int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` //0匹配对战 1合作模式
	RoundNum        int32  `protobuf:"varint,2,opt,name=roundNum,proto3" json:"roundNum,omitempty"`
	Key             int32  `protobuf:"varint,3,opt,name=key,proto3" json:"key,omitempty"`
	Result          int32  `protobuf:"varint,4,opt,name=result,proto3" json:"result,omitempty"`                   //战斗结果 0失败 1胜利
	HeroMixMaxLevel int32  `protobuf:"varint,5,opt,name=HeroMixMaxLevel,proto3" json:"HeroMixMaxLevel,omitempty"` //该局战斗合成的最高星级英雄
	RoomId          string `protobuf:"bytes,6,opt,name=roomId,proto3" json:"roomId,omitempty"`                    //房间号
	Time            int32  `protobuf:"varint,7,opt,name=time,proto3" json:"time,omitempty"`                       //战斗结束所用时间
}

func (x *BATTLE_SETTLE_REQ) Reset() {
	*x = BATTLE_SETTLE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BATTLE_SETTLE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BATTLE_SETTLE_REQ) ProtoMessage() {}

func (x *BATTLE_SETTLE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BATTLE_SETTLE_REQ.ProtoReflect.Descriptor instead.
func (*BATTLE_SETTLE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{83}
}

func (x *BATTLE_SETTLE_REQ) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BATTLE_SETTLE_REQ) GetRoundNum() int32 {
	if x != nil {
		return x.RoundNum
	}
	return 0
}

func (x *BATTLE_SETTLE_REQ) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *BATTLE_SETTLE_REQ) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *BATTLE_SETTLE_REQ) GetHeroMixMaxLevel() int32 {
	if x != nil {
		return x.HeroMixMaxLevel
	}
	return 0
}

func (x *BATTLE_SETTLE_REQ) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *BATTLE_SETTLE_REQ) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

type BATTLE_SETTLE_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    int32               `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`       //0匹配对战 1合作模式
	Exp     int32               `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`         //获得经验
	Gold    int32               `protobuf:"varint,3,opt,name=gold,proto3" json:"gold,omitempty"`       //获得金币
	Diamond int32               `protobuf:"varint,4,opt,name=diamond,proto3" json:"diamond,omitempty"` //获得钻石
	Score   int32               `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`     //获得积分
	Self    *BATTLE_PLAYER_DATA `protobuf:"bytes,6,opt,name=self,proto3" json:"self,omitempty"`        //玩家自己的数据
	Other   *BATTLE_PLAYER_DATA `protobuf:"bytes,7,opt,name=other,proto3" json:"other,omitempty"`      //对方玩家数据
}

func (x *BATTLE_SETTLE_RES) Reset() {
	*x = BATTLE_SETTLE_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BATTLE_SETTLE_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BATTLE_SETTLE_RES) ProtoMessage() {}

func (x *BATTLE_SETTLE_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BATTLE_SETTLE_RES.ProtoReflect.Descriptor instead.
func (*BATTLE_SETTLE_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{84}
}

func (x *BATTLE_SETTLE_RES) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *BATTLE_SETTLE_RES) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *BATTLE_SETTLE_RES) GetGold() int32 {
	if x != nil {
		return x.Gold
	}
	return 0
}

func (x *BATTLE_SETTLE_RES) GetDiamond() int32 {
	if x != nil {
		return x.Diamond
	}
	return 0
}

func (x *BATTLE_SETTLE_RES) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *BATTLE_SETTLE_RES) GetSelf() *BATTLE_PLAYER_DATA {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *BATTLE_SETTLE_RES) GetOther() *BATTLE_PLAYER_DATA {
	if x != nil {
		return x.Other
	}
	return nil
}

type BATTLE_PLAYER_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	PvpWinOdds  int32  `protobuf:"varint,2,opt,name=pvpWinOdds,proto3" json:"pvpWinOdds,omitempty"`
	Result      int32  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	SeasonScore int32  `protobuf:"varint,4,opt,name=seasonScore,proto3" json:"seasonScore,omitempty"`
}

func (x *BATTLE_PLAYER_DATA) Reset() {
	*x = BATTLE_PLAYER_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BATTLE_PLAYER_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BATTLE_PLAYER_DATA) ProtoMessage() {}

func (x *BATTLE_PLAYER_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BATTLE_PLAYER_DATA.ProtoReflect.Descriptor instead.
func (*BATTLE_PLAYER_DATA) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{85}
}

func (x *BATTLE_PLAYER_DATA) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *BATTLE_PLAYER_DATA) GetPvpWinOdds() int32 {
	if x != nil {
		return x.PvpWinOdds
	}
	return 0
}

func (x *BATTLE_PLAYER_DATA) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *BATTLE_PLAYER_DATA) GetSeasonScore() int32 {
	if x != nil {
		return x.SeasonScore
	}
	return 0
}

type BATTLE_LINEUP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId           int32 `protobuf:"varint,1,opt,name=heroId,proto3" json:"heroId,omitempty"`
	OutsideHeroLevel int32 `protobuf:"varint,2,opt,name=outsideHeroLevel,proto3" json:"outsideHeroLevel,omitempty"`
}

func (x *BATTLE_LINEUP) Reset() {
	*x = BATTLE_LINEUP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BATTLE_LINEUP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BATTLE_LINEUP) ProtoMessage() {}

func (x *BATTLE_LINEUP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BATTLE_LINEUP.ProtoReflect.Descriptor instead.
func (*BATTLE_LINEUP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{86}
}

func (x *BATTLE_LINEUP) GetHeroId() int32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

func (x *BATTLE_LINEUP) GetOutsideHeroLevel() int32 {
	if x != nil {
		return x.OutsideHeroLevel
	}
	return 0
}

//挑战模式匹配请求
type BATTLE_CHALLENGE_MATCH_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType BattleType       `protobuf:"varint,1,opt,name=battleType,proto3,enum=msg.BattleType" json:"battleType,omitempty"`
	Lineup     []*BATTLE_LINEUP `protobuf:"bytes,2,rep,name=lineup,proto3" json:"lineup,omitempty"`
}

func (x *BATTLE_CHALLENGE_MATCH_REQ) Reset() {
	*x = BATTLE_CHALLENGE_MATCH_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BATTLE_CHALLENGE_MATCH_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BATTLE_CHALLENGE_MATCH_REQ) ProtoMessage() {}

func (x *BATTLE_CHALLENGE_MATCH_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BATTLE_CHALLENGE_MATCH_REQ.ProtoReflect.Descriptor instead.
func (*BATTLE_CHALLENGE_MATCH_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{87}
}

func (x *BATTLE_CHALLENGE_MATCH_REQ) GetBattleType() BattleType {
	if x != nil {
		return x.BattleType
	}
	return BattleType_Normal
}

func (x *BATTLE_CHALLENGE_MATCH_REQ) GetLineup() []*BATTLE_LINEUP {
	if x != nil {
		return x.Lineup
	}
	return nil
}

//挑战模式匹配返回
type BATTLE_CHALLENGE_MATCH_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType  BattleType    `protobuf:"varint,1,opt,name=battleType,proto3,enum=msg.BattleType" json:"battleType,omitempty"`
	MatchPlayer *MATCH_PLAYER `protobuf:"bytes,2,opt,name=matchPlayer,proto3" json:"matchPlayer,omitempty"`
	RoomId      string        `protobuf:"bytes,5,opt,name=roomId,proto3" json:"roomId,omitempty"`
}

func (x *BATTLE_CHALLENGE_MATCH_RES) Reset() {
	*x = BATTLE_CHALLENGE_MATCH_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BATTLE_CHALLENGE_MATCH_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BATTLE_CHALLENGE_MATCH_RES) ProtoMessage() {}

func (x *BATTLE_CHALLENGE_MATCH_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BATTLE_CHALLENGE_MATCH_RES.ProtoReflect.Descriptor instead.
func (*BATTLE_CHALLENGE_MATCH_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{88}
}

func (x *BATTLE_CHALLENGE_MATCH_RES) GetBattleType() BattleType {
	if x != nil {
		return x.BattleType
	}
	return BattleType_Normal
}

func (x *BATTLE_CHALLENGE_MATCH_RES) GetMatchPlayer() *MATCH_PLAYER {
	if x != nil {
		return x.MatchPlayer
	}
	return nil
}

func (x *BATTLE_CHALLENGE_MATCH_RES) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type MATCH_PLAYER struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid         string           `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name        string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`              //[玩家名字]
	Level       int32            `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`           //[等级]
	Image       int32            `protobuf:"varint,4,opt,name=image,proto3" json:"image,omitempty"`           //[头像]
	ImageFrame  int32            `protobuf:"varint,5,opt,name=imageFrame,proto3" json:"imageFrame,omitempty"` //[头像框]
	SeasonScore int32            `protobuf:"varint,6,opt,name=seasonScore,proto3" json:"seasonScore,omitempty"`
	RegionId    int32            `protobuf:"varint,7,opt,name=regionId,proto3" json:"regionId,omitempty"`
	Lineup      []*BATTLE_LINEUP `protobuf:"bytes,8,rep,name=lineup,proto3" json:"lineup,omitempty"`
}

func (x *MATCH_PLAYER) Reset() {
	*x = MATCH_PLAYER{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MATCH_PLAYER) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MATCH_PLAYER) ProtoMessage() {}

func (x *MATCH_PLAYER) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MATCH_PLAYER.ProtoReflect.Descriptor instead.
func (*MATCH_PLAYER) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{89}
}

func (x *MATCH_PLAYER) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *MATCH_PLAYER) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MATCH_PLAYER) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MATCH_PLAYER) GetImage() int32 {
	if x != nil {
		return x.Image
	}
	return 0
}

func (x *MATCH_PLAYER) GetImageFrame() int32 {
	if x != nil {
		return x.ImageFrame
	}
	return 0
}

func (x *MATCH_PLAYER) GetSeasonScore() int32 {
	if x != nil {
		return x.SeasonScore
	}
	return 0
}

func (x *MATCH_PLAYER) GetRegionId() int32 {
	if x != nil {
		return x.RegionId
	}
	return 0
}

func (x *MATCH_PLAYER) GetLineup() []*BATTLE_LINEUP {
	if x != nil {
		return x.Lineup
	}
	return nil
}

//挑战模式结算请求
type BATTLE_CHALLENGE_SETTLE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType      BattleType `protobuf:"varint,1,opt,name=battleType,proto3,enum=msg.BattleType" json:"battleType,omitempty"`
	Result          int32      `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	HeroMixMaxLevel int32      `protobuf:"varint,3,opt,name=HeroMixMaxLevel,proto3" json:"HeroMixMaxLevel,omitempty"` //该局战斗合成的最高星级英雄
	RoomId          string     `protobuf:"bytes,4,opt,name=roomId,proto3" json:"roomId,omitempty"`                    //房间号
}

func (x *BATTLE_CHALLENGE_SETTLE_REQ) Reset() {
	*x = BATTLE_CHALLENGE_SETTLE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BATTLE_CHALLENGE_SETTLE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BATTLE_CHALLENGE_SETTLE_REQ) ProtoMessage() {}

func (x *BATTLE_CHALLENGE_SETTLE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BATTLE_CHALLENGE_SETTLE_REQ.ProtoReflect.Descriptor instead.
func (*BATTLE_CHALLENGE_SETTLE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{90}
}

func (x *BATTLE_CHALLENGE_SETTLE_REQ) GetBattleType() BattleType {
	if x != nil {
		return x.BattleType
	}
	return BattleType_Normal
}

func (x *BATTLE_CHALLENGE_SETTLE_REQ) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *BATTLE_CHALLENGE_SETTLE_REQ) GetHeroMixMaxLevel() int32 {
	if x != nil {
		return x.HeroMixMaxLevel
	}
	return 0
}

func (x *BATTLE_CHALLENGE_SETTLE_REQ) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

//挑战模式结算返回
type BATTLE_CHALLENGE_SETTLE_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType   BattleType          `protobuf:"varint,1,opt,name=battleType,proto3,enum=msg.BattleType" json:"battleType,omitempty"`
	Result       int32               `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Reward       *DROP_DATA          `protobuf:"bytes,3,opt,name=reward,proto3" json:"reward,omitempty"`
	Self         *BATTLE_PLAYER_DATA `protobuf:"bytes,4,opt,name=self,proto3" json:"self,omitempty"`                  //玩家自己的数据
	Other        *BATTLE_PLAYER_DATA `protobuf:"bytes,5,opt,name=other,proto3" json:"other,omitempty"`                //对方玩家数据
	ChallengeEnd int32               `protobuf:"varint,6,opt,name=challengeEnd,proto3" json:"challengeEnd,omitempty"` //本轮挑战是否结束 0：未结束 1：结束 用于随机竞技场结算
}

func (x *BATTLE_CHALLENGE_SETTLE_RES) Reset() {
	*x = BATTLE_CHALLENGE_SETTLE_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BATTLE_CHALLENGE_SETTLE_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BATTLE_CHALLENGE_SETTLE_RES) ProtoMessage() {}

func (x *BATTLE_CHALLENGE_SETTLE_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BATTLE_CHALLENGE_SETTLE_RES.ProtoReflect.Descriptor instead.
func (*BATTLE_CHALLENGE_SETTLE_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{91}
}

func (x *BATTLE_CHALLENGE_SETTLE_RES) GetBattleType() BattleType {
	if x != nil {
		return x.BattleType
	}
	return BattleType_Normal
}

func (x *BATTLE_CHALLENGE_SETTLE_RES) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *BATTLE_CHALLENGE_SETTLE_RES) GetReward() *DROP_DATA {
	if x != nil {
		return x.Reward
	}
	return nil
}

func (x *BATTLE_CHALLENGE_SETTLE_RES) GetSelf() *BATTLE_PLAYER_DATA {
	if x != nil {
		return x.Self
	}
	return nil
}

func (x *BATTLE_CHALLENGE_SETTLE_RES) GetOther() *BATTLE_PLAYER_DATA {
	if x != nil {
		return x.Other
	}
	return nil
}

func (x *BATTLE_CHALLENGE_SETTLE_RES) GetChallengeEnd() int32 {
	if x != nil {
		return x.ChallengeEnd
	}
	return 0
}

type CHALLENGE_STATUS_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CHALLENGE_STATUS_REQ) Reset() {
	*x = CHALLENGE_STATUS_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHALLENGE_STATUS_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHALLENGE_STATUS_REQ) ProtoMessage() {}

func (x *CHALLENGE_STATUS_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHALLENGE_STATUS_REQ.ProtoReflect.Descriptor instead.
func (*CHALLENGE_STATUS_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{92}
}

type CHALLENGE_STATUS_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusList []*CHALLENGE_STATUS `protobuf:"bytes,1,rep,name=statusList,proto3" json:"statusList,omitempty"`
}

func (x *CHALLENGE_STATUS_RES) Reset() {
	*x = CHALLENGE_STATUS_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHALLENGE_STATUS_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHALLENGE_STATUS_RES) ProtoMessage() {}

func (x *CHALLENGE_STATUS_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHALLENGE_STATUS_RES.ProtoReflect.Descriptor instead.
func (*CHALLENGE_STATUS_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{93}
}

func (x *CHALLENGE_STATUS_RES) GetStatusList() []*CHALLENGE_STATUS {
	if x != nil {
		return x.StatusList
	}
	return nil
}

type CHALLENGE_STATUS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType      BattleType   `protobuf:"varint,1,opt,name=battleType,proto3,enum=msg.BattleType" json:"battleType,omitempty"`
	CostStatus      int32        `protobuf:"varint,2,opt,name=costStatus,proto3" json:"costStatus,omitempty"`           //入场费状态 0：首次消耗金币 1：非首次消耗钻石
	AdmissionStatus int32        `protobuf:"varint,3,opt,name=admissionStatus,proto3" json:"admissionStatus,omitempty"` //入场状态  0:未入场 1：已入场
	UnlockStatus    int32        `protobuf:"varint,4,opt,name=unlockStatus,proto3" json:"unlockStatus,omitempty"`       //解锁奖励领取状态  0:未领取 1：已领取
	RandDetail      *RAND_DETAIL `protobuf:"bytes,5,opt,name=randDetail,proto3" json:"randDetail,omitempty"`            // 随机竞技场详细状态  battleType 是随机竞技场的情况下获取
}

func (x *CHALLENGE_STATUS) Reset() {
	*x = CHALLENGE_STATUS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHALLENGE_STATUS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHALLENGE_STATUS) ProtoMessage() {}

func (x *CHALLENGE_STATUS) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHALLENGE_STATUS.ProtoReflect.Descriptor instead.
func (*CHALLENGE_STATUS) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{94}
}

func (x *CHALLENGE_STATUS) GetBattleType() BattleType {
	if x != nil {
		return x.BattleType
	}
	return BattleType_Normal
}

func (x *CHALLENGE_STATUS) GetCostStatus() int32 {
	if x != nil {
		return x.CostStatus
	}
	return 0
}

func (x *CHALLENGE_STATUS) GetAdmissionStatus() int32 {
	if x != nil {
		return x.AdmissionStatus
	}
	return 0
}

func (x *CHALLENGE_STATUS) GetUnlockStatus() int32 {
	if x != nil {
		return x.UnlockStatus
	}
	return 0
}

func (x *CHALLENGE_STATUS) GetRandDetail() *RAND_DETAIL {
	if x != nil {
		return x.RandDetail
	}
	return nil
}

type RAND_DETAIL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RandHeroSelectStatus int32            `protobuf:"varint,1,opt,name=randHeroSelectStatus,proto3" json:"randHeroSelectStatus,omitempty"` //随机竞技场英雄选择状态  0:未完成 1:已完成
	RandLineup           []*BATTLE_LINEUP `protobuf:"bytes,2,rep,name=randLineup,proto3" json:"randLineup,omitempty"`                      //随机竞技场当前阵容   已完成英雄选择的情况下获取
	RandWinCount         int32            `protobuf:"varint,3,opt,name=randWinCount,proto3" json:"randWinCount,omitempty"`                 //随机竞技场胜利场数   已完成英雄选择的情况下获取
	RandFailCount        int32            `protobuf:"varint,4,opt,name=randFailCount,proto3" json:"randFailCount,omitempty"`               //随机竞技场失败场数   已完成英雄选择的情况下获取
}

func (x *RAND_DETAIL) Reset() {
	*x = RAND_DETAIL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RAND_DETAIL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RAND_DETAIL) ProtoMessage() {}

func (x *RAND_DETAIL) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RAND_DETAIL.ProtoReflect.Descriptor instead.
func (*RAND_DETAIL) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{95}
}

func (x *RAND_DETAIL) GetRandHeroSelectStatus() int32 {
	if x != nil {
		return x.RandHeroSelectStatus
	}
	return 0
}

func (x *RAND_DETAIL) GetRandLineup() []*BATTLE_LINEUP {
	if x != nil {
		return x.RandLineup
	}
	return nil
}

func (x *RAND_DETAIL) GetRandWinCount() int32 {
	if x != nil {
		return x.RandWinCount
	}
	return 0
}

func (x *RAND_DETAIL) GetRandFailCount() int32 {
	if x != nil {
		return x.RandFailCount
	}
	return 0
}

type CHALLENGE_RAND_REWARD_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CHALLENGE_RAND_REWARD_REQ) Reset() {
	*x = CHALLENGE_RAND_REWARD_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHALLENGE_RAND_REWARD_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHALLENGE_RAND_REWARD_REQ) ProtoMessage() {}

func (x *CHALLENGE_RAND_REWARD_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHALLENGE_RAND_REWARD_REQ.ProtoReflect.Descriptor instead.
func (*CHALLENGE_RAND_REWARD_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{96}
}

type CHALLENGE_RAND_REWARD_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reward *DROP_DATA `protobuf:"bytes,1,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *CHALLENGE_RAND_REWARD_RES) Reset() {
	*x = CHALLENGE_RAND_REWARD_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHALLENGE_RAND_REWARD_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHALLENGE_RAND_REWARD_RES) ProtoMessage() {}

func (x *CHALLENGE_RAND_REWARD_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHALLENGE_RAND_REWARD_RES.ProtoReflect.Descriptor instead.
func (*CHALLENGE_RAND_REWARD_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{97}
}

func (x *CHALLENGE_RAND_REWARD_RES) GetReward() *DROP_DATA {
	if x != nil {
		return x.Reward
	}
	return nil
}

type CHALLENGE_UNLOCK_REWARD_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType BattleType `protobuf:"varint,1,opt,name=battleType,proto3,enum=msg.BattleType" json:"battleType,omitempty"`
}

func (x *CHALLENGE_UNLOCK_REWARD_REQ) Reset() {
	*x = CHALLENGE_UNLOCK_REWARD_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHALLENGE_UNLOCK_REWARD_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHALLENGE_UNLOCK_REWARD_REQ) ProtoMessage() {}

func (x *CHALLENGE_UNLOCK_REWARD_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHALLENGE_UNLOCK_REWARD_REQ.ProtoReflect.Descriptor instead.
func (*CHALLENGE_UNLOCK_REWARD_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{98}
}

func (x *CHALLENGE_UNLOCK_REWARD_REQ) GetBattleType() BattleType {
	if x != nil {
		return x.BattleType
	}
	return BattleType_Normal
}

type CHALLENGE_UNLOCK_REWARD_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType BattleType `protobuf:"varint,1,opt,name=battleType,proto3,enum=msg.BattleType" json:"battleType,omitempty"`
	Reward     *DROP_DATA `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward,omitempty"`
}

func (x *CHALLENGE_UNLOCK_REWARD_RES) Reset() {
	*x = CHALLENGE_UNLOCK_REWARD_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHALLENGE_UNLOCK_REWARD_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHALLENGE_UNLOCK_REWARD_RES) ProtoMessage() {}

func (x *CHALLENGE_UNLOCK_REWARD_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHALLENGE_UNLOCK_REWARD_RES.ProtoReflect.Descriptor instead.
func (*CHALLENGE_UNLOCK_REWARD_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{99}
}

func (x *CHALLENGE_UNLOCK_REWARD_RES) GetBattleType() BattleType {
	if x != nil {
		return x.BattleType
	}
	return BattleType_Normal
}

func (x *CHALLENGE_UNLOCK_REWARD_RES) GetReward() *DROP_DATA {
	if x != nil {
		return x.Reward
	}
	return nil
}

//挑战模式入场请求
type CHALLENGE_ADMISSION_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType BattleType `protobuf:"varint,1,opt,name=battleType,proto3,enum=msg.BattleType" json:"battleType,omitempty"`
}

func (x *CHALLENGE_ADMISSION_REQ) Reset() {
	*x = CHALLENGE_ADMISSION_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHALLENGE_ADMISSION_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHALLENGE_ADMISSION_REQ) ProtoMessage() {}

func (x *CHALLENGE_ADMISSION_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHALLENGE_ADMISSION_REQ.ProtoReflect.Descriptor instead.
func (*CHALLENGE_ADMISSION_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{100}
}

func (x *CHALLENGE_ADMISSION_REQ) GetBattleType() BattleType {
	if x != nil {
		return x.BattleType
	}
	return BattleType_Normal
}

//挑战模式入场返回
type CHALLENGE_ADMISSION_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BattleType BattleType `protobuf:"varint,1,opt,name=battleType,proto3,enum=msg.BattleType" json:"battleType,omitempty"`
	Result     int32      `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"` //  map<int32, RAND_SELECT_HERO> randHeroMap = 3;
}

func (x *CHALLENGE_ADMISSION_RES) Reset() {
	*x = CHALLENGE_ADMISSION_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHALLENGE_ADMISSION_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHALLENGE_ADMISSION_RES) ProtoMessage() {}

func (x *CHALLENGE_ADMISSION_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHALLENGE_ADMISSION_RES.ProtoReflect.Descriptor instead.
func (*CHALLENGE_ADMISSION_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{101}
}

func (x *CHALLENGE_ADMISSION_RES) GetBattleType() BattleType {
	if x != nil {
		return x.BattleType
	}
	return BattleType_Normal
}

func (x *CHALLENGE_ADMISSION_RES) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type CHALLENGE_RAND_HERO_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CHALLENGE_RAND_HERO_REQ) Reset() {
	*x = CHALLENGE_RAND_HERO_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHALLENGE_RAND_HERO_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHALLENGE_RAND_HERO_REQ) ProtoMessage() {}

func (x *CHALLENGE_RAND_HERO_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHALLENGE_RAND_HERO_REQ.ProtoReflect.Descriptor instead.
func (*CHALLENGE_RAND_HERO_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{102}
}

type CHALLENGE_RAND_HERO_SELECT_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round  int32 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	HeroId int32 `protobuf:"varint,2,opt,name=heroId,proto3" json:"heroId,omitempty"`
}

func (x *CHALLENGE_RAND_HERO_SELECT_REQ) Reset() {
	*x = CHALLENGE_RAND_HERO_SELECT_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHALLENGE_RAND_HERO_SELECT_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHALLENGE_RAND_HERO_SELECT_REQ) ProtoMessage() {}

func (x *CHALLENGE_RAND_HERO_SELECT_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHALLENGE_RAND_HERO_SELECT_REQ.ProtoReflect.Descriptor instead.
func (*CHALLENGE_RAND_HERO_SELECT_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{103}
}

func (x *CHALLENGE_RAND_HERO_SELECT_REQ) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *CHALLENGE_RAND_HERO_SELECT_REQ) GetHeroId() int32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

type CHALLENGE_RAND_HERO_REFRESH_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round int32 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *CHALLENGE_RAND_HERO_REFRESH_REQ) Reset() {
	*x = CHALLENGE_RAND_HERO_REFRESH_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHALLENGE_RAND_HERO_REFRESH_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHALLENGE_RAND_HERO_REFRESH_REQ) ProtoMessage() {}

func (x *CHALLENGE_RAND_HERO_REFRESH_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHALLENGE_RAND_HERO_REFRESH_REQ.ProtoReflect.Descriptor instead.
func (*CHALLENGE_RAND_HERO_REFRESH_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{104}
}

func (x *CHALLENGE_RAND_HERO_REFRESH_REQ) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

type CHALLENGE_RAND_HERO_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Round        int32   `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	SelectedHero []int32 `protobuf:"varint,2,rep,packed,name=selectedHero,proto3" json:"selectedHero,omitempty"`
	RandHero     []int32 `protobuf:"varint,3,rep,packed,name=randHero,proto3" json:"randHero,omitempty"`
	RemainCount  int32   `protobuf:"varint,4,opt,name=remainCount,proto3" json:"remainCount,omitempty"`
	SelectEnd    int32   `protobuf:"varint,5,opt,name=selectEnd,proto3" json:"selectEnd,omitempty"` //阵容选择是否完成  0:未完成 1:完成
}

func (x *CHALLENGE_RAND_HERO_RES) Reset() {
	*x = CHALLENGE_RAND_HERO_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHALLENGE_RAND_HERO_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHALLENGE_RAND_HERO_RES) ProtoMessage() {}

func (x *CHALLENGE_RAND_HERO_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHALLENGE_RAND_HERO_RES.ProtoReflect.Descriptor instead.
func (*CHALLENGE_RAND_HERO_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{105}
}

func (x *CHALLENGE_RAND_HERO_RES) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *CHALLENGE_RAND_HERO_RES) GetSelectedHero() []int32 {
	if x != nil {
		return x.SelectedHero
	}
	return nil
}

func (x *CHALLENGE_RAND_HERO_RES) GetRandHero() []int32 {
	if x != nil {
		return x.RandHero
	}
	return nil
}

func (x *CHALLENGE_RAND_HERO_RES) GetRemainCount() int32 {
	if x != nil {
		return x.RemainCount
	}
	return 0
}

func (x *CHALLENGE_RAND_HERO_RES) GetSelectEnd() int32 {
	if x != nil {
		return x.SelectEnd
	}
	return 0
}

//普通对战排行请求
type RANK_NORMAL_LIST_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type RANKING_TYPE `protobuf:"varint,1,opt,name=type,proto3,enum=msg.RANKING_TYPE" json:"type,omitempty"` //排行榜类型
}

func (x *RANK_NORMAL_LIST_REQ) Reset() {
	*x = RANK_NORMAL_LIST_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RANK_NORMAL_LIST_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RANK_NORMAL_LIST_REQ) ProtoMessage() {}

func (x *RANK_NORMAL_LIST_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RANK_NORMAL_LIST_REQ.ProtoReflect.Descriptor instead.
func (*RANK_NORMAL_LIST_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{106}
}

func (x *RANK_NORMAL_LIST_REQ) GetType() RANKING_TYPE {
	if x != nil {
		return x.Type
	}
	return RANKING_TYPE_Level
}

//普通对战排行返回
type RANK_NORMAL_LIST_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        RANKING_TYPE    `protobuf:"varint,1,opt,name=type,proto3,enum=msg.RANKING_TYPE" json:"type,omitempty"`
	SelfRankNum int32           `protobuf:"varint,2,opt,name=selfRankNum,proto3" json:"selfRankNum,omitempty"` // 个人排名  0为未上榜
	PlayerList  []*MATCH_PLAYER `protobuf:"bytes,3,rep,name=playerList,proto3" json:"playerList,omitempty"`
}

func (x *RANK_NORMAL_LIST_RES) Reset() {
	*x = RANK_NORMAL_LIST_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RANK_NORMAL_LIST_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RANK_NORMAL_LIST_RES) ProtoMessage() {}

func (x *RANK_NORMAL_LIST_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RANK_NORMAL_LIST_RES.ProtoReflect.Descriptor instead.
func (*RANK_NORMAL_LIST_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{107}
}

func (x *RANK_NORMAL_LIST_RES) GetType() RANKING_TYPE {
	if x != nil {
		return x.Type
	}
	return RANKING_TYPE_Level
}

func (x *RANK_NORMAL_LIST_RES) GetSelfRankNum() int32 {
	if x != nil {
		return x.SelfRankNum
	}
	return 0
}

func (x *RANK_NORMAL_LIST_RES) GetPlayerList() []*MATCH_PLAYER {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

//合作模式排行请求
type RANK_COOPERATION_LIST_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type RANKING_TYPE `protobuf:"varint,1,opt,name=type,proto3,enum=msg.RANKING_TYPE" json:"type,omitempty"`
}

func (x *RANK_COOPERATION_LIST_REQ) Reset() {
	*x = RANK_COOPERATION_LIST_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RANK_COOPERATION_LIST_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RANK_COOPERATION_LIST_REQ) ProtoMessage() {}

func (x *RANK_COOPERATION_LIST_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RANK_COOPERATION_LIST_REQ.ProtoReflect.Descriptor instead.
func (*RANK_COOPERATION_LIST_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{108}
}

func (x *RANK_COOPERATION_LIST_REQ) GetType() RANKING_TYPE {
	if x != nil {
		return x.Type
	}
	return RANKING_TYPE_Level
}

//合作模式排行返回
type RANK_COOPERATION_LIST_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        RANKING_TYPE                    `protobuf:"varint,1,opt,name=type,proto3,enum=msg.RANKING_TYPE" json:"type,omitempty"`
	SelfRankNum int32                           `protobuf:"varint,2,opt,name=selfRankNum,proto3" json:"selfRankNum,omitempty"`
	PlayerList  []*RANK_COOPERATION_PLAYER_DATA `protobuf:"bytes,3,rep,name=playerList,proto3" json:"playerList,omitempty"`
}

func (x *RANK_COOPERATION_LIST_RES) Reset() {
	*x = RANK_COOPERATION_LIST_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RANK_COOPERATION_LIST_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RANK_COOPERATION_LIST_RES) ProtoMessage() {}

func (x *RANK_COOPERATION_LIST_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RANK_COOPERATION_LIST_RES.ProtoReflect.Descriptor instead.
func (*RANK_COOPERATION_LIST_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{109}
}

func (x *RANK_COOPERATION_LIST_RES) GetType() RANKING_TYPE {
	if x != nil {
		return x.Type
	}
	return RANKING_TYPE_Level
}

func (x *RANK_COOPERATION_LIST_RES) GetSelfRankNum() int32 {
	if x != nil {
		return x.SelfRankNum
	}
	return 0
}

func (x *RANK_COOPERATION_LIST_RES) GetPlayerList() []*RANK_COOPERATION_PLAYER_DATA {
	if x != nil {
		return x.PlayerList
	}
	return nil
}

type RANK_COOPERATION_PLAYER_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxRound int32           `protobuf:"varint,1,opt,name=maxRound,proto3" json:"maxRound,omitempty"`
	Players  []*MATCH_PLAYER `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *RANK_COOPERATION_PLAYER_DATA) Reset() {
	*x = RANK_COOPERATION_PLAYER_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RANK_COOPERATION_PLAYER_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RANK_COOPERATION_PLAYER_DATA) ProtoMessage() {}

func (x *RANK_COOPERATION_PLAYER_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RANK_COOPERATION_PLAYER_DATA.ProtoReflect.Descriptor instead.
func (*RANK_COOPERATION_PLAYER_DATA) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{110}
}

func (x *RANK_COOPERATION_PLAYER_DATA) GetMaxRound() int32 {
	if x != nil {
		return x.MaxRound
	}
	return 0
}

func (x *RANK_COOPERATION_PLAYER_DATA) GetPlayers() []*MATCH_PLAYER {
	if x != nil {
		return x.Players
	}
	return nil
}

//聊天请求
type CHAT_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`      //1世界聊天 2帮派聊天 3私聊 4对战邀请
	Fid     string `protobuf:"bytes,2,opt,name=fid,proto3" json:"fid,omitempty"`         //私聊类型就是好友uid,帮派类型就是帮派ID
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"` //消息体
}

func (x *CHAT_REQ) Reset() {
	*x = CHAT_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHAT_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHAT_REQ) ProtoMessage() {}

func (x *CHAT_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHAT_REQ.ProtoReflect.Descriptor instead.
func (*CHAT_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{111}
}

func (x *CHAT_REQ) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CHAT_REQ) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

func (x *CHAT_REQ) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//聊天返回
type CHAT_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` //1世界聊天 2帮派聊天 3私聊 4对战邀请
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CHAT_RSP) Reset() {
	*x = CHAT_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHAT_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHAT_RSP) ProtoMessage() {}

func (x *CHAT_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHAT_RSP.ProtoReflect.Descriptor instead.
func (*CHAT_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{112}
}

func (x *CHAT_RSP) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CHAT_RSP) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//聊天记录请求
type CHAT_RECORD_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fid string `protobuf:"bytes,2,opt,name=fid,proto3" json:"fid,omitempty"` //私聊类型就是好友uid,帮派类型就是帮派ID
}

func (x *CHAT_RECORD_REQ) Reset() {
	*x = CHAT_RECORD_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHAT_RECORD_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHAT_RECORD_REQ) ProtoMessage() {}

func (x *CHAT_RECORD_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHAT_RECORD_REQ.ProtoReflect.Descriptor instead.
func (*CHAT_RECORD_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{113}
}

func (x *CHAT_RECORD_REQ) GetFid() string {
	if x != nil {
		return x.Fid
	}
	return ""
}

//聊天记录返回
type CHAT_RECORD_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatRecord []string `protobuf:"bytes,1,rep,name=chat_record,json=chatRecord,proto3" json:"chat_record,omitempty"`
}

func (x *CHAT_RECORD_RSP) Reset() {
	*x = CHAT_RECORD_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CHAT_RECORD_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CHAT_RECORD_RSP) ProtoMessage() {}

func (x *CHAT_RECORD_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CHAT_RECORD_RSP.ProtoReflect.Descriptor instead.
func (*CHAT_RECORD_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{114}
}

func (x *CHAT_RECORD_RSP) GetChatRecord() []string {
	if x != nil {
		return x.ChatRecord
	}
	return nil
}

//好友列表数据
type FRIEND_LIST_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`         //玩家名称
	Level    int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`      //玩家等级
	Rank     int32  `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`        //玩家段位排名
	FriendId string `protobuf:"bytes,4,opt,name=friendId,proto3" json:"friendId,omitempty"` //好友ID
}

func (x *FRIEND_LIST_DATA) Reset() {
	*x = FRIEND_LIST_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_LIST_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_LIST_DATA) ProtoMessage() {}

func (x *FRIEND_LIST_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_LIST_DATA.ProtoReflect.Descriptor instead.
func (*FRIEND_LIST_DATA) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{115}
}

func (x *FRIEND_LIST_DATA) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FRIEND_LIST_DATA) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *FRIEND_LIST_DATA) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *FRIEND_LIST_DATA) GetFriendId() string {
	if x != nil {
		return x.FriendId
	}
	return ""
}

//好友列表请求
type FRIEND_LIST_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` //1我的好友 2申请列表 3添加好友 4黑名单
}

func (x *FRIEND_LIST_REQ) Reset() {
	*x = FRIEND_LIST_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_LIST_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_LIST_REQ) ProtoMessage() {}

func (x *FRIEND_LIST_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_LIST_REQ.ProtoReflect.Descriptor instead.
func (*FRIEND_LIST_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{116}
}

func (x *FRIEND_LIST_REQ) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

//好友列表返回
type FRIEND_LIST_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         int32               `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                 //1我的好友 2申请列表 3添加好友 4黑名单
	FriendNum    int32               `protobuf:"varint,2,opt,name=friendNum,proto3" json:"friendNum,omitempty"`       //好友数量
	BlackListNum int32               `protobuf:"varint,3,opt,name=blackListNum,proto3" json:"blackListNum,omitempty"` //黑名单数量
	FriendData   []*FRIEND_LIST_DATA `protobuf:"bytes,4,rep,name=friendData,proto3" json:"friendData,omitempty"`
}

func (x *FRIEND_LIST_RSP) Reset() {
	*x = FRIEND_LIST_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_LIST_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_LIST_RSP) ProtoMessage() {}

func (x *FRIEND_LIST_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_LIST_RSP.ProtoReflect.Descriptor instead.
func (*FRIEND_LIST_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{117}
}

func (x *FRIEND_LIST_RSP) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FRIEND_LIST_RSP) GetFriendNum() int32 {
	if x != nil {
		return x.FriendNum
	}
	return 0
}

func (x *FRIEND_LIST_RSP) GetBlackListNum() int32 {
	if x != nil {
		return x.BlackListNum
	}
	return 0
}

func (x *FRIEND_LIST_RSP) GetFriendData() []*FRIEND_LIST_DATA {
	if x != nil {
		return x.FriendData
	}
	return nil
}

//好友查找请求
type FRIEND_FIND_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     //玩家id查找
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` //玩家名字查找(确认无特殊符号)
}

func (x *FRIEND_FIND_REQ) Reset() {
	*x = FRIEND_FIND_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_FIND_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_FIND_REQ) ProtoMessage() {}

func (x *FRIEND_FIND_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_FIND_REQ.ProtoReflect.Descriptor instead.
func (*FRIEND_FIND_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{118}
}

func (x *FRIEND_FIND_REQ) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FRIEND_FIND_REQ) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//好友查找返回
type FRIEND_FIND_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FriendData *FRIEND_LIST_DATA `protobuf:"bytes,1,opt,name=friendData,proto3" json:"friendData,omitempty"`
}

func (x *FRIEND_FIND_RSP) Reset() {
	*x = FRIEND_FIND_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_FIND_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_FIND_RSP) ProtoMessage() {}

func (x *FRIEND_FIND_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_FIND_RSP.ProtoReflect.Descriptor instead.
func (*FRIEND_FIND_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{119}
}

func (x *FRIEND_FIND_RSP) GetFriendData() *FRIEND_LIST_DATA {
	if x != nil {
		return x.FriendData
	}
	return nil
}

//好友添加请求
type FRIEND_ADD_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //玩家uid
}

func (x *FRIEND_ADD_REQ) Reset() {
	*x = FRIEND_ADD_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_ADD_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_ADD_REQ) ProtoMessage() {}

func (x *FRIEND_ADD_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_ADD_REQ.ProtoReflect.Descriptor instead.
func (*FRIEND_ADD_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{120}
}

func (x *FRIEND_ADD_REQ) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//好友黑名单请求
type FRIEND_BLACK_LIST_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //玩家uid
}

func (x *FRIEND_BLACK_LIST_REQ) Reset() {
	*x = FRIEND_BLACK_LIST_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_BLACK_LIST_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_BLACK_LIST_REQ) ProtoMessage() {}

func (x *FRIEND_BLACK_LIST_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_BLACK_LIST_REQ.ProtoReflect.Descriptor instead.
func (*FRIEND_BLACK_LIST_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{121}
}

func (x *FRIEND_BLACK_LIST_REQ) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//同意好友请求
type FRIEND_AGREE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //玩家uid
}

func (x *FRIEND_AGREE_REQ) Reset() {
	*x = FRIEND_AGREE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_AGREE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_AGREE_REQ) ProtoMessage() {}

func (x *FRIEND_AGREE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_AGREE_REQ.ProtoReflect.Descriptor instead.
func (*FRIEND_AGREE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{122}
}

func (x *FRIEND_AGREE_REQ) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//同意所有好友请求
type FRIEND_ALL_AGREE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FRIEND_ALL_AGREE_REQ) Reset() {
	*x = FRIEND_ALL_AGREE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_ALL_AGREE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_ALL_AGREE_REQ) ProtoMessage() {}

func (x *FRIEND_ALL_AGREE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_ALL_AGREE_REQ.ProtoReflect.Descriptor instead.
func (*FRIEND_ALL_AGREE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{123}
}

//拒绝好友请求
type FRIEND_REFUSE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //玩家uid
}

func (x *FRIEND_REFUSE_REQ) Reset() {
	*x = FRIEND_REFUSE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_REFUSE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_REFUSE_REQ) ProtoMessage() {}

func (x *FRIEND_REFUSE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_REFUSE_REQ.ProtoReflect.Descriptor instead.
func (*FRIEND_REFUSE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{124}
}

func (x *FRIEND_REFUSE_REQ) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//拒绝所有好友请求
type FRIEND_ALL_REFUSE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FRIEND_ALL_REFUSE_REQ) Reset() {
	*x = FRIEND_ALL_REFUSE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_ALL_REFUSE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_ALL_REFUSE_REQ) ProtoMessage() {}

func (x *FRIEND_ALL_REFUSE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_ALL_REFUSE_REQ.ProtoReflect.Descriptor instead.
func (*FRIEND_ALL_REFUSE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{125}
}

//删除好友请求
type FRIEND_DELETE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` //1删除 2移除黑名单
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`      //玩家uid
}

func (x *FRIEND_DELETE_REQ) Reset() {
	*x = FRIEND_DELETE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_DELETE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_DELETE_REQ) ProtoMessage() {}

func (x *FRIEND_DELETE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_DELETE_REQ.ProtoReflect.Descriptor instead.
func (*FRIEND_DELETE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{126}
}

func (x *FRIEND_DELETE_REQ) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FRIEND_DELETE_REQ) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//好友列表更新返回
type FRIEND_LIST_UPDATE_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` //1刷新好友 2刷新申请列表 3刷新添加好友 4刷新黑名单
}

func (x *FRIEND_LIST_UPDATE_RSP) Reset() {
	*x = FRIEND_LIST_UPDATE_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_LIST_UPDATE_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_LIST_UPDATE_RSP) ProtoMessage() {}

func (x *FRIEND_LIST_UPDATE_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_LIST_UPDATE_RSP.ProtoReflect.Descriptor instead.
func (*FRIEND_LIST_UPDATE_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{127}
}

func (x *FRIEND_LIST_UPDATE_RSP) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

//好友邀请对战请求
type FRIEND_BATTLE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32            `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`    //1.对战模式 2.合作模式
	Id     string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`         //玩家uid
	Lineup []*BATTLE_LINEUP `protobuf:"bytes,3,rep,name=lineup,proto3" json:"lineup,omitempty"` //发送者的阵容
}

func (x *FRIEND_BATTLE_REQ) Reset() {
	*x = FRIEND_BATTLE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_BATTLE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_BATTLE_REQ) ProtoMessage() {}

func (x *FRIEND_BATTLE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_BATTLE_REQ.ProtoReflect.Descriptor instead.
func (*FRIEND_BATTLE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{128}
}

func (x *FRIEND_BATTLE_REQ) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FRIEND_BATTLE_REQ) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FRIEND_BATTLE_REQ) GetLineup() []*BATTLE_LINEUP {
	if x != nil {
		return x.Lineup
	}
	return nil
}

//好友邀请对战返回
type FRIEND_BATTLE_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32             `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` //1.对战模式 2.合作模式
	Data *FRIEND_LIST_DATA `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FRIEND_BATTLE_RSP) Reset() {
	*x = FRIEND_BATTLE_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_BATTLE_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_BATTLE_RSP) ProtoMessage() {}

func (x *FRIEND_BATTLE_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_BATTLE_RSP.ProtoReflect.Descriptor instead.
func (*FRIEND_BATTLE_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{129}
}

func (x *FRIEND_BATTLE_RSP) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FRIEND_BATTLE_RSP) GetData() *FRIEND_LIST_DATA {
	if x != nil {
		return x.Data
	}
	return nil
}

//好友对战同意请求
type FRIEND_BATTLE_AGREE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   int32            `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`    //1.对战模式 2.合作模式
	Id     string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`         //玩家uid
	Lineup []*BATTLE_LINEUP `protobuf:"bytes,3,rep,name=lineup,proto3" json:"lineup,omitempty"` //接受者的阵容
}

func (x *FRIEND_BATTLE_AGREE_REQ) Reset() {
	*x = FRIEND_BATTLE_AGREE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_BATTLE_AGREE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_BATTLE_AGREE_REQ) ProtoMessage() {}

func (x *FRIEND_BATTLE_AGREE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_BATTLE_AGREE_REQ.ProtoReflect.Descriptor instead.
func (*FRIEND_BATTLE_AGREE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{130}
}

func (x *FRIEND_BATTLE_AGREE_REQ) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *FRIEND_BATTLE_AGREE_REQ) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FRIEND_BATTLE_AGREE_REQ) GetLineup() []*BATTLE_LINEUP {
	if x != nil {
		return x.Lineup
	}
	return nil
}

//好友对战同意返回
type FRIEND_BATTLE_AGREE_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FRIEND_BATTLE_AGREE_RSP) Reset() {
	*x = FRIEND_BATTLE_AGREE_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_BATTLE_AGREE_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_BATTLE_AGREE_RSP) ProtoMessage() {}

func (x *FRIEND_BATTLE_AGREE_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_BATTLE_AGREE_RSP.ProtoReflect.Descriptor instead.
func (*FRIEND_BATTLE_AGREE_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{131}
}

//好友对战取消请求
type FRIEND_BATTLE_CANCEL_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` //对战的玩家uid
}

func (x *FRIEND_BATTLE_CANCEL_REQ) Reset() {
	*x = FRIEND_BATTLE_CANCEL_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_BATTLE_CANCEL_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_BATTLE_CANCEL_REQ) ProtoMessage() {}

func (x *FRIEND_BATTLE_CANCEL_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_BATTLE_CANCEL_REQ.ProtoReflect.Descriptor instead.
func (*FRIEND_BATTLE_CANCEL_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{132}
}

func (x *FRIEND_BATTLE_CANCEL_REQ) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

//好友对战取消返回
type FRIEND_BATTLE_CANCEL_RSP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FRIEND_BATTLE_CANCEL_RSP) Reset() {
	*x = FRIEND_BATTLE_CANCEL_RSP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRIEND_BATTLE_CANCEL_RSP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRIEND_BATTLE_CANCEL_RSP) ProtoMessage() {}

func (x *FRIEND_BATTLE_CANCEL_RSP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRIEND_BATTLE_CANCEL_RSP.ProtoReflect.Descriptor instead.
func (*FRIEND_BATTLE_CANCEL_RSP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{133}
}

//帧同步请求
type FRAME_SYNC_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId   string             `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	Uid      string             `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	MatchUid string             `protobuf:"bytes,3,opt,name=matchUid,proto3" json:"matchUid,omitempty"`
	Data     []*FRAME_SYNC_DATA `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FRAME_SYNC_REQ) Reset() {
	*x = FRAME_SYNC_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRAME_SYNC_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRAME_SYNC_REQ) ProtoMessage() {}

func (x *FRAME_SYNC_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRAME_SYNC_REQ.ProtoReflect.Descriptor instead.
func (*FRAME_SYNC_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{134}
}

func (x *FRAME_SYNC_REQ) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *FRAME_SYNC_REQ) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *FRAME_SYNC_REQ) GetMatchUid() string {
	if x != nil {
		return x.MatchUid
	}
	return ""
}

func (x *FRAME_SYNC_REQ) GetData() []*FRAME_SYNC_DATA {
	if x != nil {
		return x.Data
	}
	return nil
}

type FRAME_SYNC_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result int32              `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Data   []*FRAME_SYNC_DATA `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FRAME_SYNC_RES) Reset() {
	*x = FRAME_SYNC_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRAME_SYNC_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRAME_SYNC_RES) ProtoMessage() {}

func (x *FRAME_SYNC_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRAME_SYNC_RES.ProtoReflect.Descriptor instead.
func (*FRAME_SYNC_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{135}
}

func (x *FRAME_SYNC_RES) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *FRAME_SYNC_RES) GetData() []*FRAME_SYNC_DATA {
	if x != nil {
		return x.Data
	}
	return nil
}

type FRAME_SYNC_UPDATE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*FRAME_SYNC_DATA `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FRAME_SYNC_UPDATE) Reset() {
	*x = FRAME_SYNC_UPDATE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRAME_SYNC_UPDATE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRAME_SYNC_UPDATE) ProtoMessage() {}

func (x *FRAME_SYNC_UPDATE) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRAME_SYNC_UPDATE.ProtoReflect.Descriptor instead.
func (*FRAME_SYNC_UPDATE) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{136}
}

func (x *FRAME_SYNC_UPDATE) GetData() []*FRAME_SYNC_DATA {
	if x != nil {
		return x.Data
	}
	return nil
}

type FRAME_SYNC_READY_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId string `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
}

func (x *FRAME_SYNC_READY_REQ) Reset() {
	*x = FRAME_SYNC_READY_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRAME_SYNC_READY_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRAME_SYNC_READY_REQ) ProtoMessage() {}

func (x *FRAME_SYNC_READY_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRAME_SYNC_READY_REQ.ProtoReflect.Descriptor instead.
func (*FRAME_SYNC_READY_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{137}
}

func (x *FRAME_SYNC_READY_REQ) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type FRAME_SYNC_READY_UPDATE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	RoomId     string `protobuf:"bytes,2,opt,name=roomId,proto3" json:"roomId,omitempty"`
	RandomSeed int64  `protobuf:"varint,3,opt,name=randomSeed,proto3" json:"randomSeed,omitempty"` //开始时间戳  可作为固定随机种子 做Boss随机
}

func (x *FRAME_SYNC_READY_UPDATE) Reset() {
	*x = FRAME_SYNC_READY_UPDATE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRAME_SYNC_READY_UPDATE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRAME_SYNC_READY_UPDATE) ProtoMessage() {}

func (x *FRAME_SYNC_READY_UPDATE) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRAME_SYNC_READY_UPDATE.ProtoReflect.Descriptor instead.
func (*FRAME_SYNC_READY_UPDATE) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{138}
}

func (x *FRAME_SYNC_READY_UPDATE) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *FRAME_SYNC_READY_UPDATE) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *FRAME_SYNC_READY_UPDATE) GetRandomSeed() int64 {
	if x != nil {
		return x.RandomSeed
	}
	return 0
}

//帧同步推送
type FRAME_SYNC_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId   string                `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	FrameId  int32                 `protobuf:"varint,2,opt,name=frameId,proto3" json:"frameId,omitempty"`
	Time     int64                 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Uid      string                `protobuf:"bytes,4,opt,name=uid,proto3" json:"uid,omitempty"`
	GameData *FRAME_SYNC_GAME_DATA `protobuf:"bytes,5,opt,name=gameData,proto3" json:"gameData,omitempty"`
}

func (x *FRAME_SYNC_DATA) Reset() {
	*x = FRAME_SYNC_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRAME_SYNC_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRAME_SYNC_DATA) ProtoMessage() {}

func (x *FRAME_SYNC_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRAME_SYNC_DATA.ProtoReflect.Descriptor instead.
func (*FRAME_SYNC_DATA) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{139}
}

func (x *FRAME_SYNC_DATA) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *FRAME_SYNC_DATA) GetFrameId() int32 {
	if x != nil {
		return x.FrameId
	}
	return 0
}

func (x *FRAME_SYNC_DATA) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *FRAME_SYNC_DATA) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *FRAME_SYNC_DATA) GetGameData() *FRAME_SYNC_GAME_DATA {
	if x != nil {
		return x.GameData
	}
	return nil
}

type FRAME_SYNC_GAME_DATA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroLineupList  []*INSIDE_LINEUP `protobuf:"bytes,1,rep,name=heroLineupList,proto3" json:"heroLineupList,omitempty"`
	HeroComposeList []*HERO_COMPOSE  `protobuf:"bytes,2,rep,name=heroComposeList,proto3" json:"heroComposeList,omitempty"`
}

func (x *FRAME_SYNC_GAME_DATA) Reset() {
	*x = FRAME_SYNC_GAME_DATA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRAME_SYNC_GAME_DATA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRAME_SYNC_GAME_DATA) ProtoMessage() {}

func (x *FRAME_SYNC_GAME_DATA) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRAME_SYNC_GAME_DATA.ProtoReflect.Descriptor instead.
func (*FRAME_SYNC_GAME_DATA) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{140}
}

func (x *FRAME_SYNC_GAME_DATA) GetHeroLineupList() []*INSIDE_LINEUP {
	if x != nil {
		return x.HeroLineupList
	}
	return nil
}

func (x *FRAME_SYNC_GAME_DATA) GetHeroComposeList() []*HERO_COMPOSE {
	if x != nil {
		return x.HeroComposeList
	}
	return nil
}

type FRAME_SYNC_DATA_SYNC_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId       string `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	StartFrameId int32  `protobuf:"varint,2,opt,name=startFrameId,proto3" json:"startFrameId,omitempty"`
}

func (x *FRAME_SYNC_DATA_SYNC_REQ) Reset() {
	*x = FRAME_SYNC_DATA_SYNC_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRAME_SYNC_DATA_SYNC_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRAME_SYNC_DATA_SYNC_REQ) ProtoMessage() {}

func (x *FRAME_SYNC_DATA_SYNC_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRAME_SYNC_DATA_SYNC_REQ.ProtoReflect.Descriptor instead.
func (*FRAME_SYNC_DATA_SYNC_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{141}
}

func (x *FRAME_SYNC_DATA_SYNC_REQ) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *FRAME_SYNC_DATA_SYNC_REQ) GetStartFrameId() int32 {
	if x != nil {
		return x.StartFrameId
	}
	return 0
}

type FRAME_SYNC_DATA_SYNC_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId       string             `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	StartFrameId int32              `protobuf:"varint,2,opt,name=startFrameId,proto3" json:"startFrameId,omitempty"`
	Data         []*FRAME_SYNC_DATA `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *FRAME_SYNC_DATA_SYNC_RES) Reset() {
	*x = FRAME_SYNC_DATA_SYNC_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FRAME_SYNC_DATA_SYNC_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FRAME_SYNC_DATA_SYNC_RES) ProtoMessage() {}

func (x *FRAME_SYNC_DATA_SYNC_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FRAME_SYNC_DATA_SYNC_RES.ProtoReflect.Descriptor instead.
func (*FRAME_SYNC_DATA_SYNC_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{142}
}

func (x *FRAME_SYNC_DATA_SYNC_RES) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *FRAME_SYNC_DATA_SYNC_RES) GetStartFrameId() int32 {
	if x != nil {
		return x.StartFrameId
	}
	return 0
}

func (x *FRAME_SYNC_DATA_SYNC_RES) GetData() []*FRAME_SYNC_DATA {
	if x != nil {
		return x.Data
	}
	return nil
}

type INSIDE_LINEUP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeroId          int32 `protobuf:"varint,1,opt,name=heroId,proto3" json:"heroId,omitempty"`
	InsideHeroLevel int32 `protobuf:"varint,2,opt,name=insideHeroLevel,proto3" json:"insideHeroLevel,omitempty"`
}

func (x *INSIDE_LINEUP) Reset() {
	*x = INSIDE_LINEUP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *INSIDE_LINEUP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*INSIDE_LINEUP) ProtoMessage() {}

func (x *INSIDE_LINEUP) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use INSIDE_LINEUP.ProtoReflect.Descriptor instead.
func (*INSIDE_LINEUP) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{143}
}

func (x *INSIDE_LINEUP) GetHeroId() int32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

func (x *INSIDE_LINEUP) GetInsideHeroLevel() int32 {
	if x != nil {
		return x.InsideHeroLevel
	}
	return 0
}

type HERO_COMPOSE struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PosIndex           int32 `protobuf:"varint,1,opt,name=posIndex,proto3" json:"posIndex,omitempty"`
	HeroId             int32 `protobuf:"varint,2,opt,name=heroId,proto3" json:"heroId,omitempty"`
	SyntheticHeroLevel int32 `protobuf:"varint,3,opt,name=syntheticHeroLevel,proto3" json:"syntheticHeroLevel,omitempty"`
}

func (x *HERO_COMPOSE) Reset() {
	*x = HERO_COMPOSE{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HERO_COMPOSE) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HERO_COMPOSE) ProtoMessage() {}

func (x *HERO_COMPOSE) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HERO_COMPOSE.ProtoReflect.Descriptor instead.
func (*HERO_COMPOSE) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{144}
}

func (x *HERO_COMPOSE) GetPosIndex() int32 {
	if x != nil {
		return x.PosIndex
	}
	return 0
}

func (x *HERO_COMPOSE) GetHeroId() int32 {
	if x != nil {
		return x.HeroId
	}
	return 0
}

func (x *HERO_COMPOSE) GetSyntheticHeroLevel() int32 {
	if x != nil {
		return x.SyntheticHeroLevel
	}
	return 0
}

type NOTICE_REQ struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NOTICE_REQ) Reset() {
	*x = NOTICE_REQ{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NOTICE_REQ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NOTICE_REQ) ProtoMessage() {}

func (x *NOTICE_REQ) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NOTICE_REQ.ProtoReflect.Descriptor instead.
func (*NOTICE_REQ) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{145}
}

type NOTICE_RES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *NOTICE_RES) Reset() {
	*x = NOTICE_RES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NOTICE_RES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NOTICE_RES) ProtoMessage() {}

func (x *NOTICE_RES) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NOTICE_RES.ProtoReflect.Descriptor instead.
func (*NOTICE_RES) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{146}
}

func (x *NOTICE_RES) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

var File_msg_proto protoreflect.FileDescriptor

var file_msg_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x59, 0x0a, 0x0b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x12,
	0x20, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x0b,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x20, 0x0a, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x1e, 0x0a, 0x06, 0x47, 0x4d, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x6d, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x6d, 0x4d, 0x73,
	0x67, 0x22, 0x41, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x5d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x53,
	0x50, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x38, 0x0a, 0x0a, 0x49, 0x44, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x43, 0x61, 0x72, 0x64, 0x22, 0x48, 0x0a,
	0x0a, 0x49, 0x44, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x44, 0x0a, 0x0e, 0x52, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6a, 0x0a,
	0x0e, 0x52, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x53, 0x50, 0x12,
	0x28, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x22, 0xdf, 0x05, 0x0a,
	0x0f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x53, 0x50,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65,
	0x78, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x76, 0x70, 0x4e,
	0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x76, 0x70, 0x4e, 0x75, 0x6d,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x76, 0x70, 0x57, 0x69, 0x6e, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x76, 0x70, 0x57, 0x69, 0x6e, 0x4f, 0x64, 0x64, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x54, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x50, 0x76, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x50, 0x76, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x63, 0x6f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2c,
	0x0a, 0x16, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2c, 0x0a, 0x16,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x17, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x54, 0x4c,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x2f, 0x0a, 0x17, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x54,
	0x4c, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x2f, 0x0a, 0x17,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x2f, 0x0a,
	0x17, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x3f,
	0x0a, 0x1d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f,
	0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22,
	0x3f, 0x0a, 0x1d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x53, 0x50,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x22, 0x8b, 0x01, 0x0a, 0x09, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x65, 0x72, 0x6f, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x6b, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1f,
	0x0a, 0x09, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x0f, 0x0a, 0x0d, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x22, 0x33, 0x0a, 0x0d, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x53,
	0x50, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x15, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x15, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x52, 0x53, 0x50, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67,
	0x6f, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48, 0x0a, 0x16, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6b, 0x69, 0x6e, 0x49,
	0x64, 0x22, 0x3c, 0x0a, 0x16, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x49, 0x44, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x22, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x48, 0x45, 0x52, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x27, 0x0a, 0x0d, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x51,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x0d, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a,
	0x0b, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x22, 0x37, 0x0a, 0x0f, 0x4c, 0x49, 0x4e, 0x45, 0x55,
	0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4c,
	0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x47, 0x0a, 0x11, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55,
	0x50, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x11, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x24,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x16, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x16, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52,
	0x53, 0x50, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x04, 0x0a,
	0x09, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x72,
	0x6f, 0x70, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x48, 0x4f,
	0x50, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x52, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x42, 0x6f, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x42, 0x4f, 0x58,
	0x52, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x42, 0x6f, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f,
	0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x62,
	0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x61, 0x0a, 0x08, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x42, 0x4f, 0x58, 0x12,
	0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x67,
	0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x27, 0x0a,
	0x07, 0x62, 0x6f, 0x78, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x4f, 0x58, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x52, 0x07, 0x62,
	0x6f, 0x78, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x40, 0x0a, 0x08, 0x42, 0x4f, 0x58, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x22, 0x3d, 0x0a, 0x09, 0x53, 0x48, 0x4f, 0x50,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x68, 0x65, 0x72, 0x6f, 0x4e, 0x75, 0x6d, 0x22, 0x63, 0x0a, 0x0d, 0x53, 0x48, 0x4f, 0x50, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x68, 0x6f,
	0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xf3, 0x01, 0x0a,
	0x0d, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x68,
	0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53,
	0x48, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x2c, 0x0a, 0x0e, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x42, 0x0a, 0x0c, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x42, 0x55, 0x59, 0x5f, 0x52, 0x45, 0x51,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x42, 0x55,
	0x59, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x6f,
	0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12,
	0x2a, 0x0a, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x48, 0x45, 0x52,
	0x4f, 0x52, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x6f,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x72, 0x6f, 0x70, 0x22, 0x99, 0x01,
	0x0a, 0x09, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x09,
	0x50, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64,
	0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x0f, 0x0a,
	0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x22, 0x3b,
	0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x12,
	0x2a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf9, 0x02, 0x0a, 0x09,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12,
	0x24, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x42,
	0x4f, 0x58, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x22, 0x61, 0x0a, 0x08, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x42, 0x4f, 0x58, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e,
	0x64, 0x12, 0x27, 0x0a, 0x07, 0x62, 0x6f, 0x78, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x4f, 0x58, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x52, 0x07, 0x62, 0x6f, 0x78, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x5b, 0x0a, 0x0f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x22, 0xe1, 0x01, 0x0a, 0x0f, 0x46, 0x49, 0x4e, 0x49,
	0x53, 0x48, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61,
	0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d,
	0x6f, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x48, 0x4f, 0x50,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x52, 0x08, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x38, 0x0a, 0x12, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52,
	0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x3b, 0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x27, 0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x24, 0x0a, 0x0e, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x6a, 0x0a, 0x0e, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8d, 0x01,
	0x0a, 0x13, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x22, 0xe7, 0x01,
	0x0a, 0x13, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x68,
	0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x52, 0x08, 0x68,
	0x65, 0x72, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x0d, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x0d, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x5f, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x39, 0x0a, 0x0d, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x65, 0x0a,
	0x0d, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x27, 0x0a, 0x0d, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x22, 0x27, 0x0a,
	0x0d, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2a, 0x0a, 0x10, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x69, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c,
	0x49, 0x64, 0x22, 0x52, 0x0a, 0x10, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x31, 0x0a, 0x0b, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbd, 0x01, 0x0a, 0x09, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x5f, 0x0a, 0x0b, 0x4d, 0x41, 0x49,
	0x4c, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x41, 0x49, 0x4c, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x09, 0x4d, 0x41,
	0x49, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x65, 0x0a,
	0x09, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x64, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x68, 0x65, 0x72, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x52, 0x08, 0x68, 0x65, 0x72, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x2d, 0x0a, 0x15, 0x43, 0x4f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x15, 0x43, 0x4f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x26, 0x0a, 0x06,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x06, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6b, 0x65,
	0x79, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x18,
	0x43, 0x4f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x32,
	0x0a, 0x18, 0x43, 0x4f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x6f, 0x0a, 0x10, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x52, 0x06, 0x6c, 0x69, 0x6e,
	0x65, 0x75, 0x70, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x17, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45,
	0x51, 0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x31, 0x0a, 0x17, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x65, 0x72, 0x6f, 0x4d, 0x69, 0x78,
	0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x48, 0x65, 0x72, 0x6f, 0x4d, 0x69, 0x78, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x11,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69,
	0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x73,
	0x65, 0x6c, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x2d, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x76, 0x70, 0x57, 0x69, 0x6e, 0x4f, 0x64, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x76, 0x70, 0x57, 0x69, 0x6e, 0x4f, 0x64, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x53, 0x0a, 0x0d, 0x42, 0x41,
	0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72,
	0x6f, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x48, 0x65,
	0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f,
	0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x79, 0x0a, 0x1a, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45,
	0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x2f, 0x0a,
	0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x55, 0x50, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x22, 0x9a, 0x01, 0x0a, 0x1a, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f,
	0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x74,
	0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65,
	0x75, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x52, 0x06, 0x6c, 0x69,
	0x6e, 0x65, 0x75, 0x70, 0x22, 0xa8, 0x01, 0x0a, 0x1b, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x48, 0x65, 0x72, 0x6f, 0x4d, 0x69, 0x78, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x48, 0x65, 0x72, 0x6f, 0x4d, 0x69, 0x78, 0x4d,
	0x61, 0x78, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22,
	0x8e, 0x02, 0x0a, 0x1b, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x12,
	0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x44,
	0x52, 0x4f, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x2b, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12, 0x2d, 0x0a,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64,
	0x22, 0x16, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x22, 0x4d, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53,
	0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x2f, 0x0a, 0x0a,
	0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x64, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x72,
	0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xbf, 0x01,
	0x0a, 0x0b, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x12, 0x32, 0x0a,
	0x14, 0x72, 0x61, 0x6e, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x61, 0x6e,
	0x64, 0x48, 0x65, 0x72, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x57, 0x69, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x61, 0x6e,
	0x64, 0x57, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x61, 0x6e,
	0x64, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x72, 0x61, 0x6e, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x1b, 0x0a, 0x19, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x4e,
	0x44, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x22, 0x43, 0x0a, 0x19,
	0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x52,
	0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x44, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x22, 0x4e, 0x0a, 0x1b, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x55,
	0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x76, 0x0a, 0x1b, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x55,
	0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53,
	0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x4a, 0x0a, 0x17, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42,
	0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x62, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53,
	0x12, 0x2f, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x52, 0x45, 0x51, 0x22, 0x4e, 0x0a, 0x1e, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x72, 0x6f, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x1f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x46, 0x52,
	0x45, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xaf, 0x01,
	0x0a, 0x17, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44,
	0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48,
	0x65, 0x72, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x48, 0x65, 0x72, 0x6f, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x64, 0x22,
	0x3d, 0x0a, 0x14, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x52, 0x41, 0x4e, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x92,
	0x01, 0x0a, 0x14, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x52, 0x41, 0x4e, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x75, 0x6d,
	0x12, 0x31, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x19, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x4f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x19, 0x52, 0x41, 0x4e, 0x4b,
	0x5f, 0x43, 0x4f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x6c, 0x66, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x52, 0x61, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x41,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x4f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x67, 0x0a, 0x1c, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x4f, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2b, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45,
	0x52, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x4a, 0x0a, 0x08, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x08, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52,
	0x53, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x23, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x52, 0x45, 0x51, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x66, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x6c, 0x0a, 0x10, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x0f, 0x46, 0x52, 0x49, 0x45, 0x4e,
	0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9e,
	0x01, 0x0a, 0x0f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52,
	0x53, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x35, 0x0a, 0x0f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x0f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44,
	0x5f, 0x46, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x20, 0x0a, 0x0e, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x27, 0x0a, 0x15, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x4c, 0x41,
	0x43, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x10, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x16, 0x0a, 0x14, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x47,
	0x52, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x22, 0x23, 0x0a, 0x11, 0x46, 0x52, 0x49, 0x45, 0x4e,
	0x44, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15,
	0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x22, 0x37, 0x0a, 0x11, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c,
	0x0a, 0x16, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x63, 0x0a, 0x11,
	0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x75,
	0x70, 0x22, 0x52, 0x0a, 0x11, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x69, 0x0a, 0x17, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x51,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x75, 0x70,
	0x22, 0x19, 0x0a, 0x17, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x52, 0x53, 0x50, 0x22, 0x2a, 0x0a, 0x18, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x46, 0x52, 0x49, 0x45, 0x4e,
	0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f,
	0x52, 0x53, 0x50, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x52, 0x0a, 0x0e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3d, 0x0a, 0x11, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x12,
	0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x73, 0x67, 0x2e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x14, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45,
	0x51, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x17, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x53, 0x65, 0x65, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x35, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x12, 0x3a, 0x0a, 0x0e, 0x68, 0x65, 0x72, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x49,
	0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x52, 0x0e, 0x68, 0x65,
	0x72, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0f,
	0x68, 0x65, 0x72, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x48, 0x45, 0x52, 0x4f,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x52, 0x0f, 0x68, 0x65, 0x72, 0x6f, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x18, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x52, 0x45, 0x51, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49,
	0x64, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x51, 0x0a, 0x0d, 0x49, 0x4e, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x45, 0x55, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x48, 0x65,
	0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x72, 0x0a, 0x0c, 0x48, 0x45, 0x52, 0x4f, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x73,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74,
	0x69, 0x63, 0x48, 0x65, 0x72, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x0c, 0x0a, 0x0a, 0x4e,
	0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x22, 0x26, 0x0a, 0x0a, 0x4e, 0x4f, 0x54,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x2a, 0xa2, 0x17, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x53, 0x47, 0x49, 0x44, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x08, 0x47, 0x4d, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x43, 0x10, 0xad, 0x4d, 0x12, 0x0c, 0x0a,
	0x07, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x43, 0x10, 0xe9, 0x07, 0x12, 0x0c, 0x0a, 0x07, 0x4c,
	0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x53, 0x10, 0xea, 0x07, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x43, 0x10, 0xcd, 0x08, 0x12, 0x12, 0x0a,
	0x0d, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x10, 0xce,
	0x08, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59,
	0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x10, 0xd7, 0x08, 0x12, 0x19, 0x0a, 0x14,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x10, 0xd8, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x43,
	0x10, 0xe1, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x10, 0xe2, 0x08, 0x12,
	0x1a, 0x0a, 0x15, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x10, 0xeb, 0x08, 0x12, 0x1a, 0x0a, 0x15, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x53, 0x10, 0xec, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x10, 0xf5, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x10, 0xf6, 0x08, 0x12, 0x10, 0x0a, 0x0b, 0x48,
	0x45, 0x52, 0x4f, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x10, 0xb1, 0x09, 0x12, 0x10, 0x0a,
	0x0b, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x10, 0xb2, 0x09, 0x12,
	0x10, 0x0a, 0x0b, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x10, 0xbb,
	0x09, 0x12, 0x10, 0x0a, 0x0b, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x53,
	0x10, 0xbc, 0x09, 0x12, 0x18, 0x0a, 0x13, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x10, 0xc5, 0x09, 0x12, 0x18, 0x0a,
	0x13, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x53, 0x10, 0xc6, 0x09, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x49, 0x44, 0x5f, 0x43, 0x10,
	0xcf, 0x09, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x53, 0x4b, 0x49, 0x4e, 0x49, 0x44, 0x5f, 0x53, 0x10, 0xd0, 0x09, 0x12, 0x10, 0x0a,
	0x0b, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x10, 0x95, 0x0a, 0x12,
	0x10, 0x0a, 0x0b, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x10, 0x96,
	0x0a, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x43, 0x10, 0x9f, 0x0a, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x48, 0x4f, 0x50, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x5f, 0x53, 0x10, 0xa0, 0x0a, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x48, 0x4f, 0x50, 0x5f,
	0x42, 0x55, 0x59, 0x5f, 0x43, 0x10, 0xa9, 0x0a, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x48, 0x4f, 0x50,
	0x5f, 0x42, 0x55, 0x59, 0x5f, 0x53, 0x10, 0xaa, 0x0a, 0x12, 0x12, 0x0a, 0x0d, 0x4c, 0x49, 0x4e,
	0x45, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x10, 0xf9, 0x0a, 0x12, 0x12, 0x0a,
	0x0d, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x10, 0xfa,
	0x0a, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x55, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x10, 0x83, 0x0b, 0x12, 0x19, 0x0a, 0x14,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x53, 0x10, 0x84, 0x0b, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x55, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x10,
	0x8d, 0x0b, 0x12, 0x19, 0x0a, 0x14, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x55, 0x50, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x10, 0x8e, 0x0b, 0x12, 0x10, 0x0a,
	0x0b, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x10, 0xdd, 0x0b, 0x12,
	0x10, 0x0a, 0x0b, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x10, 0xde,
	0x0b, 0x12, 0x12, 0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x5f, 0x43, 0x10, 0xe7, 0x0b, 0x12, 0x12, 0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x5f, 0x53, 0x10, 0xe8, 0x0b, 0x12, 0x10, 0x0a, 0x0b, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x10, 0xf1, 0x0b, 0x12, 0x10, 0x0a, 0x0b, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x10, 0xf2, 0x0b, 0x12, 0x12, 0x0a,
	0x0d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x10, 0xfc,
	0x0b, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f,
	0x43, 0x10, 0xc1, 0x0c, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x53, 0x43, 0x4f,
	0x52, 0x45, 0x5f, 0x53, 0x10, 0xc2, 0x0c, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x10, 0xcb, 0x0c, 0x12,
	0x16, 0x0a, 0x11, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x57, 0x41,
	0x52, 0x44, 0x5f, 0x53, 0x10, 0xcc, 0x0c, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x10, 0xd5, 0x0c, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x10, 0xd6, 0x0c, 0x12, 0x10, 0x0a, 0x0b, 0x4d,
	0x41, 0x49, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x10, 0xa5, 0x0d, 0x12, 0x10, 0x0a,
	0x0b, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x10, 0xa6, 0x0d, 0x12,
	0x10, 0x0a, 0x0b, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x10, 0xaf,
	0x0d, 0x12, 0x10, 0x0a, 0x0b, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53,
	0x10, 0xb0, 0x0d, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x5f, 0x43, 0x10, 0xb9, 0x0d, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x41, 0x49, 0x4c,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x10, 0xba, 0x0d, 0x12, 0x0b, 0x0a,
	0x06, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x53, 0x10, 0xc4, 0x0d, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x43, 0x10, 0x89, 0x0e, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x4f,
	0x50, 0x45, 0x4e, 0x5f, 0x53, 0x10, 0x8a, 0x0e, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x43, 0x10, 0x93, 0x0e, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x4f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x53, 0x10, 0x94, 0x0e, 0x12, 0x13, 0x0a, 0x0e, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x10, 0xed, 0x0e, 0x12, 0x13, 0x0a, 0x0e, 0x42,
	0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x10, 0xee, 0x0e,
	0x12, 0x14, 0x0a, 0x0f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x43, 0x10, 0xf7, 0x0e, 0x12, 0x14, 0x0a, 0x0f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x10, 0xf8, 0x0e, 0x12, 0x1a, 0x0a, 0x15,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x5f, 0x43, 0x10, 0x81, 0x0f, 0x12, 0x1a, 0x0a, 0x15, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f,
	0x53, 0x10, 0x82, 0x0f, 0x12, 0x17, 0x0a, 0x12, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x10, 0xd1, 0x0f, 0x12, 0x17, 0x0a,
	0x12, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x53, 0x10, 0xd2, 0x0f, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x43,
	0x4f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x43, 0x10, 0xdb, 0x0f, 0x12, 0x1c, 0x0a, 0x17, 0x52, 0x41, 0x4e, 0x4b, 0x5f, 0x43, 0x4f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x10,
	0xdc, 0x0f, 0x12, 0x1d, 0x0a, 0x18, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x10, 0xb5,
	0x10, 0x12, 0x1d, 0x0a, 0x18, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x10, 0xb6, 0x10,
	0x12, 0x24, 0x0a, 0x1f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c,
	0x45, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x43, 0x10, 0xbf, 0x10, 0x12, 0x24, 0x0a, 0x1f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x10, 0xc0, 0x10, 0x12, 0x1e, 0x0a, 0x19,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x10, 0xc9, 0x10, 0x12, 0x1e, 0x0a, 0x19,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x10, 0xca, 0x10, 0x12, 0x23, 0x0a, 0x1e,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45,
	0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x10, 0xd3,
	0x10, 0x12, 0x23, 0x0a, 0x1e, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52,
	0x44, 0x5f, 0x53, 0x10, 0xd4, 0x10, 0x12, 0x25, 0x0a, 0x20, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x10, 0xdd, 0x10, 0x12, 0x25, 0x0a,
	0x20, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47,
	0x45, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x5f,
	0x53, 0x10, 0xde, 0x10, 0x12, 0x28, 0x0a, 0x23, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x45,
	0x52, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x10, 0xe7, 0x10, 0x12, 0x28,
	0x0a, 0x23, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x5f, 0x53, 0x10, 0xe8, 0x10, 0x12, 0x29, 0x0a, 0x24, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x4e,
	0x44, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x43,
	0x10, 0xf1, 0x10, 0x12, 0x29, 0x0a, 0x24, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48,
	0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x45, 0x52,
	0x4f, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x53, 0x10, 0xf2, 0x10, 0x12, 0x21,
	0x0a, 0x1c, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e,
	0x47, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f, 0x43, 0x10, 0xfb,
	0x10, 0x12, 0x21, 0x0a, 0x1c, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c,
	0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x48, 0x45, 0x52, 0x4f, 0x5f,
	0x53, 0x10, 0xfc, 0x10, 0x12, 0x21, 0x0a, 0x1c, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43,
	0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x10, 0x85, 0x11, 0x12, 0x21, 0x0a, 0x1c, 0x42, 0x41, 0x54, 0x54, 0x4c,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x4c, 0x45, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x10, 0x86, 0x11, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x48,
	0x41, 0x54, 0x5f, 0x43, 0x10, 0x99, 0x11, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x48, 0x41, 0x54, 0x5f,
	0x53, 0x10, 0x9a, 0x11, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x5f, 0x43, 0x10, 0xa3, 0x11, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x54,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x53, 0x10, 0xa4, 0x11, 0x12, 0x18, 0x0a, 0x13,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e,
	0x43, 0x5f, 0x43, 0x10, 0xfd, 0x11, 0x12, 0x18, 0x0a, 0x13, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x10, 0xfe, 0x11,
	0x12, 0x1f, 0x0a, 0x1a, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x10, 0x88,
	0x12, 0x12, 0x1e, 0x0a, 0x19, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x10, 0x91,
	0x12, 0x12, 0x1e, 0x0a, 0x19, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x53, 0x10, 0x92,
	0x12, 0x12, 0x22, 0x0a, 0x1d, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x43, 0x10, 0x9b, 0x12, 0x12, 0x22, 0x0a, 0x1d, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x10, 0x9c, 0x12, 0x12, 0x12, 0x0a, 0x0d, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x43, 0x10, 0xe1, 0x12, 0x12, 0x12, 0x0a,
	0x0d, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x53, 0x10, 0xe2,
	0x12, 0x12, 0x12, 0x0a, 0x0d, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x46, 0x49, 0x4e, 0x44,
	0x5f, 0x43, 0x10, 0xeb, 0x12, 0x12, 0x12, 0x0a, 0x0d, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f,
	0x46, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x10, 0xec, 0x12, 0x12, 0x11, 0x0a, 0x0c, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x43, 0x10, 0xf5, 0x12, 0x12, 0x18, 0x0a, 0x13,
	0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x43, 0x10, 0xff, 0x12, 0x12, 0x13, 0x0a, 0x0e, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44,
	0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x43, 0x10, 0x89, 0x13, 0x12, 0x14, 0x0a, 0x0f, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x10, 0x93,
	0x13, 0x12, 0x14, 0x0a, 0x0f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x43, 0x10, 0x9d, 0x13, 0x12, 0x17, 0x0a, 0x12, 0x46, 0x52, 0x49, 0x45, 0x4e,
	0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x43, 0x10, 0xa7, 0x13,
	0x12, 0x18, 0x0a, 0x13, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x52,
	0x45, 0x46, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x10, 0xb1, 0x13, 0x12, 0x19, 0x0a, 0x14, 0x46, 0x52,
	0x49, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x10, 0xbc, 0x13, 0x12, 0x14, 0x0a, 0x0f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f,
	0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x10, 0xc5, 0x13, 0x12, 0x14, 0x0a, 0x0f, 0x46,
	0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x10, 0xc6,
	0x13, 0x12, 0x1a, 0x0a, 0x15, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x4c, 0x45, 0x5f, 0x41, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x43, 0x10, 0xcf, 0x13, 0x12, 0x1a, 0x0a,
	0x15, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x41,
	0x47, 0x52, 0x45, 0x45, 0x5f, 0x53, 0x10, 0xd0, 0x13, 0x12, 0x1b, 0x0a, 0x16, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x5f, 0x43, 0x10, 0xd9, 0x13, 0x12, 0x1b, 0x0a, 0x16, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44,
	0x5f, 0x42, 0x41, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x53,
	0x10, 0xda, 0x13, 0x12, 0x0d, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x10,
	0xa9, 0x14, 0x12, 0x0d, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x10, 0xaa,
	0x14, 0x12, 0x13, 0x0a, 0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x45,
	0x59, 0x5f, 0x53, 0x10, 0xf2, 0x2e, 0x2a, 0x28, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x5f, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x6f, 0x78, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x65, 0x72, 0x6f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x02,
	0x2a, 0x7c, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x46, 0x72, 0x69, 0x65, 0x64, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x69, 0x65, 0x64, 0x10, 0x06, 0x2a, 0x34,
	0x0a, 0x0c, 0x52, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x10, 0x02, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2e, 0x2f, 0x6d, 0x73, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msg_proto_rawDescOnce sync.Once
	file_msg_proto_rawDescData = file_msg_proto_rawDesc
)

func file_msg_proto_rawDescGZIP() []byte {
	file_msg_proto_rawDescOnce.Do(func() {
		file_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_msg_proto_rawDescData)
	})
	return file_msg_proto_rawDescData
}

var file_msg_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 147)
var file_msg_proto_goTypes = []interface{}{
	(MsgId)(0),                              // 0: msg.MsgId
	(Prop_Type)(0),                          // 1: msg.Prop_Type
	(BattleType)(0),                         // 2: msg.BattleType
	(RANKING_TYPE)(0),                       // 3: msg.RANKING_TYPE
	(*MESSAGE_REQ)(nil),                     // 4: msg.MESSAGE_REQ
	(*MESSAGE_RSP)(nil),                     // 5: msg.MESSAGE_RSP
	(*GM_REQ)(nil),                          // 6: msg.GM_REQ
	(*LOGIN_REQ)(nil),                       // 7: msg.LOGIN_REQ
	(*LOGIN_RSP)(nil),                       // 8: msg.LOGIN_RSP
	(*IDCARD_REQ)(nil),                      // 9: msg.IDCARD_REQ
	(*IDCARD_RSP)(nil),                      // 10: msg.IDCARD_RSP
	(*RE_CONNECT_REQ)(nil),                  // 11: msg.RE_CONNECT_REQ
	(*RE_CONNECT_RSP)(nil),                  // 12: msg.RE_CONNECT_RSP
	(*PLAYER_DATA_REQ)(nil),                 // 13: msg.PLAYER_DATA_REQ
	(*PLAYER_DATA_RSP)(nil),                 // 14: msg.PLAYER_DATA_RSP
	(*UPDATE_PLAYER_NAME_REQ)(nil),          // 15: msg.UPDATE_PLAYER_NAME_REQ
	(*UPDATE_PLAYER_NAME_RSP)(nil),          // 16: msg.UPDATE_PLAYER_NAME_RSP
	(*UPDATE_PLAYER_TITLE_REQ)(nil),         // 17: msg.UPDATE_PLAYER_TITLE_REQ
	(*UPDATE_PLAYER_TITLE_RSP)(nil),         // 18: msg.UPDATE_PLAYER_TITLE_RSP
	(*UPDATE_PLAYER_IMAGE_REQ)(nil),         // 19: msg.UPDATE_PLAYER_IMAGE_REQ
	(*UPDATE_PLAYER_IMAGE_RSP)(nil),         // 20: msg.UPDATE_PLAYER_IMAGE_RSP
	(*UPDATE_PLAYER_IMAGE_FRAME_REQ)(nil),   // 21: msg.UPDATE_PLAYER_IMAGE_FRAME_REQ
	(*UPDATE_PLAYER_IMAGE_FRAME_RSP)(nil),   // 22: msg.UPDATE_PLAYER_IMAGE_FRAME_RSP
	(*HERO_DATA)(nil),                       // 23: msg.HERO_DATA
	(*HERO_LIST)(nil),                       // 24: msg.HERO_LIST
	(*HERO_LIST_REQ)(nil),                   // 25: msg.HERO_LIST_REQ
	(*HERO_LIST_RSP)(nil),                   // 26: msg.HERO_LIST_RSP
	(*UPDATE_HERO_LEVEL_REQ)(nil),           // 27: msg.UPDATE_HERO_LEVEL_REQ
	(*UPDATE_HERO_LEVEL_RSP)(nil),           // 28: msg.UPDATE_HERO_LEVEL_RSP
	(*UPDATE_HERO_SKINID_REQ)(nil),          // 29: msg.UPDATE_HERO_SKINID_REQ
	(*UPDATE_HERO_SKINID_RSP)(nil),          // 30: msg.UPDATE_HERO_SKINID_RSP
	(*HERO_INFO_REQ)(nil),                   // 31: msg.HERO_INFO_REQ
	(*HERO_INFO_RSP)(nil),                   // 32: msg.HERO_INFO_RSP
	(*LINEUP_DATA)(nil),                     // 33: msg.LINEUP_DATA
	(*LINEUP_LIST_REQ)(nil),                 // 34: msg.LINEUP_LIST_REQ
	(*LINEUP_LIST_RSP)(nil),                 // 35: msg.LINEUP_LIST_RSP
	(*UPDATE_LINEUP_REQ)(nil),               // 36: msg.UPDATE_LINEUP_REQ
	(*UPDATE_LINEUP_RSP)(nil),               // 37: msg.UPDATE_LINEUP_RSP
	(*UPDATE_LINEUP_NAME_REQ)(nil),          // 38: msg.UPDATE_LINEUP_NAME_REQ
	(*UPDATE_LINEUP_NAME_RSP)(nil),          // 39: msg.UPDATE_LINEUP_NAME_RSP
	(*SHOP_DATA)(nil),                       // 40: msg.SHOP_DATA
	(*SHOP_BOX)(nil),                        // 41: msg.SHOP_BOX
	(*BOX_ROLE)(nil),                        // 42: msg.BOX_ROLE
	(*SHOP_HERO)(nil),                       // 43: msg.SHOP_HERO
	(*SHOP_LIST_REQ)(nil),                   // 44: msg.SHOP_LIST_REQ
	(*SHOP_LIST_RSP)(nil),                   // 45: msg.SHOP_LIST_RSP
	(*SHOP_RESET_REQ)(nil),                  // 46: msg.SHOP_RESET_REQ
	(*SHOP_BUY_REQ)(nil),                    // 47: msg.SHOP_BUY_REQ
	(*SHOP_BUY_RSP)(nil),                    // 48: msg.SHOP_BUY_RSP
	(*SHOP_CARD)(nil),                       // 49: msg.SHOP_CARD
	(*UPDATE_MONEY_RSP)(nil),                // 50: msg.UPDATE_MONEY_RSP
	(*PROP_DATA)(nil),                       // 51: msg.PROP_DATA
	(*TASK_LIST_REQ)(nil),                   // 52: msg.TASK_LIST_REQ
	(*TASK_LIST_RES)(nil),                   // 53: msg.TASK_LIST_RES
	(*TASK_DATA)(nil),                       // 54: msg.TASK_DATA
	(*TASK_BOX)(nil),                        // 55: msg.TASK_BOX
	(*FINISH_TASK_REQ)(nil),                 // 56: msg.FINISH_TASK_REQ
	(*FINISH_TASK_RES)(nil),                 // 57: msg.FINISH_TASK_RES
	(*UPDATE_TASK_STATUS)(nil),              // 58: msg.UPDATE_TASK_STATUS
	(*TASK_TEST_REQ)(nil),                   // 59: msg.TASK_TEST_REQ
	(*TASK_TEST_RES)(nil),                   // 60: msg.TASK_TEST_RES
	(*CARD_SCORE_REQ)(nil),                  // 61: msg.CARD_SCORE_REQ
	(*CARD_SCORE_RES)(nil),                  // 62: msg.CARD_SCORE_RES
	(*CARD_GET_REWARD_REQ)(nil),             // 63: msg.CARD_GET_REWARD_REQ
	(*CARD_GET_REWARD_RES)(nil),             // 64: msg.CARD_GET_REWARD_RES
	(*CARD_TEST_REQ)(nil),                   // 65: msg.CARD_TEST_REQ
	(*CARD_TEST_RES)(nil),                   // 66: msg.CARD_TEST_RES
	(*CARD_DATA)(nil),                       // 67: msg.CARD_DATA
	(*MAIL_LIST_REQ)(nil),                   // 68: msg.MAIL_LIST_REQ
	(*MAIL_LIST_RES)(nil),                   // 69: msg.MAIL_LIST_RES
	(*MAIL_READ_REQ)(nil),                   // 70: msg.MAIL_READ_REQ
	(*MAIL_READ_RES)(nil),                   // 71: msg.MAIL_READ_RES
	(*MAIL_RECEIVE_REQ)(nil),                // 72: msg.MAIL_RECEIVE_REQ
	(*MAIL_RECEIVE_RES)(nil),                // 73: msg.MAIL_RECEIVE_RES
	(*MAIL_UPDATE)(nil),                     // 74: msg.MAIL_UPDATE
	(*MAIL_DATA)(nil),                       // 75: msg.MAIL_DATA
	(*MAIL_REWARD)(nil),                     // 76: msg.MAIL_REWARD
	(*MAIL_PROP)(nil),                       // 77: msg.MAIL_PROP
	(*DROP_DATA)(nil),                       // 78: msg.DROP_DATA
	(*COOPERATION_CHEST_REQ)(nil),           // 79: msg.COOPERATION_CHEST_REQ
	(*COOPERATION_CHEST_RES)(nil),           // 80: msg.COOPERATION_CHEST_RES
	(*COOPERATION_KEY_TEST_REQ)(nil),        // 81: msg.COOPERATION_KEY_TEST_REQ
	(*COOPERATION_KEY_TEST_RES)(nil),        // 82: msg.COOPERATION_KEY_TEST_RES
	(*BATTLE_MATCH_REQ)(nil),                // 83: msg.BATTLE_MATCH_REQ
	(*BATTLE_MATCH_RES)(nil),                // 84: msg.BATTLE_MATCH_RES
	(*BATTLE_MATCH_CANCEL_REQ)(nil),         // 85: msg.BATTLE_MATCH_CANCEL_REQ
	(*BATTLE_MATCH_CANCEL_RES)(nil),         // 86: msg.BATTLE_MATCH_CANCEL_RES
	(*BATTLE_SETTLE_REQ)(nil),               // 87: msg.BATTLE_SETTLE_REQ
	(*BATTLE_SETTLE_RES)(nil),               // 88: msg.BATTLE_SETTLE_RES
	(*BATTLE_PLAYER_DATA)(nil),              // 89: msg.BATTLE_PLAYER_DATA
	(*BATTLE_LINEUP)(nil),                   // 90: msg.BATTLE_LINEUP
	(*BATTLE_CHALLENGE_MATCH_REQ)(nil),      // 91: msg.BATTLE_CHALLENGE_MATCH_REQ
	(*BATTLE_CHALLENGE_MATCH_RES)(nil),      // 92: msg.BATTLE_CHALLENGE_MATCH_RES
	(*MATCH_PLAYER)(nil),                    // 93: msg.MATCH_PLAYER
	(*BATTLE_CHALLENGE_SETTLE_REQ)(nil),     // 94: msg.BATTLE_CHALLENGE_SETTLE_REQ
	(*BATTLE_CHALLENGE_SETTLE_RES)(nil),     // 95: msg.BATTLE_CHALLENGE_SETTLE_RES
	(*CHALLENGE_STATUS_REQ)(nil),            // 96: msg.CHALLENGE_STATUS_REQ
	(*CHALLENGE_STATUS_RES)(nil),            // 97: msg.CHALLENGE_STATUS_RES
	(*CHALLENGE_STATUS)(nil),                // 98: msg.CHALLENGE_STATUS
	(*RAND_DETAIL)(nil),                     // 99: msg.RAND_DETAIL
	(*CHALLENGE_RAND_REWARD_REQ)(nil),       // 100: msg.CHALLENGE_RAND_REWARD_REQ
	(*CHALLENGE_RAND_REWARD_RES)(nil),       // 101: msg.CHALLENGE_RAND_REWARD_RES
	(*CHALLENGE_UNLOCK_REWARD_REQ)(nil),     // 102: msg.CHALLENGE_UNLOCK_REWARD_REQ
	(*CHALLENGE_UNLOCK_REWARD_RES)(nil),     // 103: msg.CHALLENGE_UNLOCK_REWARD_RES
	(*CHALLENGE_ADMISSION_REQ)(nil),         // 104: msg.CHALLENGE_ADMISSION_REQ
	(*CHALLENGE_ADMISSION_RES)(nil),         // 105: msg.CHALLENGE_ADMISSION_RES
	(*CHALLENGE_RAND_HERO_REQ)(nil),         // 106: msg.CHALLENGE_RAND_HERO_REQ
	(*CHALLENGE_RAND_HERO_SELECT_REQ)(nil),  // 107: msg.CHALLENGE_RAND_HERO_SELECT_REQ
	(*CHALLENGE_RAND_HERO_REFRESH_REQ)(nil), // 108: msg.CHALLENGE_RAND_HERO_REFRESH_REQ
	(*CHALLENGE_RAND_HERO_RES)(nil),         // 109: msg.CHALLENGE_RAND_HERO_RES
	(*RANK_NORMAL_LIST_REQ)(nil),            // 110: msg.RANK_NORMAL_LIST_REQ
	(*RANK_NORMAL_LIST_RES)(nil),            // 111: msg.RANK_NORMAL_LIST_RES
	(*RANK_COOPERATION_LIST_REQ)(nil),       // 112: msg.RANK_COOPERATION_LIST_REQ
	(*RANK_COOPERATION_LIST_RES)(nil),       // 113: msg.RANK_COOPERATION_LIST_RES
	(*RANK_COOPERATION_PLAYER_DATA)(nil),    // 114: msg.RANK_COOPERATION_PLAYER_DATA
	(*CHAT_REQ)(nil),                        // 115: msg.CHAT_REQ
	(*CHAT_RSP)(nil),                        // 116: msg.CHAT_RSP
	(*CHAT_RECORD_REQ)(nil),                 // 117: msg.CHAT_RECORD_REQ
	(*CHAT_RECORD_RSP)(nil),                 // 118: msg.CHAT_RECORD_RSP
	(*FRIEND_LIST_DATA)(nil),                // 119: msg.FRIEND_LIST_DATA
	(*FRIEND_LIST_REQ)(nil),                 // 120: msg.FRIEND_LIST_REQ
	(*FRIEND_LIST_RSP)(nil),                 // 121: msg.FRIEND_LIST_RSP
	(*FRIEND_FIND_REQ)(nil),                 // 122: msg.FRIEND_FIND_REQ
	(*FRIEND_FIND_RSP)(nil),                 // 123: msg.FRIEND_FIND_RSP
	(*FRIEND_ADD_REQ)(nil),                  // 124: msg.FRIEND_ADD_REQ
	(*FRIEND_BLACK_LIST_REQ)(nil),           // 125: msg.FRIEND_BLACK_LIST_REQ
	(*FRIEND_AGREE_REQ)(nil),                // 126: msg.FRIEND_AGREE_REQ
	(*FRIEND_ALL_AGREE_REQ)(nil),            // 127: msg.FRIEND_ALL_AGREE_REQ
	(*FRIEND_REFUSE_REQ)(nil),               // 128: msg.FRIEND_REFUSE_REQ
	(*FRIEND_ALL_REFUSE_REQ)(nil),           // 129: msg.FRIEND_ALL_REFUSE_REQ
	(*FRIEND_DELETE_REQ)(nil),               // 130: msg.FRIEND_DELETE_REQ
	(*FRIEND_LIST_UPDATE_RSP)(nil),          // 131: msg.FRIEND_LIST_UPDATE_RSP
	(*FRIEND_BATTLE_REQ)(nil),               // 132: msg.FRIEND_BATTLE_REQ
	(*FRIEND_BATTLE_RSP)(nil),               // 133: msg.FRIEND_BATTLE_RSP
	(*FRIEND_BATTLE_AGREE_REQ)(nil),         // 134: msg.FRIEND_BATTLE_AGREE_REQ
	(*FRIEND_BATTLE_AGREE_RSP)(nil),         // 135: msg.FRIEND_BATTLE_AGREE_RSP
	(*FRIEND_BATTLE_CANCEL_REQ)(nil),        // 136: msg.FRIEND_BATTLE_CANCEL_REQ
	(*FRIEND_BATTLE_CANCEL_RSP)(nil),        // 137: msg.FRIEND_BATTLE_CANCEL_RSP
	(*FRAME_SYNC_REQ)(nil),                  // 138: msg.FRAME_SYNC_REQ
	(*FRAME_SYNC_RES)(nil),                  // 139: msg.FRAME_SYNC_RES
	(*FRAME_SYNC_UPDATE)(nil),               // 140: msg.FRAME_SYNC_UPDATE
	(*FRAME_SYNC_READY_REQ)(nil),            // 141: msg.FRAME_SYNC_READY_REQ
	(*FRAME_SYNC_READY_UPDATE)(nil),         // 142: msg.FRAME_SYNC_READY_UPDATE
	(*FRAME_SYNC_DATA)(nil),                 // 143: msg.FRAME_SYNC_DATA
	(*FRAME_SYNC_GAME_DATA)(nil),            // 144: msg.FRAME_SYNC_GAME_DATA
	(*FRAME_SYNC_DATA_SYNC_REQ)(nil),        // 145: msg.FRAME_SYNC_DATA_SYNC_REQ
	(*FRAME_SYNC_DATA_SYNC_RES)(nil),        // 146: msg.FRAME_SYNC_DATA_SYNC_RES
	(*INSIDE_LINEUP)(nil),                   // 147: msg.INSIDE_LINEUP
	(*HERO_COMPOSE)(nil),                    // 148: msg.HERO_COMPOSE
	(*NOTICE_REQ)(nil),                      // 149: msg.NOTICE_REQ
	(*NOTICE_RES)(nil),                      // 150: msg.NOTICE_RES
}
var file_msg_proto_depIdxs = []int32{
	0,   // 0: msg.MESSAGE_REQ.msgId:type_name -> msg.MsgId
	0,   // 1: msg.MESSAGE_RSP.msgId:type_name -> msg.MsgId
	23,  // 2: msg.HERO_LIST_RSP.data:type_name -> msg.HERO_DATA
	23,  // 3: msg.UPDATE_HERO_LEVEL_RSP.data:type_name -> msg.HERO_DATA
	23,  // 4: msg.UPDATE_HERO_SKINID_RSP.data:type_name -> msg.HERO_DATA
	23,  // 5: msg.HERO_INFO_RSP.data:type_name -> msg.HERO_DATA
	33,  // 6: msg.LINEUP_LIST_RSP.data:type_name -> msg.LINEUP_DATA
	33,  // 7: msg.UPDATE_LINEUP_RSP.data:type_name -> msg.LINEUP_DATA
	43,  // 8: msg.SHOP_DATA.heroList:type_name -> msg.SHOP_HERO
	41,  // 9: msg.SHOP_DATA.shopBox:type_name -> msg.SHOP_BOX
	42,  // 10: msg.SHOP_BOX.boxRole:type_name -> msg.BOX_ROLE
	40,  // 11: msg.SHOP_LIST_RSP.shopList:type_name -> msg.SHOP_DATA
	49,  // 12: msg.SHOP_LIST_RSP.cardList:type_name -> msg.SHOP_CARD
	43,  // 13: msg.SHOP_BUY_RSP.heroList:type_name -> msg.SHOP_HERO
	54,  // 14: msg.TASK_LIST_RES.taskList:type_name -> msg.TASK_DATA
	55,  // 15: msg.TASK_DATA.box:type_name -> msg.TASK_BOX
	42,  // 16: msg.TASK_BOX.boxRole:type_name -> msg.BOX_ROLE
	43,  // 17: msg.FINISH_TASK_RES.heroList:type_name -> msg.SHOP_HERO
	54,  // 18: msg.FINISH_TASK_RES.nextTask:type_name -> msg.TASK_DATA
	54,  // 19: msg.UPDATE_TASK_STATUS.task:type_name -> msg.TASK_DATA
	67,  // 20: msg.CARD_SCORE_RES.cardList:type_name -> msg.CARD_DATA
	43,  // 21: msg.CARD_GET_REWARD_RES.heroList:type_name -> msg.SHOP_HERO
	75,  // 22: msg.MAIL_LIST_RES.mailList:type_name -> msg.MAIL_DATA
	78,  // 23: msg.MAIL_RECEIVE_RES.reward:type_name -> msg.DROP_DATA
	75,  // 24: msg.MAIL_UPDATE.data:type_name -> msg.MAIL_DATA
	76,  // 25: msg.MAIL_DATA.reward:type_name -> msg.MAIL_REWARD
	77,  // 26: msg.MAIL_REWARD.list:type_name -> msg.MAIL_PROP
	1,   // 27: msg.MAIL_PROP.type:type_name -> msg.Prop_Type
	43,  // 28: msg.DROP_DATA.heroList:type_name -> msg.SHOP_HERO
	78,  // 29: msg.COOPERATION_CHEST_RES.reward:type_name -> msg.DROP_DATA
	2,   // 30: msg.BATTLE_MATCH_REQ.battleType:type_name -> msg.BattleType
	90,  // 31: msg.BATTLE_MATCH_REQ.lineup:type_name -> msg.BATTLE_LINEUP
	2,   // 32: msg.BATTLE_MATCH_RES.battleType:type_name -> msg.BattleType
	93,  // 33: msg.BATTLE_MATCH_RES.matchPlayer:type_name -> msg.MATCH_PLAYER
	2,   // 34: msg.BATTLE_MATCH_CANCEL_REQ.battleType:type_name -> msg.BattleType
	89,  // 35: msg.BATTLE_SETTLE_RES.self:type_name -> msg.BATTLE_PLAYER_DATA
	89,  // 36: msg.BATTLE_SETTLE_RES.other:type_name -> msg.BATTLE_PLAYER_DATA
	2,   // 37: msg.BATTLE_CHALLENGE_MATCH_REQ.battleType:type_name -> msg.BattleType
	90,  // 38: msg.BATTLE_CHALLENGE_MATCH_REQ.lineup:type_name -> msg.BATTLE_LINEUP
	2,   // 39: msg.BATTLE_CHALLENGE_MATCH_RES.battleType:type_name -> msg.BattleType
	93,  // 40: msg.BATTLE_CHALLENGE_MATCH_RES.matchPlayer:type_name -> msg.MATCH_PLAYER
	90,  // 41: msg.MATCH_PLAYER.lineup:type_name -> msg.BATTLE_LINEUP
	2,   // 42: msg.BATTLE_CHALLENGE_SETTLE_REQ.battleType:type_name -> msg.BattleType
	2,   // 43: msg.BATTLE_CHALLENGE_SETTLE_RES.battleType:type_name -> msg.BattleType
	78,  // 44: msg.BATTLE_CHALLENGE_SETTLE_RES.reward:type_name -> msg.DROP_DATA
	89,  // 45: msg.BATTLE_CHALLENGE_SETTLE_RES.self:type_name -> msg.BATTLE_PLAYER_DATA
	89,  // 46: msg.BATTLE_CHALLENGE_SETTLE_RES.other:type_name -> msg.BATTLE_PLAYER_DATA
	98,  // 47: msg.CHALLENGE_STATUS_RES.statusList:type_name -> msg.CHALLENGE_STATUS
	2,   // 48: msg.CHALLENGE_STATUS.battleType:type_name -> msg.BattleType
	99,  // 49: msg.CHALLENGE_STATUS.randDetail:type_name -> msg.RAND_DETAIL
	90,  // 50: msg.RAND_DETAIL.randLineup:type_name -> msg.BATTLE_LINEUP
	78,  // 51: msg.CHALLENGE_RAND_REWARD_RES.reward:type_name -> msg.DROP_DATA
	2,   // 52: msg.CHALLENGE_UNLOCK_REWARD_REQ.battleType:type_name -> msg.BattleType
	2,   // 53: msg.CHALLENGE_UNLOCK_REWARD_RES.battleType:type_name -> msg.BattleType
	78,  // 54: msg.CHALLENGE_UNLOCK_REWARD_RES.reward:type_name -> msg.DROP_DATA
	2,   // 55: msg.CHALLENGE_ADMISSION_REQ.battleType:type_name -> msg.BattleType
	2,   // 56: msg.CHALLENGE_ADMISSION_RES.battleType:type_name -> msg.BattleType
	3,   // 57: msg.RANK_NORMAL_LIST_REQ.type:type_name -> msg.RANKING_TYPE
	3,   // 58: msg.RANK_NORMAL_LIST_RES.type:type_name -> msg.RANKING_TYPE
	93,  // 59: msg.RANK_NORMAL_LIST_RES.playerList:type_name -> msg.MATCH_PLAYER
	3,   // 60: msg.RANK_COOPERATION_LIST_REQ.type:type_name -> msg.RANKING_TYPE
	3,   // 61: msg.RANK_COOPERATION_LIST_RES.type:type_name -> msg.RANKING_TYPE
	114, // 62: msg.RANK_COOPERATION_LIST_RES.playerList:type_name -> msg.RANK_COOPERATION_PLAYER_DATA
	93,  // 63: msg.RANK_COOPERATION_PLAYER_DATA.players:type_name -> msg.MATCH_PLAYER
	119, // 64: msg.FRIEND_LIST_RSP.friendData:type_name -> msg.FRIEND_LIST_DATA
	119, // 65: msg.FRIEND_FIND_RSP.friendData:type_name -> msg.FRIEND_LIST_DATA
	90,  // 66: msg.FRIEND_BATTLE_REQ.lineup:type_name -> msg.BATTLE_LINEUP
	119, // 67: msg.FRIEND_BATTLE_RSP.data:type_name -> msg.FRIEND_LIST_DATA
	90,  // 68: msg.FRIEND_BATTLE_AGREE_REQ.lineup:type_name -> msg.BATTLE_LINEUP
	143, // 69: msg.FRAME_SYNC_REQ.data:type_name -> msg.FRAME_SYNC_DATA
	143, // 70: msg.FRAME_SYNC_RES.data:type_name -> msg.FRAME_SYNC_DATA
	143, // 71: msg.FRAME_SYNC_UPDATE.data:type_name -> msg.FRAME_SYNC_DATA
	144, // 72: msg.FRAME_SYNC_DATA.gameData:type_name -> msg.FRAME_SYNC_GAME_DATA
	147, // 73: msg.FRAME_SYNC_GAME_DATA.heroLineupList:type_name -> msg.INSIDE_LINEUP
	148, // 74: msg.FRAME_SYNC_GAME_DATA.heroComposeList:type_name -> msg.HERO_COMPOSE
	143, // 75: msg.FRAME_SYNC_DATA_SYNC_RES.data:type_name -> msg.FRAME_SYNC_DATA
	76,  // [76:76] is the sub-list for method output_type
	76,  // [76:76] is the sub-list for method input_type
	76,  // [76:76] is the sub-list for extension type_name
	76,  // [76:76] is the sub-list for extension extendee
	0,   // [0:76] is the sub-list for field type_name
}

func init() { file_msg_proto_init() }
func file_msg_proto_init() {
	if File_msg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MESSAGE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MESSAGE_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GM_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LOGIN_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LOGIN_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDCARD_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDCARD_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RE_CONNECT_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RE_CONNECT_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PLAYER_DATA_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PLAYER_DATA_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_PLAYER_NAME_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_PLAYER_NAME_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_PLAYER_TITLE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_PLAYER_TITLE_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_PLAYER_IMAGE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_PLAYER_IMAGE_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_PLAYER_IMAGE_FRAME_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_PLAYER_IMAGE_FRAME_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HERO_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HERO_LIST); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HERO_LIST_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HERO_LIST_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_HERO_LEVEL_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_HERO_LEVEL_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_HERO_SKINID_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_HERO_SKINID_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HERO_INFO_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HERO_INFO_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LINEUP_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LINEUP_LIST_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LINEUP_LIST_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_LINEUP_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_LINEUP_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_LINEUP_NAME_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_LINEUP_NAME_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SHOP_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SHOP_BOX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BOX_ROLE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SHOP_HERO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SHOP_LIST_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SHOP_LIST_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SHOP_RESET_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SHOP_BUY_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SHOP_BUY_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SHOP_CARD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_MONEY_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PROP_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TASK_LIST_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TASK_LIST_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TASK_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TASK_BOX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FINISH_TASK_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FINISH_TASK_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPDATE_TASK_STATUS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TASK_TEST_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TASK_TEST_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CARD_SCORE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CARD_SCORE_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CARD_GET_REWARD_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CARD_GET_REWARD_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CARD_TEST_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CARD_TEST_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CARD_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAIL_LIST_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAIL_LIST_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAIL_READ_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAIL_READ_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAIL_RECEIVE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAIL_RECEIVE_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAIL_UPDATE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAIL_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAIL_REWARD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MAIL_PROP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DROP_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*COOPERATION_CHEST_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*COOPERATION_CHEST_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*COOPERATION_KEY_TEST_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*COOPERATION_KEY_TEST_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BATTLE_MATCH_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BATTLE_MATCH_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BATTLE_MATCH_CANCEL_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BATTLE_MATCH_CANCEL_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BATTLE_SETTLE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BATTLE_SETTLE_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BATTLE_PLAYER_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BATTLE_LINEUP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BATTLE_CHALLENGE_MATCH_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BATTLE_CHALLENGE_MATCH_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MATCH_PLAYER); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BATTLE_CHALLENGE_SETTLE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BATTLE_CHALLENGE_SETTLE_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHALLENGE_STATUS_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHALLENGE_STATUS_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHALLENGE_STATUS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RAND_DETAIL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHALLENGE_RAND_REWARD_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHALLENGE_RAND_REWARD_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHALLENGE_UNLOCK_REWARD_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHALLENGE_UNLOCK_REWARD_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHALLENGE_ADMISSION_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHALLENGE_ADMISSION_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHALLENGE_RAND_HERO_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHALLENGE_RAND_HERO_SELECT_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHALLENGE_RAND_HERO_REFRESH_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHALLENGE_RAND_HERO_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RANK_NORMAL_LIST_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RANK_NORMAL_LIST_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RANK_COOPERATION_LIST_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RANK_COOPERATION_LIST_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RANK_COOPERATION_PLAYER_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHAT_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHAT_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHAT_RECORD_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CHAT_RECORD_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_LIST_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_LIST_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_LIST_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_FIND_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_FIND_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_ADD_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_BLACK_LIST_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_AGREE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_ALL_AGREE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_REFUSE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_ALL_REFUSE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_DELETE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_LIST_UPDATE_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_BATTLE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_BATTLE_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_BATTLE_AGREE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_BATTLE_AGREE_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_BATTLE_CANCEL_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRIEND_BATTLE_CANCEL_RSP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRAME_SYNC_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRAME_SYNC_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRAME_SYNC_UPDATE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRAME_SYNC_READY_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRAME_SYNC_READY_UPDATE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRAME_SYNC_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRAME_SYNC_GAME_DATA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRAME_SYNC_DATA_SYNC_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FRAME_SYNC_DATA_SYNC_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*INSIDE_LINEUP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HERO_COMPOSE); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NOTICE_REQ); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NOTICE_RES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   147,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msg_proto_goTypes,
		DependencyIndexes: file_msg_proto_depIdxs,
		EnumInfos:         file_msg_proto_enumTypes,
		MessageInfos:      file_msg_proto_msgTypes,
	}.Build()
	File_msg_proto = out.File
	file_msg_proto_rawDesc = nil
	file_msg_proto_goTypes = nil
	file_msg_proto_depIdxs = nil
}
