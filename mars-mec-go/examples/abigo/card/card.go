// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package card

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CardMetaData contains all meta data concerning the Card contract.
var CardMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"MintMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"camp_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rarity_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxAmount_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cardURI_\",\"type\":\"string\"}],\"name\":\"NewCard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receivedAddress_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"PullNFTs\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"SetBlindBox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"SetMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"SetSuperMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blindBox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds_\",\"type\":\"uint256[]\"}],\"name\":\"burnMulti\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardIdMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cardInfoes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"camp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarity\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cardURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getTokenIDsByAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blindBox_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mintMulti\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"camp_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cardURI_\",\"type\":\"string\"}],\"name\":\"newCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receivedAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin_\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"blindBox_\",\"type\":\"address\"}],\"name\":\"setBlindBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setMyBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSuperMinter_\",\"type\":\"address\"}],\"name\":\"setSuperMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cardId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"camp_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rarity_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cardURI_\",\"type\":\"string\"}],\"name\":\"updateCard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600481526020016310d85c9960e21b8152506040518060400160405280600481526020016310d0549160e21b815250816000908051906020019062000064929190620000b2565b5080516200007a906001906020840190620000b2565b50620000869150503390565b600b60026101000a8154816001600160a01b0302191690836001600160a01b0316021790555062000194565b828054620000c09062000158565b90600052602060002090601f016020900481019282620000e457600085556200012f565b82601f10620000ff57805160ff19168380011785556200012f565b828001600101855582156200012f579182015b828111156200012f57825182559160200191906001019062000112565b506200013d92915062000141565b5090565b5b808211156200013d576000815560010162000142565b600181811c908216806200016d57607f821691505b6020821081036200018e57634e487b7160e01b600052602260045260246000fd5b50919050565b6131ac80620001a46000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80636a4aeeb811610130578063b41d74d8116100b8578063e985e9c51161007c578063e985e9c5146104dc578063f399e22e14610518578063f9b3dd081461052b578063fbfe5e0d1461053e578063ff1b636d1461056457600080fd5b8063b41d74d81461047d578063b88d4fde14610490578063bb2fa28c146104a3578063c87b56dd146104b6578063ce954370146104c957600080fd5b80639239eb27116100ff5780639239eb271461041c57806395d89b411461043c578063995e5e7814610444578063a0712d6814610457578063a22cb4651461046a57600080fd5b80636a4aeeb8146103b8578063704b6c02146103cb57806370a08231146103de57806378746d0d146103f157600080fd5b8063372a3b82116101b35780635258495711610182578063525849571461034c5780635dcce2341461036c5780635f7c85431461037f57806362e42cb0146103925780636352211e146103a557600080fd5b8063372a3b821461030b57806342842e0e1461031357806342966c68146103265780634f6ccce71461033957600080fd5b806309ab0442116101fa57806309ab0442146102a957806317c0825e146102bc57806318160ddd146102dd57806323b872dd146102e55780632f745c59146102f857600080fd5b806301ffc9a71461022c57806306fdde0314610254578063081812fc14610269578063095ea7b314610294575b600080fd5b61023f61023a366004612914565b61057d565b60405190151581526020015b60405180910390f35b61025c6105de565b60405161024b9190612989565b61027c61027736600461299c565b610670565b6040516001600160a01b03909116815260200161024b565b6102a76102a23660046129d1565b61070a565b005b61023f6102b73660046129fb565b61081f565b6102cf6102ca366004612a70565b6108d2565b60405190815260200161024b565b6008546102cf565b6102a76102f3366004612a92565b610b02565b6102cf6103063660046129d1565b610b32565b61025c610bc8565b6102a7610321366004612a92565b610c56565b61023f61033436600461299c565b610c71565b6102cf61034736600461299c565b610ce5565b61035f61035a366004612ace565b610d78565b60405161024b9190612ae9565b6102a761037a366004612bd9565b610e3d565b6102a761038d366004612ace565b610e8d565b600d5461027c906001600160a01b031681565b61027c6103b336600461299c565b610f80565b60145461027c906001600160a01b031681565b6102a76103d9366004612ace565b610ff7565b6102cf6103ec366004612ace565b6110ae565b6102cf6103ff3660046129d1565b600c60209081526000928352604080842090915290825290205481565b6102cf61042a36600461299c565b60126020526000908152604090205481565b61025c611135565b6102a7610452366004612c0e565b611144565b6102cf61046536600461299c565b611267565b6102a7610478366004612c97565b61141e565b6102a761048b366004612ace565b611429565b6102a761049e366004612cd3565b6114d6565b6102a76104b1366004612d4f565b61150d565b61025c6104c436600461299c565b611660565b6102a76104d7366004612c0e565b6117ce565b61023f6104ea366004612d82565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6102a7610526366004612db5565b61191b565b6102a7610539366004612a92565b611a2b565b61055161054c36600461299c565b611c52565b60405161024b9796959493929190612e03565b600b5461027c906201000090046001600160a01b031681565b60006001600160e01b031982166380ac58cd60e01b14806105ae57506001600160e01b0319821663780e9d6360e01b145b806105c957506001600160e01b03198216635b5e139f60e01b145b806105d857506105d882611d9f565b92915050565b6060600080546105ed90612e54565b80601f016020809104026020016040519081016040528092919081815260200182805461061990612e54565b80156106665780601f1061063b57610100808354040283529160200191610666565b820191906000526020600020905b81548152906001019060200180831161064957829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106ee5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061071582610f80565b9050806001600160a01b0316836001600160a01b0316036107825760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106e5565b336001600160a01b038216148061079e575061079e81336104ea565b6108105760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106e5565b61081a8383611dc4565b505050565b6000805b828110156108c857600084848381811061083f5761083f612e8e565b9050602002013590506108586108523390565b82611e32565b6108745760405162461bcd60e51b81526004016106e590612ea4565b60008181526012602052604081205561088c81611f25565b60405181907fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb90600090a2506108c181612f07565b9050610823565b5060019392505050565b600080821161091c5760405162461bcd60e51b8152602060048201526016602482015275115490cdcc8c4e881b5a5cdcda5b99c8185b5bdd5b9d60521b60448201526064016106e5565b821580159061093857506000838152600f602052604090205415155b6109545760405162461bcd60e51b81526004016106e590612f20565b600d546001600160a01b03163314610a0057336000908152600c602090815260408083208684529091529020548211156109d05760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a206e6f74206d696e74657227732063616c6c696e670000000060448201526064016106e5565b336000908152600c60209081526040808320868452909152812080548492906109fa908490612f4e565b90915550505b6000838152600f6020526040902060048101546005909101548391610a259190611f31565b1015610a435760405162461bcd60e51b81526004016106e590612f65565b6000838152600f602052604081206004018054849290610a64908490612fa9565b9091555060009050805b83811015610ac157610a84600e80546001019055565b600e546000818152601260205260409020869055601454909250610ab1906001600160a01b031683611f44565b610aba81612f07565b9050610a6e565b5060408051858152602081018590527f20b9ec4cf5d5efbd4a139af041f94cea204bba8485660cff6a37cc30735a5fe9910160405180910390a19392505050565b610b0b33610852565b610b275760405162461bcd60e51b81526004016106e590612fc1565b61081a838383612092565b6000610b3d836110ae565b8210610b9f5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016106e5565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b60138054610bd590612e54565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0190612e54565b8015610c4e5780601f10610c2357610100808354040283529160200191610c4e565b820191906000526020600020905b815481529060010190602001808311610c3157829003601f168201915b505050505081565b61081a838383604051806020016040528060008152506114d6565b6000610c7e335b83611e32565b610c9a5760405162461bcd60e51b81526004016106e590612ea4565b600082815260126020526040812055610cb282611f25565b60405182907fb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb90600090a2506001919050565b6000610cf060085490565b8210610d535760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016106e5565b60088281548110610d6657610d66612e8e565b90600052602060002001549050919050565b60606001600160a01b038216610d8d57600080fd5b6000610d98836110ae565b905060008167ffffffffffffffff811115610db557610db5612b2d565b604051908082528060200260200182016040528015610dde578160200160208202803683370190505b50905060005b82811015610e3557610e06856001610dfc8487612f4e565b6103069190612f4e565b828281518110610e1857610e18612e8e565b602090810291909101015280610e2d81612f07565b915050610de4565b509392505050565b600b546201000090046001600160a01b0316336001600160a01b031614610e765760405162461bcd60e51b81526004016106e590613012565b8051610e8990601390602084019061282f565b5050565b600b546201000090046001600160a01b0316336001600160a01b031614610ec65760405162461bcd60e51b81526004016106e590613012565b6001600160a01b038116610f2b5760405162461bcd60e51b815260206004820152602660248201527f5468652061646472657373206f6620426c696e6420426f7820746f6b656e20696044820152651cc81b9d5b1b60d21b60648201526084016106e5565b601480546001600160a01b0319166001600160a01b0383169081179091556040519081527fc2d6e5aa65a6a82749a98248a03c62d85dceda00a7bdd681867e8783cf0f8362906020015b60405180910390a150565b6000818152600260205260408120546001600160a01b0316806105d85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106e5565b600b546201000090046001600160a01b0316336001600160a01b0316146110305760405162461bcd60e51b81526004016106e590613012565b6001600160a01b0381166110565760405162461bcd60e51b81526004016106e59061303f565b600b805462010000600160b01b031916620100006001600160a01b038416908102919091179091556040519081527f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a190602001610f75565b60006001600160a01b0382166111195760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106e5565b506001600160a01b031660009081526003602052604090205490565b6060600180546105ed90612e54565b600b546201000090046001600160a01b0316336001600160a01b03161461117d5760405162461bcd60e51b81526004016106e590613012565b841580159061119857506000858152600f6020526040902054155b6111b45760405162461bcd60e51b81526004016106e590612f20565b6111bf601086612239565b506040805160e0810182528681526020808201878152828401878152606084018b815260006080860181905260a0860189905260c086018890528b8152600f85529590952084518155915160018301555160028201559251805192939261122c926003850192019061282f565b506080820151600482015560a0820151600582015560c0820151805161125c91600684019160209091019061282f565b505050505050505050565b6000811580159061128557506000828152600f602052604090205415155b6112a15760405162461bcd60e51b81526004016106e590612f20565b600d546001600160a01b0316331461134b57336000908152600c6020908152604080832085845290915290205461131a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a206e6f74206d696e74657227732063616c6c696e670000000060448201526064016106e5565b336000908152600c602090815260408083208584529091528120805460019290611345908490612f4e565b90915550505b6000828152600f602052604090206005810154600490910154106113815760405162461bcd60e51b81526004016106e590612f65565b6000828152600f602052604081206004018054600192906113a3908490612fa9565b9091555050600e8054600101905560006113bc600e5490565b90507f07883703ed0e86588a40d76551c92f8a4b329e3bf19765e0e6749473c1a84665836040516113ef91815260200190565b60405180910390a160008181526012602052604090208390556014546105d8906001600160a01b031682611f44565b610e89338383612245565b600b546201000090046001600160a01b0316336001600160a01b0316146114625760405162461bcd60e51b81526004016106e590613012565b6001600160a01b0381166114885760405162461bcd60e51b81526004016106e59061303f565b600d80546001600160a01b0319166001600160a01b0383169081179091556040519081527fd4f3adbf0b736e108a3a5cd8d42edef56c28856b9806e8eda50a0acc1097e9fb90602001610f75565b6114df33610c78565b6114fb5760405162461bcd60e51b81526004016106e590612fc1565b61150784848484612313565b50505050565b600b546201000090046001600160a01b0316336001600160a01b0316146115465760405162461bcd60e51b81526004016106e590613012565b6001600160a01b03831661156c5760405162461bcd60e51b81526004016106e59061303f565b816000036115b25760405162461bcd60e51b8152602060048201526013602482015272151a194818d85c99125917c81a5cc81b9d5b1b606a1b60448201526064016106e5565b806000036115f85760405162461bcd60e51b8152602060048201526013602482015272151a1948185b5bdd5b9d17c81a5cc81b9d5b1b606a1b60448201526064016106e5565b6001600160a01b0383166000818152600c602090815260408083208684528252918290208490558151928352820184905281018290527f0561e3bc0e85ba2a46eebd611c60cd166c9080d8b53ba0ce668aad6c54df6ec59060600160405180910390a1505050565b6000818152600260205260409020546060906001600160a01b03166116df5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106e5565b6000828152601260209081526040808320548352600f9091528120600601805461170890612e54565b80601f016020809104026020016040519081016040528092919081815260200182805461173490612e54565b80156117815780601f1061175657610100808354040283529160200191611781565b820191906000526020600020905b81548152906001019060200180831161176457829003601f168201915b505050505090506000611792612346565b905060008151116117a357816117c6565b80826040516020016117b692919061306c565b6040516020818303038152906040525b949350505050565b600b546201000090046001600160a01b0316336001600160a01b0316146118075760405162461bcd60e51b81526004016106e590613012565b841580159061182357506000858152600f602052604090205415155b61183f5760405162461bcd60e51b81526004016106e590612f20565b6000858152600f602052604090206004015482116118b25760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a206d6178416d6f756e74206c657373207468616e2063757272604482015269195b9d08185b5bdd5b9d60b21b60648201526084016106e5565b6000858152600f6020908152604090912087516118d79260039092019189019061282f565b506000858152600f6020908152604090912060018101869055600281018590556005810184905582516119129260069092019184019061282f565b50505050505050565b600b546201000090046001600160a01b0316336001600160a01b0316146119545760405162461bcd60e51b81526004016106e590613012565b600b54610100900460ff1661196f57600b5460ff1615611973565b303b155b6119d65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106e5565b600b54610100900460ff161580156119f857600b805461ffff19166101011790555b611a0183610e8d565b8151611a1490601390602085019061282f565b50801561081a57600b805461ff0019169055505050565b600b546201000090046001600160a01b0316336001600160a01b031614611a645760405162461bcd60e51b81526004016106e590613012565b6001600160a01b038216611a7757600080fd5b6001600160a01b038316611a8a57600080fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611ad1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af5919061309b565b905081811015611b03578091505b60005b82811015611c0057604051632f745c5960e01b8152306004820152600060248201819052906001600160a01b03871690632f745c5990604401602060405180830381865afa158015611b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b80919061309b565b604051632142170760e11b81523060048201526001600160a01b03878116602483015260448201839052919250908716906342842e0e90606401600060405180830381600087803b158015611bd457600080fd5b505af1158015611be8573d6000803e3d6000fd5b50505050508080611bf890612f07565b915050611b06565b50604080516001600160a01b038087168252851660208201529081018390527f4353fd48ccf9fce9a5e548dea48c94142c8ca07352c78a006e0aca2ac650dc129060600160405180910390a150505050565b600f60205260009081526040902080546001820154600283015460038401805493949293919291611c8290612e54565b80601f0160208091040260200160405190810160405280929190818152602001828054611cae90612e54565b8015611cfb5780601f10611cd057610100808354040283529160200191611cfb565b820191906000526020600020905b815481529060010190602001808311611cde57829003601f168201915b505050505090806004015490806005015490806006018054611d1c90612e54565b80601f0160208091040260200160405190810160405280929190818152602001828054611d4890612e54565b8015611d955780601f10611d6a57610100808354040283529160200191611d95565b820191906000526020600020905b815481529060010190602001808311611d7857829003601f168201915b5050505050905087565b60006001600160e01b0319821663780e9d6360e01b14806105d857506105d882612355565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611df982610f80565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316611eab5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106e5565b6000611eb683610f80565b9050806001600160a01b0316846001600160a01b03161480611ef15750836001600160a01b0316611ee684610670565b6001600160a01b0316145b806117c657506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff166117c6565b611f2e816123a5565b50565b6000611f3d8284612f4e565b9392505050565b6001600160a01b038216611f9a5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106e5565b6000818152600260205260409020546001600160a01b031615611fff5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106e5565b61200b600083836123e5565b6001600160a01b0382166000908152600360205260408120805460019290612034908490612fa9565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b826001600160a01b03166120a582610f80565b6001600160a01b0316146121095760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016106e5565b6001600160a01b03821661216b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106e5565b6121768383836123e5565b612181600082611dc4565b6001600160a01b03831660009081526003602052604081208054600192906121aa908490612f4e565b90915550506001600160a01b03821660009081526003602052604081208054600192906121d8908490612fa9565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000611f3d83836123f0565b816001600160a01b0316836001600160a01b0316036122a65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106e5565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61231e848484612092565b61232a8484848461243f565b6115075760405162461bcd60e51b81526004016106e5906130b4565b6060601380546105ed90612e54565b60006001600160e01b031982166380ac58cd60e01b148061238657506001600160e01b03198216635b5e139f60e01b145b806105d857506301ffc9a760e01b6001600160e01b03198316146105d8565b6123ae81612540565b6000818152600a6020526040902080546123c790612e54565b159050611f2e576000818152600a60205260408120611f2e916128b3565b61081a8383836125e7565b6000818152600183016020526040812054612437575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105d8565b5060006105d8565b60006001600160a01b0384163b1561253557604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612483903390899088908890600401613106565b6020604051808303816000875af19250505080156124be575060408051601f3d908101601f191682019092526124bb91810190613143565b60015b61251b573d8080156124ec576040519150601f19603f3d011682016040523d82523d6000602084013e6124f1565b606091505b5080516000036125135760405162461bcd60e51b81526004016106e5906130b4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506117c6565b506001949350505050565b600061254b82610f80565b9050612559816000846123e5565b612564600083611dc4565b6001600160a01b038116600090815260036020526040812080546001929061258d908490612f4e565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b0383166126425761263d81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612665565b816001600160a01b0316836001600160a01b03161461266557612665838261269f565b6001600160a01b03821661267c5761081a8161273c565b826001600160a01b0316826001600160a01b03161461081a5761081a82826127eb565b600060016126ac846110ae565b6126b69190612f4e565b600083815260076020526040902054909150808214612709576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061274e90600190612f4e565b6000838152600960205260408120546008805493945090928490811061277657612776612e8e565b90600052602060002001549050806008838154811061279757612797612e8e565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806127cf576127cf613160565b6001900381819060005260206000200160009055905550505050565b60006127f6836110ae565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b82805461283b90612e54565b90600052602060002090601f01602090048101928261285d57600085556128a3565b82601f1061287657805160ff19168380011785556128a3565b828001600101855582156128a3579182015b828111156128a3578251825591602001919060010190612888565b506128af9291506128e9565b5090565b5080546128bf90612e54565b6000825580601f106128cf575050565b601f016020900490600052602060002090810190611f2e91905b5b808211156128af57600081556001016128ea565b6001600160e01b031981168114611f2e57600080fd5b60006020828403121561292657600080fd5b8135611f3d816128fe565b60005b8381101561294c578181015183820152602001612934565b838111156115075750506000910152565b60008151808452612975816020860160208601612931565b601f01601f19169290920160200192915050565b602081526000611f3d602083018461295d565b6000602082840312156129ae57600080fd5b5035919050565b80356001600160a01b03811681146129cc57600080fd5b919050565b600080604083850312156129e457600080fd5b6129ed836129b5565b946020939093013593505050565b60008060208385031215612a0e57600080fd5b823567ffffffffffffffff80821115612a2657600080fd5b818501915085601f830112612a3a57600080fd5b813581811115612a4957600080fd5b8660208260051b8501011115612a5e57600080fd5b60209290920196919550909350505050565b60008060408385031215612a8357600080fd5b50508035926020909101359150565b600080600060608486031215612aa757600080fd5b612ab0846129b5565b9250612abe602085016129b5565b9150604084013590509250925092565b600060208284031215612ae057600080fd5b611f3d826129b5565b6020808252825182820181905260009190848201906040850190845b81811015612b2157835183529284019291840191600101612b05565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115612b5e57612b5e612b2d565b604051601f8501601f19908116603f01168101908282118183101715612b8657612b86612b2d565b81604052809350858152868686011115612b9f57600080fd5b858560208301376000602087830101525050509392505050565b600082601f830112612bca57600080fd5b611f3d83833560208501612b43565b600060208284031215612beb57600080fd5b813567ffffffffffffffff811115612c0257600080fd5b6117c684828501612bb9565b60008060008060008060c08789031215612c2757600080fd5b863567ffffffffffffffff80821115612c3f57600080fd5b612c4b8a838b01612bb9565b97506020890135965060408901359550606089013594506080890135935060a0890135915080821115612c7d57600080fd5b50612c8a89828a01612bb9565b9150509295509295509295565b60008060408385031215612caa57600080fd5b612cb3836129b5565b915060208301358015158114612cc857600080fd5b809150509250929050565b60008060008060808587031215612ce957600080fd5b612cf2856129b5565b9350612d00602086016129b5565b925060408501359150606085013567ffffffffffffffff811115612d2357600080fd5b8501601f81018713612d3457600080fd5b612d4387823560208401612b43565b91505092959194509250565b600080600060608486031215612d6457600080fd5b612d6d846129b5565b95602085013595506040909401359392505050565b60008060408385031215612d9557600080fd5b612d9e836129b5565b9150612dac602084016129b5565b90509250929050565b60008060408385031215612dc857600080fd5b612dd1836129b5565b9150602083013567ffffffffffffffff811115612ded57600080fd5b612df985828601612bb9565b9150509250929050565b87815286602082015285604082015260e060608201526000612e2860e083018761295d565b8560808401528460a084015282810360c0840152612e46818561295d565b9a9950505050505050505050565b600181811c90821680612e6857607f821691505b602082108103612e8857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6020808252602d908201527f4552433732313a206275726e2063616c6c6572206973206e6f74206f776e657260408201526c081b9bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600060018201612f1957612f19612ef1565b5060010190565b602080825260149082015273115490cdcc8c4e881ddc9bdb99c818d85c99125960621b604082015260600190565b600082821015612f6057612f60612ef1565b500390565b60208082526024908201527f4552433732313a20546f6b656e20616d6f756e74206973206f7574206f66206c6040820152631a5b5a5d60e21b606082015260800190565b60008219821115612fbc57612fbc612ef1565b500190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601390820152726e6f742041646d696e27732063616c6c696e6760681b604082015260600190565b602080825260139082015272151a19481859191c995cdcc81a5cc81b9d5b1b606a1b604082015260600190565b6000835161307e818460208801612931565b835190830190613092818360208801612931565b01949350505050565b6000602082840312156130ad57600080fd5b5051919050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906131399083018461295d565b9695505050505050565b60006020828403121561315557600080fd5b8151611f3d816128fe565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220e6e39cbfb8e6431192c41a6a934241970327869d95fcea142dbef8fa655a446d64736f6c634300080d0033",
}

// CardABI is the input ABI used to generate the binding from.
// Deprecated: Use CardMetaData.ABI instead.
var CardABI = CardMetaData.ABI

// CardBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CardMetaData.Bin instead.
var CardBin = CardMetaData.Bin

// DeployCard deploys a new Ethereum contract, binding an instance of Card to it.
func DeployCard(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Card, error) {
	parsed, err := CardMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CardBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Card{CardCaller: CardCaller{contract: contract}, CardTransactor: CardTransactor{contract: contract}, CardFilterer: CardFilterer{contract: contract}}, nil
}

// Card is an auto generated Go binding around an Ethereum contract.
type Card struct {
	CardCaller     // Read-only binding to the contract
	CardTransactor // Write-only binding to the contract
	CardFilterer   // Log filterer for contract events
}

// CardCaller is an auto generated read-only Go binding around an Ethereum contract.
type CardCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CardTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CardTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CardFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CardFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CardSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CardSession struct {
	Contract     *Card             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CardCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CardCallerSession struct {
	Contract *CardCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// CardTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CardTransactorSession struct {
	Contract     *CardTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CardRaw is an auto generated low-level Go binding around an Ethereum contract.
type CardRaw struct {
	Contract *Card // Generic contract binding to access the raw methods on
}

// CardCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CardCallerRaw struct {
	Contract *CardCaller // Generic read-only contract binding to access the raw methods on
}

// CardTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CardTransactorRaw struct {
	Contract *CardTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCard creates a new instance of Card, bound to a specific deployed contract.
func NewCard(address common.Address, backend bind.ContractBackend) (*Card, error) {
	contract, err := bindCard(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Card{CardCaller: CardCaller{contract: contract}, CardTransactor: CardTransactor{contract: contract}, CardFilterer: CardFilterer{contract: contract}}, nil
}

// NewCardCaller creates a new read-only instance of Card, bound to a specific deployed contract.
func NewCardCaller(address common.Address, caller bind.ContractCaller) (*CardCaller, error) {
	contract, err := bindCard(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CardCaller{contract: contract}, nil
}

// NewCardTransactor creates a new write-only instance of Card, bound to a specific deployed contract.
func NewCardTransactor(address common.Address, transactor bind.ContractTransactor) (*CardTransactor, error) {
	contract, err := bindCard(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CardTransactor{contract: contract}, nil
}

// NewCardFilterer creates a new log filterer instance of Card, bound to a specific deployed contract.
func NewCardFilterer(address common.Address, filterer bind.ContractFilterer) (*CardFilterer, error) {
	contract, err := bindCard(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CardFilterer{contract: contract}, nil
}

// bindCard binds a generic wrapper to an already deployed contract.
func bindCard(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CardABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Card *CardRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Card.Contract.CardCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Card *CardRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Card.Contract.CardTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Card *CardRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Card.Contract.CardTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Card *CardCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Card.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Card *CardTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Card.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Card *CardTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Card.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0xff1b636d.
//
// Solidity: function Admin() view returns(address)
func (_Card *CardCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "Admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xff1b636d.
//
// Solidity: function Admin() view returns(address)
func (_Card *CardSession) Admin() (common.Address, error) {
	return _Card.Contract.Admin(&_Card.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xff1b636d.
//
// Solidity: function Admin() view returns(address)
func (_Card *CardCallerSession) Admin() (common.Address, error) {
	return _Card.Contract.Admin(&_Card.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Card *CardCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Card *CardSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Card.Contract.BalanceOf(&_Card.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_Card *CardCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _Card.Contract.BalanceOf(&_Card.CallOpts, owner)
}

// BlindBox is a free data retrieval call binding the contract method 0x6a4aeeb8.
//
// Solidity: function blindBox() view returns(address)
func (_Card *CardCaller) BlindBox(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "blindBox")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlindBox is a free data retrieval call binding the contract method 0x6a4aeeb8.
//
// Solidity: function blindBox() view returns(address)
func (_Card *CardSession) BlindBox() (common.Address, error) {
	return _Card.Contract.BlindBox(&_Card.CallOpts)
}

// BlindBox is a free data retrieval call binding the contract method 0x6a4aeeb8.
//
// Solidity: function blindBox() view returns(address)
func (_Card *CardCallerSession) BlindBox() (common.Address, error) {
	return _Card.Contract.BlindBox(&_Card.CallOpts)
}

// CardIdMap is a free data retrieval call binding the contract method 0x9239eb27.
//
// Solidity: function cardIdMap(uint256 ) view returns(uint256)
func (_Card *CardCaller) CardIdMap(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "cardIdMap", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CardIdMap is a free data retrieval call binding the contract method 0x9239eb27.
//
// Solidity: function cardIdMap(uint256 ) view returns(uint256)
func (_Card *CardSession) CardIdMap(arg0 *big.Int) (*big.Int, error) {
	return _Card.Contract.CardIdMap(&_Card.CallOpts, arg0)
}

// CardIdMap is a free data retrieval call binding the contract method 0x9239eb27.
//
// Solidity: function cardIdMap(uint256 ) view returns(uint256)
func (_Card *CardCallerSession) CardIdMap(arg0 *big.Int) (*big.Int, error) {
	return _Card.Contract.CardIdMap(&_Card.CallOpts, arg0)
}

// CardInfoes is a free data retrieval call binding the contract method 0xfbfe5e0d.
//
// Solidity: function cardInfoes(uint256 ) view returns(uint256 cardId, uint256 camp, uint256 rarity, string name, uint256 currentAmount, uint256 maxAmount, string cardURI)
func (_Card *CardCaller) CardInfoes(opts *bind.CallOpts, arg0 *big.Int) (struct {
	CardId        *big.Int
	Camp          *big.Int
	Rarity        *big.Int
	Name          string
	CurrentAmount *big.Int
	MaxAmount     *big.Int
	CardURI       string
}, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "cardInfoes", arg0)

	outstruct := new(struct {
		CardId        *big.Int
		Camp          *big.Int
		Rarity        *big.Int
		Name          string
		CurrentAmount *big.Int
		MaxAmount     *big.Int
		CardURI       string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CardId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Camp = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Rarity = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Name = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.CurrentAmount = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.MaxAmount = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)
	outstruct.CardURI = *abi.ConvertType(out[6], new(string)).(*string)

	return *outstruct, err

}

// CardInfoes is a free data retrieval call binding the contract method 0xfbfe5e0d.
//
// Solidity: function cardInfoes(uint256 ) view returns(uint256 cardId, uint256 camp, uint256 rarity, string name, uint256 currentAmount, uint256 maxAmount, string cardURI)
func (_Card *CardSession) CardInfoes(arg0 *big.Int) (struct {
	CardId        *big.Int
	Camp          *big.Int
	Rarity        *big.Int
	Name          string
	CurrentAmount *big.Int
	MaxAmount     *big.Int
	CardURI       string
}, error) {
	return _Card.Contract.CardInfoes(&_Card.CallOpts, arg0)
}

// CardInfoes is a free data retrieval call binding the contract method 0xfbfe5e0d.
//
// Solidity: function cardInfoes(uint256 ) view returns(uint256 cardId, uint256 camp, uint256 rarity, string name, uint256 currentAmount, uint256 maxAmount, string cardURI)
func (_Card *CardCallerSession) CardInfoes(arg0 *big.Int) (struct {
	CardId        *big.Int
	Camp          *big.Int
	Rarity        *big.Int
	Name          string
	CurrentAmount *big.Int
	MaxAmount     *big.Int
	CardURI       string
}, error) {
	return _Card.Contract.CardInfoes(&_Card.CallOpts, arg0)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Card *CardCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Card *CardSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Card.Contract.GetApproved(&_Card.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_Card *CardCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _Card.Contract.GetApproved(&_Card.CallOpts, tokenId)
}

// GetTokenIDsByAddress is a free data retrieval call binding the contract method 0x52584957.
//
// Solidity: function getTokenIDsByAddress(address who) view returns(uint256[])
func (_Card *CardCaller) GetTokenIDsByAddress(opts *bind.CallOpts, who common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "getTokenIDsByAddress", who)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetTokenIDsByAddress is a free data retrieval call binding the contract method 0x52584957.
//
// Solidity: function getTokenIDsByAddress(address who) view returns(uint256[])
func (_Card *CardSession) GetTokenIDsByAddress(who common.Address) ([]*big.Int, error) {
	return _Card.Contract.GetTokenIDsByAddress(&_Card.CallOpts, who)
}

// GetTokenIDsByAddress is a free data retrieval call binding the contract method 0x52584957.
//
// Solidity: function getTokenIDsByAddress(address who) view returns(uint256[])
func (_Card *CardCallerSession) GetTokenIDsByAddress(who common.Address) ([]*big.Int, error) {
	return _Card.Contract.GetTokenIDsByAddress(&_Card.CallOpts, who)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Card *CardCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Card *CardSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Card.Contract.IsApprovedForAll(&_Card.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_Card *CardCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _Card.Contract.IsApprovedForAll(&_Card.CallOpts, owner, operator)
}

// Minters is a free data retrieval call binding the contract method 0x78746d0d.
//
// Solidity: function minters(address , uint256 ) view returns(uint256)
func (_Card *CardCaller) Minters(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "minters", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Minters is a free data retrieval call binding the contract method 0x78746d0d.
//
// Solidity: function minters(address , uint256 ) view returns(uint256)
func (_Card *CardSession) Minters(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Card.Contract.Minters(&_Card.CallOpts, arg0, arg1)
}

// Minters is a free data retrieval call binding the contract method 0x78746d0d.
//
// Solidity: function minters(address , uint256 ) view returns(uint256)
func (_Card *CardCallerSession) Minters(arg0 common.Address, arg1 *big.Int) (*big.Int, error) {
	return _Card.Contract.Minters(&_Card.CallOpts, arg0, arg1)
}

// MyBaseURI is a free data retrieval call binding the contract method 0x372a3b82.
//
// Solidity: function myBaseURI() view returns(string)
func (_Card *CardCaller) MyBaseURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "myBaseURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MyBaseURI is a free data retrieval call binding the contract method 0x372a3b82.
//
// Solidity: function myBaseURI() view returns(string)
func (_Card *CardSession) MyBaseURI() (string, error) {
	return _Card.Contract.MyBaseURI(&_Card.CallOpts)
}

// MyBaseURI is a free data retrieval call binding the contract method 0x372a3b82.
//
// Solidity: function myBaseURI() view returns(string)
func (_Card *CardCallerSession) MyBaseURI() (string, error) {
	return _Card.Contract.MyBaseURI(&_Card.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Card *CardCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Card *CardSession) Name() (string, error) {
	return _Card.Contract.Name(&_Card.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Card *CardCallerSession) Name() (string, error) {
	return _Card.Contract.Name(&_Card.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Card *CardCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Card *CardSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Card.Contract.OwnerOf(&_Card.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_Card *CardCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _Card.Contract.OwnerOf(&_Card.CallOpts, tokenId)
}

// SuperMinter is a free data retrieval call binding the contract method 0x62e42cb0.
//
// Solidity: function superMinter() view returns(address)
func (_Card *CardCaller) SuperMinter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "superMinter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SuperMinter is a free data retrieval call binding the contract method 0x62e42cb0.
//
// Solidity: function superMinter() view returns(address)
func (_Card *CardSession) SuperMinter() (common.Address, error) {
	return _Card.Contract.SuperMinter(&_Card.CallOpts)
}

// SuperMinter is a free data retrieval call binding the contract method 0x62e42cb0.
//
// Solidity: function superMinter() view returns(address)
func (_Card *CardCallerSession) SuperMinter() (common.Address, error) {
	return _Card.Contract.SuperMinter(&_Card.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Card *CardCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Card *CardSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Card.Contract.SupportsInterface(&_Card.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Card *CardCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Card.Contract.SupportsInterface(&_Card.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Card *CardCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Card *CardSession) Symbol() (string, error) {
	return _Card.Contract.Symbol(&_Card.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Card *CardCallerSession) Symbol() (string, error) {
	return _Card.Contract.Symbol(&_Card.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Card *CardCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Card *CardSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Card.Contract.TokenByIndex(&_Card.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_Card *CardCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _Card.Contract.TokenByIndex(&_Card.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Card *CardCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Card *CardSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Card.Contract.TokenOfOwnerByIndex(&_Card.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_Card *CardCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _Card.Contract.TokenOfOwnerByIndex(&_Card.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId_) view returns(string)
func (_Card *CardCaller) TokenURI(opts *bind.CallOpts, tokenId_ *big.Int) (string, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "tokenURI", tokenId_)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId_) view returns(string)
func (_Card *CardSession) TokenURI(tokenId_ *big.Int) (string, error) {
	return _Card.Contract.TokenURI(&_Card.CallOpts, tokenId_)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId_) view returns(string)
func (_Card *CardCallerSession) TokenURI(tokenId_ *big.Int) (string, error) {
	return _Card.Contract.TokenURI(&_Card.CallOpts, tokenId_)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Card *CardCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Card.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Card *CardSession) TotalSupply() (*big.Int, error) {
	return _Card.Contract.TotalSupply(&_Card.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Card *CardCallerSession) TotalSupply() (*big.Int, error) {
	return _Card.Contract.TotalSupply(&_Card.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Card *CardTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Card *CardSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Card.Contract.Approve(&_Card.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_Card *CardTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Card.Contract.Approve(&_Card.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId_) returns(bool)
func (_Card *CardTransactor) Burn(opts *bind.TransactOpts, tokenId_ *big.Int) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "burn", tokenId_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId_) returns(bool)
func (_Card *CardSession) Burn(tokenId_ *big.Int) (*types.Transaction, error) {
	return _Card.Contract.Burn(&_Card.TransactOpts, tokenId_)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId_) returns(bool)
func (_Card *CardTransactorSession) Burn(tokenId_ *big.Int) (*types.Transaction, error) {
	return _Card.Contract.Burn(&_Card.TransactOpts, tokenId_)
}

// BurnMulti is a paid mutator transaction binding the contract method 0x09ab0442.
//
// Solidity: function burnMulti(uint256[] tokenIds_) returns(bool)
func (_Card *CardTransactor) BurnMulti(opts *bind.TransactOpts, tokenIds_ []*big.Int) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "burnMulti", tokenIds_)
}

// BurnMulti is a paid mutator transaction binding the contract method 0x09ab0442.
//
// Solidity: function burnMulti(uint256[] tokenIds_) returns(bool)
func (_Card *CardSession) BurnMulti(tokenIds_ []*big.Int) (*types.Transaction, error) {
	return _Card.Contract.BurnMulti(&_Card.TransactOpts, tokenIds_)
}

// BurnMulti is a paid mutator transaction binding the contract method 0x09ab0442.
//
// Solidity: function burnMulti(uint256[] tokenIds_) returns(bool)
func (_Card *CardTransactorSession) BurnMulti(tokenIds_ []*big.Int) (*types.Transaction, error) {
	return _Card.Contract.BurnMulti(&_Card.TransactOpts, tokenIds_)
}

// Initialize is a paid mutator transaction binding the contract method 0xf399e22e.
//
// Solidity: function initialize(address blindBox_, string baseTokenURI_) returns()
func (_Card *CardTransactor) Initialize(opts *bind.TransactOpts, blindBox_ common.Address, baseTokenURI_ string) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "initialize", blindBox_, baseTokenURI_)
}

// Initialize is a paid mutator transaction binding the contract method 0xf399e22e.
//
// Solidity: function initialize(address blindBox_, string baseTokenURI_) returns()
func (_Card *CardSession) Initialize(blindBox_ common.Address, baseTokenURI_ string) (*types.Transaction, error) {
	return _Card.Contract.Initialize(&_Card.TransactOpts, blindBox_, baseTokenURI_)
}

// Initialize is a paid mutator transaction binding the contract method 0xf399e22e.
//
// Solidity: function initialize(address blindBox_, string baseTokenURI_) returns()
func (_Card *CardTransactorSession) Initialize(blindBox_ common.Address, baseTokenURI_ string) (*types.Transaction, error) {
	return _Card.Contract.Initialize(&_Card.TransactOpts, blindBox_, baseTokenURI_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 cardId_) returns(uint256)
func (_Card *CardTransactor) Mint(opts *bind.TransactOpts, cardId_ *big.Int) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "mint", cardId_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 cardId_) returns(uint256)
func (_Card *CardSession) Mint(cardId_ *big.Int) (*types.Transaction, error) {
	return _Card.Contract.Mint(&_Card.TransactOpts, cardId_)
}

// Mint is a paid mutator transaction binding the contract method 0xa0712d68.
//
// Solidity: function mint(uint256 cardId_) returns(uint256)
func (_Card *CardTransactorSession) Mint(cardId_ *big.Int) (*types.Transaction, error) {
	return _Card.Contract.Mint(&_Card.TransactOpts, cardId_)
}

// MintMulti is a paid mutator transaction binding the contract method 0x17c0825e.
//
// Solidity: function mintMulti(uint256 cardId_, uint256 amount_) returns(uint256)
func (_Card *CardTransactor) MintMulti(opts *bind.TransactOpts, cardId_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "mintMulti", cardId_, amount_)
}

// MintMulti is a paid mutator transaction binding the contract method 0x17c0825e.
//
// Solidity: function mintMulti(uint256 cardId_, uint256 amount_) returns(uint256)
func (_Card *CardSession) MintMulti(cardId_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _Card.Contract.MintMulti(&_Card.TransactOpts, cardId_, amount_)
}

// MintMulti is a paid mutator transaction binding the contract method 0x17c0825e.
//
// Solidity: function mintMulti(uint256 cardId_, uint256 amount_) returns(uint256)
func (_Card *CardTransactorSession) MintMulti(cardId_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _Card.Contract.MintMulti(&_Card.TransactOpts, cardId_, amount_)
}

// NewCard is a paid mutator transaction binding the contract method 0x995e5e78.
//
// Solidity: function newCard(string name_, uint256 cardId_, uint256 camp_, uint256 rarity_, uint256 maxAmount_, string cardURI_) returns()
func (_Card *CardTransactor) NewCard(opts *bind.TransactOpts, name_ string, cardId_ *big.Int, camp_ *big.Int, rarity_ *big.Int, maxAmount_ *big.Int, cardURI_ string) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "newCard", name_, cardId_, camp_, rarity_, maxAmount_, cardURI_)
}

// NewCard is a paid mutator transaction binding the contract method 0x995e5e78.
//
// Solidity: function newCard(string name_, uint256 cardId_, uint256 camp_, uint256 rarity_, uint256 maxAmount_, string cardURI_) returns()
func (_Card *CardSession) NewCard(name_ string, cardId_ *big.Int, camp_ *big.Int, rarity_ *big.Int, maxAmount_ *big.Int, cardURI_ string) (*types.Transaction, error) {
	return _Card.Contract.NewCard(&_Card.TransactOpts, name_, cardId_, camp_, rarity_, maxAmount_, cardURI_)
}

// NewCard is a paid mutator transaction binding the contract method 0x995e5e78.
//
// Solidity: function newCard(string name_, uint256 cardId_, uint256 camp_, uint256 rarity_, uint256 maxAmount_, string cardURI_) returns()
func (_Card *CardTransactorSession) NewCard(name_ string, cardId_ *big.Int, camp_ *big.Int, rarity_ *big.Int, maxAmount_ *big.Int, cardURI_ string) (*types.Transaction, error) {
	return _Card.Contract.NewCard(&_Card.TransactOpts, name_, cardId_, camp_, rarity_, maxAmount_, cardURI_)
}

// PullNFTs is a paid mutator transaction binding the contract method 0xf9b3dd08.
//
// Solidity: function pullNFTs(address tokenAddress, address receivedAddress, uint256 amount) returns()
func (_Card *CardTransactor) PullNFTs(opts *bind.TransactOpts, tokenAddress common.Address, receivedAddress common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "pullNFTs", tokenAddress, receivedAddress, amount)
}

// PullNFTs is a paid mutator transaction binding the contract method 0xf9b3dd08.
//
// Solidity: function pullNFTs(address tokenAddress, address receivedAddress, uint256 amount) returns()
func (_Card *CardSession) PullNFTs(tokenAddress common.Address, receivedAddress common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Card.Contract.PullNFTs(&_Card.TransactOpts, tokenAddress, receivedAddress, amount)
}

// PullNFTs is a paid mutator transaction binding the contract method 0xf9b3dd08.
//
// Solidity: function pullNFTs(address tokenAddress, address receivedAddress, uint256 amount) returns()
func (_Card *CardTransactorSession) PullNFTs(tokenAddress common.Address, receivedAddress common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Card.Contract.PullNFTs(&_Card.TransactOpts, tokenAddress, receivedAddress, amount)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Card *CardTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Card *CardSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Card.Contract.SafeTransferFrom(&_Card.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_Card *CardTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Card.Contract.SafeTransferFrom(&_Card.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Card *CardTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Card *CardSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Card.Contract.SafeTransferFrom0(&_Card.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_Card *CardTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _Card.Contract.SafeTransferFrom0(&_Card.TransactOpts, from, to, tokenId, _data)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address newAdmin_) returns()
func (_Card *CardTransactor) SetAdmin(opts *bind.TransactOpts, newAdmin_ common.Address) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "setAdmin", newAdmin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address newAdmin_) returns()
func (_Card *CardSession) SetAdmin(newAdmin_ common.Address) (*types.Transaction, error) {
	return _Card.Contract.SetAdmin(&_Card.TransactOpts, newAdmin_)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address newAdmin_) returns()
func (_Card *CardTransactorSession) SetAdmin(newAdmin_ common.Address) (*types.Transaction, error) {
	return _Card.Contract.SetAdmin(&_Card.TransactOpts, newAdmin_)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Card *CardTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Card *CardSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Card.Contract.SetApprovalForAll(&_Card.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Card *CardTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Card.Contract.SetApprovalForAll(&_Card.TransactOpts, operator, approved)
}

// SetBlindBox is a paid mutator transaction binding the contract method 0x5f7c8543.
//
// Solidity: function setBlindBox(address blindBox_) returns()
func (_Card *CardTransactor) SetBlindBox(opts *bind.TransactOpts, blindBox_ common.Address) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "setBlindBox", blindBox_)
}

// SetBlindBox is a paid mutator transaction binding the contract method 0x5f7c8543.
//
// Solidity: function setBlindBox(address blindBox_) returns()
func (_Card *CardSession) SetBlindBox(blindBox_ common.Address) (*types.Transaction, error) {
	return _Card.Contract.SetBlindBox(&_Card.TransactOpts, blindBox_)
}

// SetBlindBox is a paid mutator transaction binding the contract method 0x5f7c8543.
//
// Solidity: function setBlindBox(address blindBox_) returns()
func (_Card *CardTransactorSession) SetBlindBox(blindBox_ common.Address) (*types.Transaction, error) {
	return _Card.Contract.SetBlindBox(&_Card.TransactOpts, blindBox_)
}

// SetMinter is a paid mutator transaction binding the contract method 0xbb2fa28c.
//
// Solidity: function setMinter(address newMinter_, uint256 cardId_, uint256 amount_) returns()
func (_Card *CardTransactor) SetMinter(opts *bind.TransactOpts, newMinter_ common.Address, cardId_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "setMinter", newMinter_, cardId_, amount_)
}

// SetMinter is a paid mutator transaction binding the contract method 0xbb2fa28c.
//
// Solidity: function setMinter(address newMinter_, uint256 cardId_, uint256 amount_) returns()
func (_Card *CardSession) SetMinter(newMinter_ common.Address, cardId_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _Card.Contract.SetMinter(&_Card.TransactOpts, newMinter_, cardId_, amount_)
}

// SetMinter is a paid mutator transaction binding the contract method 0xbb2fa28c.
//
// Solidity: function setMinter(address newMinter_, uint256 cardId_, uint256 amount_) returns()
func (_Card *CardTransactorSession) SetMinter(newMinter_ common.Address, cardId_ *big.Int, amount_ *big.Int) (*types.Transaction, error) {
	return _Card.Contract.SetMinter(&_Card.TransactOpts, newMinter_, cardId_, amount_)
}

// SetMyBaseURI is a paid mutator transaction binding the contract method 0x5dcce234.
//
// Solidity: function setMyBaseURI(string uri_) returns()
func (_Card *CardTransactor) SetMyBaseURI(opts *bind.TransactOpts, uri_ string) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "setMyBaseURI", uri_)
}

// SetMyBaseURI is a paid mutator transaction binding the contract method 0x5dcce234.
//
// Solidity: function setMyBaseURI(string uri_) returns()
func (_Card *CardSession) SetMyBaseURI(uri_ string) (*types.Transaction, error) {
	return _Card.Contract.SetMyBaseURI(&_Card.TransactOpts, uri_)
}

// SetMyBaseURI is a paid mutator transaction binding the contract method 0x5dcce234.
//
// Solidity: function setMyBaseURI(string uri_) returns()
func (_Card *CardTransactorSession) SetMyBaseURI(uri_ string) (*types.Transaction, error) {
	return _Card.Contract.SetMyBaseURI(&_Card.TransactOpts, uri_)
}

// SetSuperMinter is a paid mutator transaction binding the contract method 0xb41d74d8.
//
// Solidity: function setSuperMinter(address newSuperMinter_) returns()
func (_Card *CardTransactor) SetSuperMinter(opts *bind.TransactOpts, newSuperMinter_ common.Address) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "setSuperMinter", newSuperMinter_)
}

// SetSuperMinter is a paid mutator transaction binding the contract method 0xb41d74d8.
//
// Solidity: function setSuperMinter(address newSuperMinter_) returns()
func (_Card *CardSession) SetSuperMinter(newSuperMinter_ common.Address) (*types.Transaction, error) {
	return _Card.Contract.SetSuperMinter(&_Card.TransactOpts, newSuperMinter_)
}

// SetSuperMinter is a paid mutator transaction binding the contract method 0xb41d74d8.
//
// Solidity: function setSuperMinter(address newSuperMinter_) returns()
func (_Card *CardTransactorSession) SetSuperMinter(newSuperMinter_ common.Address) (*types.Transaction, error) {
	return _Card.Contract.SetSuperMinter(&_Card.TransactOpts, newSuperMinter_)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Card *CardTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Card *CardSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Card.Contract.TransferFrom(&_Card.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_Card *CardTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _Card.Contract.TransferFrom(&_Card.TransactOpts, from, to, tokenId)
}

// UpdateCard is a paid mutator transaction binding the contract method 0xce954370.
//
// Solidity: function updateCard(string name_, uint256 cardId_, uint256 camp_, uint256 rarity_, uint256 maxAmount_, string cardURI_) returns()
func (_Card *CardTransactor) UpdateCard(opts *bind.TransactOpts, name_ string, cardId_ *big.Int, camp_ *big.Int, rarity_ *big.Int, maxAmount_ *big.Int, cardURI_ string) (*types.Transaction, error) {
	return _Card.contract.Transact(opts, "updateCard", name_, cardId_, camp_, rarity_, maxAmount_, cardURI_)
}

// UpdateCard is a paid mutator transaction binding the contract method 0xce954370.
//
// Solidity: function updateCard(string name_, uint256 cardId_, uint256 camp_, uint256 rarity_, uint256 maxAmount_, string cardURI_) returns()
func (_Card *CardSession) UpdateCard(name_ string, cardId_ *big.Int, camp_ *big.Int, rarity_ *big.Int, maxAmount_ *big.Int, cardURI_ string) (*types.Transaction, error) {
	return _Card.Contract.UpdateCard(&_Card.TransactOpts, name_, cardId_, camp_, rarity_, maxAmount_, cardURI_)
}

// UpdateCard is a paid mutator transaction binding the contract method 0xce954370.
//
// Solidity: function updateCard(string name_, uint256 cardId_, uint256 camp_, uint256 rarity_, uint256 maxAmount_, string cardURI_) returns()
func (_Card *CardTransactorSession) UpdateCard(name_ string, cardId_ *big.Int, camp_ *big.Int, rarity_ *big.Int, maxAmount_ *big.Int, cardURI_ string) (*types.Transaction, error) {
	return _Card.Contract.UpdateCard(&_Card.TransactOpts, name_, cardId_, camp_, rarity_, maxAmount_, cardURI_)
}

// CardApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Card contract.
type CardApprovalIterator struct {
	Event *CardApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CardApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CardApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CardApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CardApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CardApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CardApproval represents a Approval event raised by the Card contract.
type CardApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Card *CardFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*CardApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Card.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CardApprovalIterator{contract: _Card.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Card *CardFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *CardApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Card.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CardApproval)
				if err := _Card.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_Card *CardFilterer) ParseApproval(log types.Log) (*CardApproval, error) {
	event := new(CardApproval)
	if err := _Card.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CardApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Card contract.
type CardApprovalForAllIterator struct {
	Event *CardApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CardApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CardApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CardApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CardApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CardApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CardApprovalForAll represents a ApprovalForAll event raised by the Card contract.
type CardApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Card *CardFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*CardApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Card.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &CardApprovalForAllIterator{contract: _Card.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Card *CardFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *CardApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Card.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CardApprovalForAll)
				if err := _Card.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_Card *CardFilterer) ParseApprovalForAll(log types.Log) (*CardApprovalForAll, error) {
	event := new(CardApprovalForAll)
	if err := _Card.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CardBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the Card contract.
type CardBurnIterator struct {
	Event *CardBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CardBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CardBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CardBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CardBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CardBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CardBurn represents a Burn event raised by the Card contract.
type CardBurn struct {
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 indexed tokenId_)
func (_Card *CardFilterer) FilterBurn(opts *bind.FilterOpts, tokenId_ []*big.Int) (*CardBurnIterator, error) {

	var tokenId_Rule []interface{}
	for _, tokenId_Item := range tokenId_ {
		tokenId_Rule = append(tokenId_Rule, tokenId_Item)
	}

	logs, sub, err := _Card.contract.FilterLogs(opts, "Burn", tokenId_Rule)
	if err != nil {
		return nil, err
	}
	return &CardBurnIterator{contract: _Card.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 indexed tokenId_)
func (_Card *CardFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *CardBurn, tokenId_ []*big.Int) (event.Subscription, error) {

	var tokenId_Rule []interface{}
	for _, tokenId_Item := range tokenId_ {
		tokenId_Rule = append(tokenId_Rule, tokenId_Item)
	}

	logs, sub, err := _Card.contract.WatchLogs(opts, "Burn", tokenId_Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CardBurn)
				if err := _Card.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0xb90306ad06b2a6ff86ddc9327db583062895ef6540e62dc50add009db5b356eb.
//
// Solidity: event Burn(uint256 indexed tokenId_)
func (_Card *CardFilterer) ParseBurn(log types.Log) (*CardBurn, error) {
	event := new(CardBurn)
	if err := _Card.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CardMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the Card contract.
type CardMintIterator struct {
	Event *CardMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CardMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CardMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CardMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CardMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CardMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CardMint represents a Mint event raised by the Card contract.
type CardMint struct {
	CardId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x07883703ed0e86588a40d76551c92f8a4b329e3bf19765e0e6749473c1a84665.
//
// Solidity: event Mint(uint256 cardId_)
func (_Card *CardFilterer) FilterMint(opts *bind.FilterOpts) (*CardMintIterator, error) {

	logs, sub, err := _Card.contract.FilterLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return &CardMintIterator{contract: _Card.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x07883703ed0e86588a40d76551c92f8a4b329e3bf19765e0e6749473c1a84665.
//
// Solidity: event Mint(uint256 cardId_)
func (_Card *CardFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *CardMint) (event.Subscription, error) {

	logs, sub, err := _Card.contract.WatchLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CardMint)
				if err := _Card.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x07883703ed0e86588a40d76551c92f8a4b329e3bf19765e0e6749473c1a84665.
//
// Solidity: event Mint(uint256 cardId_)
func (_Card *CardFilterer) ParseMint(log types.Log) (*CardMint, error) {
	event := new(CardMint)
	if err := _Card.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CardMintMultiIterator is returned from FilterMintMulti and is used to iterate over the raw logs and unpacked data for MintMulti events raised by the Card contract.
type CardMintMultiIterator struct {
	Event *CardMintMulti // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CardMintMultiIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CardMintMulti)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CardMintMulti)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CardMintMultiIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CardMintMultiIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CardMintMulti represents a MintMulti event raised by the Card contract.
type CardMintMulti struct {
	CardId *big.Int
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMintMulti is a free log retrieval operation binding the contract event 0x20b9ec4cf5d5efbd4a139af041f94cea204bba8485660cff6a37cc30735a5fe9.
//
// Solidity: event MintMulti(uint256 cardId_, uint256 _amount)
func (_Card *CardFilterer) FilterMintMulti(opts *bind.FilterOpts) (*CardMintMultiIterator, error) {

	logs, sub, err := _Card.contract.FilterLogs(opts, "MintMulti")
	if err != nil {
		return nil, err
	}
	return &CardMintMultiIterator{contract: _Card.contract, event: "MintMulti", logs: logs, sub: sub}, nil
}

// WatchMintMulti is a free log subscription operation binding the contract event 0x20b9ec4cf5d5efbd4a139af041f94cea204bba8485660cff6a37cc30735a5fe9.
//
// Solidity: event MintMulti(uint256 cardId_, uint256 _amount)
func (_Card *CardFilterer) WatchMintMulti(opts *bind.WatchOpts, sink chan<- *CardMintMulti) (event.Subscription, error) {

	logs, sub, err := _Card.contract.WatchLogs(opts, "MintMulti")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CardMintMulti)
				if err := _Card.contract.UnpackLog(event, "MintMulti", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintMulti is a log parse operation binding the contract event 0x20b9ec4cf5d5efbd4a139af041f94cea204bba8485660cff6a37cc30735a5fe9.
//
// Solidity: event MintMulti(uint256 cardId_, uint256 _amount)
func (_Card *CardFilterer) ParseMintMulti(log types.Log) (*CardMintMulti, error) {
	event := new(CardMintMulti)
	if err := _Card.contract.UnpackLog(event, "MintMulti", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CardNewCardIterator is returned from FilterNewCard and is used to iterate over the raw logs and unpacked data for NewCard events raised by the Card contract.
type CardNewCardIterator struct {
	Event *CardNewCard // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CardNewCardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CardNewCard)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CardNewCard)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CardNewCardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CardNewCardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CardNewCard represents a NewCard event raised by the Card contract.
type CardNewCard struct {
	Name      string
	CardId    *big.Int
	Camp      *big.Int
	Rarity    *big.Int
	MaxAmount *big.Int
	CardURI   string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewCard is a free log retrieval operation binding the contract event 0x7d0b038840c651a5c20ff73aee0e77345b741607b8d7c5cb9c82be7c2de26b7d.
//
// Solidity: event NewCard(string name_, uint256 cardId_, uint256 camp_, uint256 rarity_, uint256 maxAmount_, string cardURI_)
func (_Card *CardFilterer) FilterNewCard(opts *bind.FilterOpts) (*CardNewCardIterator, error) {

	logs, sub, err := _Card.contract.FilterLogs(opts, "NewCard")
	if err != nil {
		return nil, err
	}
	return &CardNewCardIterator{contract: _Card.contract, event: "NewCard", logs: logs, sub: sub}, nil
}

// WatchNewCard is a free log subscription operation binding the contract event 0x7d0b038840c651a5c20ff73aee0e77345b741607b8d7c5cb9c82be7c2de26b7d.
//
// Solidity: event NewCard(string name_, uint256 cardId_, uint256 camp_, uint256 rarity_, uint256 maxAmount_, string cardURI_)
func (_Card *CardFilterer) WatchNewCard(opts *bind.WatchOpts, sink chan<- *CardNewCard) (event.Subscription, error) {

	logs, sub, err := _Card.contract.WatchLogs(opts, "NewCard")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CardNewCard)
				if err := _Card.contract.UnpackLog(event, "NewCard", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewCard is a log parse operation binding the contract event 0x7d0b038840c651a5c20ff73aee0e77345b741607b8d7c5cb9c82be7c2de26b7d.
//
// Solidity: event NewCard(string name_, uint256 cardId_, uint256 camp_, uint256 rarity_, uint256 maxAmount_, string cardURI_)
func (_Card *CardFilterer) ParseNewCard(log types.Log) (*CardNewCard, error) {
	event := new(CardNewCard)
	if err := _Card.contract.UnpackLog(event, "NewCard", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CardPullNFTsIterator is returned from FilterPullNFTs and is used to iterate over the raw logs and unpacked data for PullNFTs events raised by the Card contract.
type CardPullNFTsIterator struct {
	Event *CardPullNFTs // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CardPullNFTsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CardPullNFTs)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CardPullNFTs)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CardPullNFTsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CardPullNFTsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CardPullNFTs represents a PullNFTs event raised by the Card contract.
type CardPullNFTs struct {
	TokenAddress    common.Address
	ReceivedAddress common.Address
	Amount          *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPullNFTs is a free log retrieval operation binding the contract event 0x4353fd48ccf9fce9a5e548dea48c94142c8ca07352c78a006e0aca2ac650dc12.
//
// Solidity: event PullNFTs(address tokenAddress_, address receivedAddress_, uint256 amount_)
func (_Card *CardFilterer) FilterPullNFTs(opts *bind.FilterOpts) (*CardPullNFTsIterator, error) {

	logs, sub, err := _Card.contract.FilterLogs(opts, "PullNFTs")
	if err != nil {
		return nil, err
	}
	return &CardPullNFTsIterator{contract: _Card.contract, event: "PullNFTs", logs: logs, sub: sub}, nil
}

// WatchPullNFTs is a free log subscription operation binding the contract event 0x4353fd48ccf9fce9a5e548dea48c94142c8ca07352c78a006e0aca2ac650dc12.
//
// Solidity: event PullNFTs(address tokenAddress_, address receivedAddress_, uint256 amount_)
func (_Card *CardFilterer) WatchPullNFTs(opts *bind.WatchOpts, sink chan<- *CardPullNFTs) (event.Subscription, error) {

	logs, sub, err := _Card.contract.WatchLogs(opts, "PullNFTs")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CardPullNFTs)
				if err := _Card.contract.UnpackLog(event, "PullNFTs", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePullNFTs is a log parse operation binding the contract event 0x4353fd48ccf9fce9a5e548dea48c94142c8ca07352c78a006e0aca2ac650dc12.
//
// Solidity: event PullNFTs(address tokenAddress_, address receivedAddress_, uint256 amount_)
func (_Card *CardFilterer) ParsePullNFTs(log types.Log) (*CardPullNFTs, error) {
	event := new(CardPullNFTs)
	if err := _Card.contract.UnpackLog(event, "PullNFTs", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CardSetAdminIterator is returned from FilterSetAdmin and is used to iterate over the raw logs and unpacked data for SetAdmin events raised by the Card contract.
type CardSetAdminIterator struct {
	Event *CardSetAdmin // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CardSetAdminIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CardSetAdmin)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CardSetAdmin)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CardSetAdminIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CardSetAdminIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CardSetAdmin represents a SetAdmin event raised by the Card contract.
type CardSetAdmin struct {
	New common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterSetAdmin is a free log retrieval operation binding the contract event 0x5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1.
//
// Solidity: event SetAdmin(address _new)
func (_Card *CardFilterer) FilterSetAdmin(opts *bind.FilterOpts) (*CardSetAdminIterator, error) {

	logs, sub, err := _Card.contract.FilterLogs(opts, "SetAdmin")
	if err != nil {
		return nil, err
	}
	return &CardSetAdminIterator{contract: _Card.contract, event: "SetAdmin", logs: logs, sub: sub}, nil
}

// WatchSetAdmin is a free log subscription operation binding the contract event 0x5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1.
//
// Solidity: event SetAdmin(address _new)
func (_Card *CardFilterer) WatchSetAdmin(opts *bind.WatchOpts, sink chan<- *CardSetAdmin) (event.Subscription, error) {

	logs, sub, err := _Card.contract.WatchLogs(opts, "SetAdmin")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CardSetAdmin)
				if err := _Card.contract.UnpackLog(event, "SetAdmin", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAdmin is a log parse operation binding the contract event 0x5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a1.
//
// Solidity: event SetAdmin(address _new)
func (_Card *CardFilterer) ParseSetAdmin(log types.Log) (*CardSetAdmin, error) {
	event := new(CardSetAdmin)
	if err := _Card.contract.UnpackLog(event, "SetAdmin", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CardSetBlindBoxIterator is returned from FilterSetBlindBox and is used to iterate over the raw logs and unpacked data for SetBlindBox events raised by the Card contract.
type CardSetBlindBoxIterator struct {
	Event *CardSetBlindBox // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CardSetBlindBoxIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CardSetBlindBox)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CardSetBlindBox)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CardSetBlindBoxIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CardSetBlindBoxIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CardSetBlindBox represents a SetBlindBox event raised by the Card contract.
type CardSetBlindBox struct {
	New common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterSetBlindBox is a free log retrieval operation binding the contract event 0xc2d6e5aa65a6a82749a98248a03c62d85dceda00a7bdd681867e8783cf0f8362.
//
// Solidity: event SetBlindBox(address _new)
func (_Card *CardFilterer) FilterSetBlindBox(opts *bind.FilterOpts) (*CardSetBlindBoxIterator, error) {

	logs, sub, err := _Card.contract.FilterLogs(opts, "SetBlindBox")
	if err != nil {
		return nil, err
	}
	return &CardSetBlindBoxIterator{contract: _Card.contract, event: "SetBlindBox", logs: logs, sub: sub}, nil
}

// WatchSetBlindBox is a free log subscription operation binding the contract event 0xc2d6e5aa65a6a82749a98248a03c62d85dceda00a7bdd681867e8783cf0f8362.
//
// Solidity: event SetBlindBox(address _new)
func (_Card *CardFilterer) WatchSetBlindBox(opts *bind.WatchOpts, sink chan<- *CardSetBlindBox) (event.Subscription, error) {

	logs, sub, err := _Card.contract.WatchLogs(opts, "SetBlindBox")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CardSetBlindBox)
				if err := _Card.contract.UnpackLog(event, "SetBlindBox", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetBlindBox is a log parse operation binding the contract event 0xc2d6e5aa65a6a82749a98248a03c62d85dceda00a7bdd681867e8783cf0f8362.
//
// Solidity: event SetBlindBox(address _new)
func (_Card *CardFilterer) ParseSetBlindBox(log types.Log) (*CardSetBlindBox, error) {
	event := new(CardSetBlindBox)
	if err := _Card.contract.UnpackLog(event, "SetBlindBox", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CardSetMinterIterator is returned from FilterSetMinter and is used to iterate over the raw logs and unpacked data for SetMinter events raised by the Card contract.
type CardSetMinterIterator struct {
	Event *CardSetMinter // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CardSetMinterIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CardSetMinter)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CardSetMinter)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CardSetMinterIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CardSetMinterIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CardSetMinter represents a SetMinter event raised by the Card contract.
type CardSetMinter struct {
	New    common.Address
	CardId *big.Int
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSetMinter is a free log retrieval operation binding the contract event 0x0561e3bc0e85ba2a46eebd611c60cd166c9080d8b53ba0ce668aad6c54df6ec5.
//
// Solidity: event SetMinter(address _new, uint256 cardId_, uint256 amount_)
func (_Card *CardFilterer) FilterSetMinter(opts *bind.FilterOpts) (*CardSetMinterIterator, error) {

	logs, sub, err := _Card.contract.FilterLogs(opts, "SetMinter")
	if err != nil {
		return nil, err
	}
	return &CardSetMinterIterator{contract: _Card.contract, event: "SetMinter", logs: logs, sub: sub}, nil
}

// WatchSetMinter is a free log subscription operation binding the contract event 0x0561e3bc0e85ba2a46eebd611c60cd166c9080d8b53ba0ce668aad6c54df6ec5.
//
// Solidity: event SetMinter(address _new, uint256 cardId_, uint256 amount_)
func (_Card *CardFilterer) WatchSetMinter(opts *bind.WatchOpts, sink chan<- *CardSetMinter) (event.Subscription, error) {

	logs, sub, err := _Card.contract.WatchLogs(opts, "SetMinter")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CardSetMinter)
				if err := _Card.contract.UnpackLog(event, "SetMinter", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetMinter is a log parse operation binding the contract event 0x0561e3bc0e85ba2a46eebd611c60cd166c9080d8b53ba0ce668aad6c54df6ec5.
//
// Solidity: event SetMinter(address _new, uint256 cardId_, uint256 amount_)
func (_Card *CardFilterer) ParseSetMinter(log types.Log) (*CardSetMinter, error) {
	event := new(CardSetMinter)
	if err := _Card.contract.UnpackLog(event, "SetMinter", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CardSetSuperMinterIterator is returned from FilterSetSuperMinter and is used to iterate over the raw logs and unpacked data for SetSuperMinter events raised by the Card contract.
type CardSetSuperMinterIterator struct {
	Event *CardSetSuperMinter // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CardSetSuperMinterIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CardSetSuperMinter)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CardSetSuperMinter)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CardSetSuperMinterIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CardSetSuperMinterIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CardSetSuperMinter represents a SetSuperMinter event raised by the Card contract.
type CardSetSuperMinter struct {
	New common.Address
	Raw types.Log // Blockchain specific contextual infos
}

// FilterSetSuperMinter is a free log retrieval operation binding the contract event 0xd4f3adbf0b736e108a3a5cd8d42edef56c28856b9806e8eda50a0acc1097e9fb.
//
// Solidity: event SetSuperMinter(address _new)
func (_Card *CardFilterer) FilterSetSuperMinter(opts *bind.FilterOpts) (*CardSetSuperMinterIterator, error) {

	logs, sub, err := _Card.contract.FilterLogs(opts, "SetSuperMinter")
	if err != nil {
		return nil, err
	}
	return &CardSetSuperMinterIterator{contract: _Card.contract, event: "SetSuperMinter", logs: logs, sub: sub}, nil
}

// WatchSetSuperMinter is a free log subscription operation binding the contract event 0xd4f3adbf0b736e108a3a5cd8d42edef56c28856b9806e8eda50a0acc1097e9fb.
//
// Solidity: event SetSuperMinter(address _new)
func (_Card *CardFilterer) WatchSetSuperMinter(opts *bind.WatchOpts, sink chan<- *CardSetSuperMinter) (event.Subscription, error) {

	logs, sub, err := _Card.contract.WatchLogs(opts, "SetSuperMinter")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CardSetSuperMinter)
				if err := _Card.contract.UnpackLog(event, "SetSuperMinter", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetSuperMinter is a log parse operation binding the contract event 0xd4f3adbf0b736e108a3a5cd8d42edef56c28856b9806e8eda50a0acc1097e9fb.
//
// Solidity: event SetSuperMinter(address _new)
func (_Card *CardFilterer) ParseSetSuperMinter(log types.Log) (*CardSetSuperMinter, error) {
	event := new(CardSetSuperMinter)
	if err := _Card.contract.UnpackLog(event, "SetSuperMinter", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CardTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Card contract.
type CardTransferIterator struct {
	Event *CardTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CardTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CardTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CardTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CardTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CardTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CardTransfer represents a Transfer event raised by the Card contract.
type CardTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Card *CardFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*CardTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Card.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CardTransferIterator{contract: _Card.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Card *CardFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *CardTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _Card.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CardTransfer)
				if err := _Card.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_Card *CardFilterer) ParseTransfer(log types.Log) (*CardTransfer, error) {
	event := new(CardTransfer)
	if err := _Card.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
